import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as r,c as u,b as s,a as p,w as a,e as k,d as n}from"./app-DhX54nll.js";const d={},h=s("h1",{id:"pip-使用代理",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#pip-使用代理"},[s("span",null,"pip 使用代理")])],-1),_={class:"table-of-contents"},y=k(`<h2 id="方法-1使用系统代理" tabindex="-1"><a class="header-anchor" href="#方法-1使用系统代理"><span>方法 1：使用系统代理</span></a></h2><p>不推荐使用系统代理直接安装，因为在以前的 Python 中获取代理时不能识别 HTTPS 代理，或者没有正确的证书导致 SSL 错误。</p><p>通过下面的代码查看系统代理的差异，您可能在一些爬虫任务中需要解决代理问题：</p><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> sys
<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request

<span class="token keyword">def</span> <span class="token function">get_sys_proxies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    proxies <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>getproxies<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> sys<span class="token punctuation">.</span>platform <span class="token operator">==</span> <span class="token string">&#39;win32&#39;</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token string">&#39;https&#39;</span> <span class="token keyword">in</span> proxies<span class="token punctuation">:</span>
            proxies<span class="token punctuation">[</span><span class="token string">&#39;https&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> proxies<span class="token punctuation">[</span><span class="token string">&#39;https&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;https://&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> proxies

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>getproxies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>get_sys_proxies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>如果您需要使用这种方法，请查看 <a href="https://pip.pypa.io/en/stable/topics/https-certificates/" target="_blank" rel="noopener noreferrer">pip: HTTPS Certificates</a> 了解更多。</p><h2 id="方法-2指定变量" tabindex="-1"><a class="header-anchor" href="#方法-2指定变量"><span>方法 2：指定变量</span></a></h2><p>指定 <code>http_proxy</code> 和 <code>https_proxy</code> 变量。其值需要为 <code>scheme://[user:passwd@]proxy.server:port</code> 格式。</p><div class="hint-container warning"><p class="hint-container-title">SOCKS 协议</p><p>需要注意的是，SOCKS 协议的格式 <code>socks://</code> 可能不能被识别，可以写为 <code>socks5://</code>，因为当前版本的 Python 不能识别 SOCKS 协议的版本，而普遍使用的 SOCKS 协议是版本 5。</p></div><p>示例：</p>`,9),g=s("div",{class:"language-bash","data-ext":"sh","data-title":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token builtin class-name"},"export"),n(),s("span",{class:"token assign-left variable"},"https_proxy"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'socks5://127.0.0.1:10808'"),n(`
`),s("span",{class:"token builtin class-name"},"export"),n(),s("span",{class:"token assign-left variable"},"http_proxy"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'http://127.0.0.1:10809'"),n(`
`),s("span",{class:"token comment"},"# pip3 install ..."),n(`
`)])])],-1),x=s("div",{class:"language-bash","data-ext":"sh","data-title":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token builtin class-name"},"set"),n(),s("span",{class:"token assign-left variable"},"https_proxy"),s("span",{class:"token operator"},"="),n(`socks5://127.0.0.1:10808
`),s("span",{class:"token builtin class-name"},"set"),n(),s("span",{class:"token assign-left variable"},"http_proxy"),s("span",{class:"token operator"},"="),n(`http://127.0.0.1:10809
`),s("span",{class:"token comment"},"# pip install ..."),n(`
`)])])],-1),m=s("p",null,"如果当前系统没有 SOCKS 协议支持，可以安装其支持包：",-1),v=s("div",{class:"language-bash","data-ext":"sh","data-title":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("pip3 "),s("span",{class:"token function"},"install"),n(` pysocks
`)])])],-1),b=s("div",{class:"language-bash","data-ext":"sh","data-title":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("pip "),s("span",{class:"token function"},"install"),n(` pysocks
`)])])],-1),f=s("h2",{id:"方法-3使用命令行参数",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#方法-3使用命令行参数"},[s("span",null,"方法 3：使用命令行参数")])],-1),w=s("p",null,[n("使用 "),s("code",null,"pip"),n(" 时指定 "),s("code",null,"--proxy"),n(" 可指定代理，规则和方法 1 一致，需要符合 "),s("code",null,"scheme://[user:passwd@]proxy.server:port"),n(" 格式。")],-1),S=s("p",null,"例如：",-1),T=s("div",{class:"language-bash","data-ext":"sh","data-title":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("pip3 "),s("span",{class:"token function"},"install"),n(" opencv-python "),s("span",{class:"token parameter variable"},"--proxy"),n(` socks5://127.0.0.1:10808
`)])])],-1),A=s("div",{class:"language-bash","data-ext":"sh","data-title":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("pip "),s("span",{class:"token function"},"install"),n(" opencv-python "),s("span",{class:"token parameter variable"},"--proxy"),n(` socks5://127.0.0.1:10808
`)])])],-1);function C(P,L){const o=l("router-link"),c=l("CodeTabs");return r(),u("div",null,[h,s("nav",_,[s("ul",null,[s("li",null,[p(o,{to:"#方法-1使用系统代理"},{default:a(()=>[n("方法 1：使用系统代理")]),_:1})]),s("li",null,[p(o,{to:"#方法-2指定变量"},{default:a(()=>[n("方法 2：指定变量")]),_:1})]),s("li",null,[p(o,{to:"#方法-3使用命令行参数"},{default:a(()=>[n("方法 3：使用命令行参数")]),_:1})])])]),y,p(c,{id:"33",data:[{id:"Linux/Mac"},{id:"Windows"}],"tab-id":"sys"},{title0:a(({value:t,isActive:e})=>[n("Linux/Mac")]),title1:a(({value:t,isActive:e})=>[n("Windows")]),tab0:a(({value:t,isActive:e})=>[g]),tab1:a(({value:t,isActive:e})=>[x]),_:1}),m,p(c,{id:"44",data:[{id:"Linux/Mac"},{id:"Windows"}],"tab-id":"sys"},{title0:a(({value:t,isActive:e})=>[n("Linux/Mac")]),title1:a(({value:t,isActive:e})=>[n("Windows")]),tab0:a(({value:t,isActive:e})=>[v]),tab1:a(({value:t,isActive:e})=>[b]),_:1}),f,w,S,p(c,{id:"61",data:[{id:"Linux/Mac"},{id:"Windows"}],"tab-id":"sys"},{title0:a(({value:t,isActive:e})=>[n("Linux/Mac")]),title1:a(({value:t,isActive:e})=>[n("Windows")]),tab0:a(({value:t,isActive:e})=>[T]),tab1:a(({value:t,isActive:e})=>[A]),_:1})])}const M=i(d,[["render",C],["__file","proxy.html.vue"]]),N=JSON.parse(`{"path":"/posts/python/tools/pip/proxy.html","title":"pip 使用代理","lang":"zh-CN","frontmatter":{"description":"pip 使用代理 方法 1：使用系统代理 不推荐使用系统代理直接安装，因为在以前的 Python 中获取代理时不能识别 HTTPS 代理，或者没有正确的证书导致 SSL 错误。 通过下面的代码查看系统代理的差异，您可能在一些爬虫任务中需要解决代理问题： 如果您需要使用这种方法，请查看 pip: HTTPS Certificates 了解更多。 方法 2...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/posts/python/tools/pip/proxy.html"}],["meta",{"property":"og:site_name","content":"鸭梨"}],["meta",{"property":"og:title","content":"pip 使用代理"}],["meta",{"property":"og:description","content":"pip 使用代理 方法 1：使用系统代理 不推荐使用系统代理直接安装，因为在以前的 Python 中获取代理时不能识别 HTTPS 代理，或者没有正确的证书导致 SSL 错误。 通过下面的代码查看系统代理的差异，您可能在一些爬虫任务中需要解决代理问题： 如果您需要使用这种方法，请查看 pip: HTTPS Certificates 了解更多。 方法 2..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T04:16:18.000Z"}],["meta",{"property":"article:author","content":"Alex Sun"}],["meta",{"property":"article:modified_time","content":"2024-05-27T04:16:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"pip 使用代理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-27T04:16:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alex Sun\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"方法 1：使用系统代理","slug":"方法-1使用系统代理","link":"#方法-1使用系统代理","children":[]},{"level":2,"title":"方法 2：指定变量","slug":"方法-2指定变量","link":"#方法-2指定变量","children":[]},{"level":2,"title":"方法 3：使用命令行参数","slug":"方法-3使用命令行参数","link":"#方法-3使用命令行参数","children":[]}],"git":{"createdTime":1716783378000,"updatedTime":1716783378000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":1.29,"words":386},"filePathRelative":"posts/python/tools/pip/proxy.md","localizedDate":"2024年5月27日","excerpt":"\\n\\n<h2>方法 1：使用系统代理</h2>\\n<p>不推荐使用系统代理直接安装，因为在以前的 Python 中获取代理时不能识别 HTTPS 代理，或者没有正确的证书导致 SSL 错误。</p>\\n<p>通过下面的代码查看系统代理的差异，您可能在一些爬虫任务中需要解决代理问题：</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> sys\\n<span class=\\"token keyword\\">import</span> urllib<span class=\\"token punctuation\\">.</span>request\\n\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">get_sys_proxies</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    proxies <span class=\\"token operator\\">=</span> urllib<span class=\\"token punctuation\\">.</span>request<span class=\\"token punctuation\\">.</span>getproxies<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">if</span> sys<span class=\\"token punctuation\\">.</span>platform <span class=\\"token operator\\">==</span> <span class=\\"token string\\">'win32'</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token string\\">'https'</span> <span class=\\"token keyword\\">in</span> proxies<span class=\\"token punctuation\\">:</span>\\n            proxies<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'https'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> proxies<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'https'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>replace<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'https://'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'http://'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> proxies\\n\\n<span class=\\"token keyword\\">if</span> __name__ <span class=\\"token operator\\">==</span> <span class=\\"token string\\">'__main__'</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>urllib<span class=\\"token punctuation\\">.</span>request<span class=\\"token punctuation\\">.</span>getproxies<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>get_sys_proxies<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}`);export{M as comp,N as data};

import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as d,c,b as t,a,w as n,e as r,d as l}from"./app-DhX54nll.js";const i={},p=t("h1",{id:"operator---标准运算符代替",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#operator---标准运算符代替"},[t("span",null,"operator - 标准运算符代替")])],-1),y={class:"table-of-contents"},u=r(`<h2 id="1-标准运算符代替" tabindex="-1"><a class="header-anchor" href="#1-标准运算符代替"><span>1. 标准运算符代替</span></a></h2><table><thead><tr><th>项目</th><th>信息</th></tr></thead><tbody><tr><td>源代码</td><td><a href="https://github.com/python/cpython/tree/3.11/Lib/operator.py" target="_blank" rel="noopener noreferrer">Lib/operator.py</a></td></tr><tr><td>Python 版本</td><td>全版本</td></tr><tr><td>标签</td><td>函数式编程</td></tr></tbody></table><p>标准库 <code>operator</code> 中包含一系列函数，用于在一些场景下代替标准运算符操作。</p><div class="hint-container info"><p class="hint-container-title">魔术方法</p><p>许多方法都有对应的魔术方法。因此，许多函数也提供了后向兼容的双下划线版本，在下表中带有星号的方法都有其双下划线版本。如果函数名已经有下划线结尾，那么结尾还是双下划线，此下划线只是为了和关键字区分。</p><p>不建议双下划线版本以确保表述清晰。</p></div><p>例如下面是一些对应的双下划线版本：</p><table><thead><tr><th style="text-align:center;">标准方法</th><th style="text-align:center;">双下划线版本</th></tr></thead><tbody><tr><td style="text-align:center;"><code>operator.lt(a, b)</code></td><td style="text-align:center;"><code>operator.__lt__(a, b)</code></td></tr><tr><td style="text-align:center;"><code>operator.le(a, b)</code></td><td style="text-align:center;"><code>operator.__le__(a, b)</code></td></tr><tr><td style="text-align:center;"><code>operator.eq(a, b)</code></td><td style="text-align:center;"><code>operator.__eq__(a, b)</code></td></tr><tr><td style="text-align:center;"><code>operator.ne(a, b)</code></td><td style="text-align:center;"><code>operator.__ne__(a, b)</code></td></tr><tr><td style="text-align:center;"><code>operator.ge(a, b)</code></td><td style="text-align:center;"><code>operator.__ge__(a, b)</code></td></tr><tr><td style="text-align:center;"><code>operator.gt(a, b)</code></td><td style="text-align:center;"><code>operator.__gt__(a, b)</code></td></tr></tbody></table><h3 id="11-比较运算符" tabindex="-1"><a class="header-anchor" href="#11-比较运算符"><span>1.1 比较运算符</span></a></h3><table><thead><tr><th style="text-align:left;">运算</th><th style="text-align:left;">语法</th><th style="text-align:left;">函数</th></tr></thead><tbody><tr><td style="text-align:left;">小于</td><td style="text-align:left;"><code>a &lt; b</code></td><td style="text-align:left;"><code>lt(a, b)</code> *</td></tr><tr><td style="text-align:left;">小于等于</td><td style="text-align:left;"><code>a &lt;= b</code></td><td style="text-align:left;"><code>le(a, b)</code> *</td></tr><tr><td style="text-align:left;">等于</td><td style="text-align:left;"><code>a == b</code></td><td style="text-align:left;"><code>eq(a, b)</code> *</td></tr><tr><td style="text-align:left;">不等于</td><td style="text-align:left;"><code>a != b</code></td><td style="text-align:left;"><code>ne(a, b)</code> *</td></tr><tr><td style="text-align:left;">大于等于</td><td style="text-align:left;"><code>a &gt;= b</code></td><td style="text-align:left;"><code>ge(a, b)</code> *</td></tr><tr><td style="text-align:left;">大于</td><td style="text-align:left;"><code>a &gt; b</code></td><td style="text-align:left;"><code>gt(a, b)</code> *</td></tr></tbody></table><h3 id="12-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#12-逻辑运算符"><span>1.2 逻辑运算符</span></a></h3><table><thead><tr><th style="text-align:left;">运算</th><th style="text-align:left;">语法</th><th style="text-align:left;">函数</th></tr></thead><tbody><tr><td style="text-align:left;">逻辑否定</td><td style="text-align:left;"><code>not a</code></td><td style="text-align:left;"><code>not_(a)</code> *</td></tr><tr><td style="text-align:left;">真值测试</td><td style="text-align:left;"><code>obj</code></td><td style="text-align:left;"><code>truth(obj)</code></td></tr><tr><td style="text-align:left;">标识</td><td style="text-align:left;"><code>a is b</code></td><td style="text-align:left;"><code>is_(a, b)</code></td></tr><tr><td style="text-align:left;">标识</td><td style="text-align:left;"><code>a is not b</code></td><td style="text-align:left;"><code>is_not(a, b)</code></td></tr></tbody></table><h3 id="13-算术运算符" tabindex="-1"><a class="header-anchor" href="#13-算术运算符"><span>1.3 算术运算符</span></a></h3><table><thead><tr><th style="text-align:left;">运算</th><th style="text-align:left;">语法</th><th style="text-align:left;">函数</th></tr></thead><tbody><tr><td style="text-align:left;">绝对值</td><td style="text-align:left;"></td><td style="text-align:left;"><code>abs(a)</code> *</td></tr><tr><td style="text-align:left;">转换为整数</td><td style="text-align:left;"></td><td style="text-align:left;"><code>index(a)</code> *</td></tr><tr><td style="text-align:left;">正数</td><td style="text-align:left;"><code>+ a</code></td><td style="text-align:left;"><code>pos(a)</code> *</td></tr><tr><td style="text-align:left;">算术取反</td><td style="text-align:left;"><code>- a</code></td><td style="text-align:left;"><code>neg(a)</code> *</td></tr><tr><td style="text-align:left;">加法</td><td style="text-align:left;"><code>a + b</code></td><td style="text-align:left;"><code>add(a, b)</code> *</td></tr><tr><td style="text-align:left;">减法</td><td style="text-align:left;"><code>a - b</code></td><td style="text-align:left;"><code>sub(a, b)</code> *</td></tr><tr><td style="text-align:left;">乘法</td><td style="text-align:left;"><code>a * b</code></td><td style="text-align:left;"><code>mul(a, b)</code> *</td></tr><tr><td style="text-align:left;">除法</td><td style="text-align:left;"><code>a / b</code></td><td style="text-align:left;"><code>truediv(a, b)</code> *</td></tr><tr><td style="text-align:left;">整除</td><td style="text-align:left;"><code>a // b</code></td><td style="text-align:left;"><code>floordiv(a, b)</code> *</td></tr><tr><td style="text-align:left;">取幂</td><td style="text-align:left;"><code>a ** b</code></td><td style="text-align:left;"><code>pow(a, b)</code> *</td></tr><tr><td style="text-align:left;">取模</td><td style="text-align:left;"><code>a % b</code></td><td style="text-align:left;"><code>mod(a, b)</code> *</td></tr><tr><td style="text-align:left;">矩阵乘法 <em>@3.5+</em></td><td style="text-align:left;"><code>a @ b</code></td><td style="text-align:left;"><code>matmul(a, b)</code> *</td></tr><tr><td style="text-align:left;">按位与</td><td style="text-align:left;"><code>a &amp; b</code></td><td style="text-align:left;"><code>and_(a, b)</code> *</td></tr><tr><td style="text-align:left;">按位异或</td><td style="text-align:left;"><code>a ^ b</code></td><td style="text-align:left;"><code>xor(a, b)</code> *</td></tr><tr><td style="text-align:left;">按位取反</td><td style="text-align:left;"><code>~ a</code></td><td style="text-align:left;"><code>inv(a)</code> <em>、<code>invert(a)</code></em></td></tr><tr><td style="text-align:left;">按位或</td><td style="text-align:left;"><code>a | b</code></td><td style="text-align:left;"><code>or_(a, b)</code> *</td></tr><tr><td style="text-align:left;">右移</td><td style="text-align:left;"><code>a &gt;&gt; b</code></td><td style="text-align:left;"><code>rshift(a, b)</code> *</td></tr><tr><td style="text-align:left;">左移</td><td style="text-align:left;"><code>a &lt;&lt; b</code></td><td style="text-align:left;"><code>lshift(a, b)</code> *</td></tr></tbody></table><h3 id="14-序列操作" tabindex="-1"><a class="header-anchor" href="#14-序列操作"><span>1.4 序列操作</span></a></h3><table><thead><tr><th style="text-align:left;">运算</th><th style="text-align:left;">语法</th><th style="text-align:left;">函数</th></tr></thead><tbody><tr><td style="text-align:left;"><code>b</code> 在 <code>a</code> 中出现的次数</td><td style="text-align:left;"></td><td style="text-align:left;"><code>countOf(a, b)</code></td></tr><tr><td style="text-align:left;"><code>b</code> 在 <code>a</code> 中首次出现的索引</td><td style="text-align:left;"></td><td style="text-align:left;"><code>indexOf(a, b)</code></td></tr><tr><td style="text-align:left;">对象的估计长度 <em>@3.4+</em></td><td style="text-align:left;"></td><td style="text-align:left;"><code>length_hint(obj, default=0)</code></td></tr><tr><td style="text-align:left;">序列拼接</td><td style="text-align:left;"><code>seq1 + seq2</code></td><td style="text-align:left;"><code>concat(seq1, seq2)</code> *</td></tr><tr><td style="text-align:left;">包含测试</td><td style="text-align:left;"><code>obj in seq</code></td><td style="text-align:left;"><code>contains(seq, obj)</code> *</td></tr><tr><td style="text-align:left;">索引赋值</td><td style="text-align:left;"><code>obj[k] = v</code></td><td style="text-align:left;"><code>setitem(obj, k, v)</code> *</td></tr><tr><td style="text-align:left;">索引取值</td><td style="text-align:left;"><code>obj[k]</code></td><td style="text-align:left;"><code>getitem(obj, k)</code> *</td></tr><tr><td style="text-align:left;">索引删除</td><td style="text-align:left;"><code>del obj[k]</code></td><td style="text-align:left;"><code>delitem(obj, k)</code> *</td></tr><tr><td style="text-align:left;">切片赋值</td><td style="text-align:left;"><code>seq[i:j] = values</code></td><td style="text-align:left;"><code>setitem(seq, slice(i, j), values)</code> *</td></tr><tr><td style="text-align:left;">切片取值</td><td style="text-align:left;"><code>seq[i:j]</code></td><td style="text-align:left;"><code>getitem(seq, slice(i, j))</code> *</td></tr><tr><td style="text-align:left;">切片删除</td><td style="text-align:left;"><code>del seq[i:j]</code></td><td style="text-align:left;"><code>delitem(seq, slice(i, j))</code> *</td></tr><tr><td style="text-align:left;">字符串格式化</td><td style="text-align:left;"><code>s % obj</code></td><td style="text-align:left;"><code>mod(s, obj)</code> *</td></tr></tbody></table><h3 id="15-原地运算符" tabindex="-1"><a class="header-anchor" href="#15-原地运算符"><span>1.5 原地运算符</span></a></h3><table><thead><tr><th style="text-align:left;">语法</th><th style="text-align:left;">函数</th></tr></thead><tbody><tr><td style="text-align:left;"><code>a += b</code></td><td style="text-align:left;"><code>iadd(a, b)</code> *</td></tr><tr><td style="text-align:left;"><code>a &amp;= b</code></td><td style="text-align:left;"><code>iand(a, b)</code> *</td></tr><tr><td style="text-align:left;"><code>a += b</code></td><td style="text-align:left;"><code>iconcat(a, b)</code> *（其中 <code>a</code>、<code>b</code> 为序列）</td></tr><tr><td style="text-align:left;"><code>a //= b</code></td><td style="text-align:left;"><code>ifloordiv(a, b)</code> *</td></tr><tr><td style="text-align:left;"><code>a &lt;&lt;= b</code></td><td style="text-align:left;"><code>ilshift(a, b)</code> *</td></tr><tr><td style="text-align:left;"><code>a %= b</code></td><td style="text-align:left;"><code>imod(a, b)</code> *</td></tr><tr><td style="text-align:left;"><code>a *= b</code></td><td style="text-align:left;"><code>imul(a, b)</code> *</td></tr><tr><td style="text-align:left;"><code>a @= b</code> <em>@3.5+</em></td><td style="text-align:left;"><code>imatmul(a, b)</code> *</td></tr><tr><td style="text-align:left;"><code>a |= b</code></td><td style="text-align:left;"><code>ior(a, b)</code> *</td></tr><tr><td style="text-align:left;"><code>a **= b</code></td><td style="text-align:left;"><code>ipow(a, b)</code> *</td></tr><tr><td style="text-align:left;"><code>a &gt;&gt;= b</code></td><td style="text-align:left;"><code>irshift(a, b)</code> *</td></tr><tr><td style="text-align:left;"><code>a -= b</code></td><td style="text-align:left;"><code>isub(a, b)</code> *</td></tr><tr><td style="text-align:left;"><code>a /= b</code></td><td style="text-align:left;"><code>itruediv(a, b)</code> *</td></tr><tr><td style="text-align:left;"><code>a ^= b</code></td><td style="text-align:left;"><code>ixor(a, b)</code> *</td></tr></tbody></table><h3 id="16-可调用对象" tabindex="-1"><a class="header-anchor" href="#16-可调用对象"><span>1.6 可调用对象</span></a></h3><table><thead><tr><th style="text-align:left;">运算</th><th style="text-align:left;">语法</th><th style="text-align:left;">函数</th></tr></thead><tbody><tr><td style="text-align:left;">调用对象 <em>@3.11+</em></td><td style="text-align:left;"><code>obj(*args, **kwargs)</code></td><td style="text-align:left;"><code>operator.call(obj, /, *args, **kwargs)</code> *</td></tr></tbody></table><h2 id="2-函数式编程工具" tabindex="-1"><a class="header-anchor" href="#2-函数式编程工具"><span>2. 函数式编程工具</span></a></h2><p><code>operator</code> 模块还定义了一些用于常规属性和条目查找的工具。 这些工具适合用来编写快速字段提取器作为 <code>map()</code>、<code>sorted()</code>、<code>itertools.groupby()</code> 或其他需要相应函数参数的函数的参数。</p><h3 id="21-属性获取器" tabindex="-1"><a class="header-anchor" href="#21-属性获取器"><span>2.1 属性获取器</span></a></h3><table><thead><tr><th style="text-align:center;">语法</th></tr></thead><tbody><tr><td style="text-align:center;"><code>operator.attrgetter(attr)</code></td></tr><tr><td style="text-align:center;"><code>operator.attrgetter(*attrs)</code></td></tr></tbody></table><p>返回一个可从操作数中获取 <code>attr</code> 的可调用对象。如果请求了一个以上的属性，则返回一个属性元组。属性名称还可包含点号。例如：</p><ul><li>在 <code>f = attrgetter(&#39;name&#39;)</code> 之后，调用 <code>f(b)</code> 将返回 <code>b.name</code></li><li>在 <code>f = attrgetter(&#39;name&#39;, &#39;date&#39;)</code> 之后，调用 <code>f(b)</code> 将返回 <code>(b.name, b.date)</code></li><li>在 <code>f = attrgetter(&#39;name.first&#39;, &#39;name.last&#39;)</code> 之后，调用 <code>f(b)</code> 将返回 <code>(b.name.first, b.name.last)</code></li></ul><details class="hint-container details"><summary>等价实现</summary><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">attrgetter</span><span class="token punctuation">(</span><span class="token operator">*</span>items<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">&#39;attribute name must be a string&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        attr <span class="token operator">=</span> items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> resolve_attr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> attr<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>resolve_attr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> attr<span class="token punctuation">)</span> <span class="token keyword">for</span> attr <span class="token keyword">in</span> items<span class="token punctuation">)</span>
    <span class="token keyword">return</span> g

<span class="token keyword">def</span> <span class="token function">resolve_attr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> name <span class="token keyword">in</span> attr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        obj <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> name<span class="token punctuation">)</span>
    <span class="token keyword">return</span> obj
</code></pre></div></details><h3 id="22-成员获取器" tabindex="-1"><a class="header-anchor" href="#22-成员获取器"><span>2.2 成员获取器</span></a></h3><table><thead><tr><th style="text-align:center;">语法</th></tr></thead><tbody><tr><td style="text-align:center;"><code>operator.itemgetter(item)</code></td></tr><tr><td style="text-align:center;"><code>operator.itemgetter(*items)</code></td></tr></tbody></table><p>返回一个使用操作数的 <code>__getitem__()</code> 方法从操作数中获取 <code>item</code> 的可调用对象。如果指定了多个条目，则返回一个查找值的元组。例如：</p><ul><li>在 <code>f = itemgetter(2)</code> 之后，调用 <code>f(r)</code> 将返回 <code>r[2]</code></li><li>在 <code>g = itemgetter(2, 5, 3)</code> 之后，调用 <code>g(r)</code> 将返回 <code>(r[2], r[5], r[3])</code></li></ul><details class="hint-container details"><summary>等价实现</summary><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">itemgetter</span><span class="token punctuation">(</span><span class="token operator">*</span>items<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        item <span class="token operator">=</span> items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">)</span>
    <span class="token keyword">return</span> g
</code></pre></div></details><h3 id="23-方法调用器" tabindex="-1"><a class="header-anchor" href="#23-方法调用器"><span>2.3 方法调用器</span></a></h3><table><thead><tr><th style="text-align:center;">语法</th></tr></thead><tbody><tr><td style="text-align:center;"><code>operator.methodcaller(name, /, *args, **kwargs)</code></td></tr></tbody></table><p>返回一个在操作数上调用 <code>name</code> 方法的可调用对象。如果给出额外的参数和/或关键字参数，它们也将被传给该方法。例如：</p><ul><li>在 <code>f = methodcaller(&#39;name&#39;)</code> 之后，调用 <code>f(b)</code> 将返回 <code>b.name()</code></li><li>在 <code>f = methodcaller(&#39;name&#39;, &#39;foo&#39;, bar=1)</code> 之后，调用 <code>f(b)</code> 将返回 <code>b.name(&#39;foo&#39;, bar=1)</code></li></ul><details class="hint-container details"><summary>等价实现</summary><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">methodcaller</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">caller</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
    <span class="token keyword">return</span> caller
</code></pre></div></details>`,35);function g(f,b){const e=o("router-link");return d(),c("div",null,[p,t("nav",y,[t("ul",null,[t("li",null,[a(e,{to:"#1-标准运算符代替"},{default:n(()=>[l("1. 标准运算符代替")]),_:1}),t("ul",null,[t("li",null,[a(e,{to:"#11-比较运算符"},{default:n(()=>[l("1.1 比较运算符")]),_:1})]),t("li",null,[a(e,{to:"#12-逻辑运算符"},{default:n(()=>[l("1.2 逻辑运算符")]),_:1})]),t("li",null,[a(e,{to:"#13-算术运算符"},{default:n(()=>[l("1.3 算术运算符")]),_:1})]),t("li",null,[a(e,{to:"#14-序列操作"},{default:n(()=>[l("1.4 序列操作")]),_:1})]),t("li",null,[a(e,{to:"#15-原地运算符"},{default:n(()=>[l("1.5 原地运算符")]),_:1})]),t("li",null,[a(e,{to:"#16-可调用对象"},{default:n(()=>[l("1.6 可调用对象")]),_:1})])])]),t("li",null,[a(e,{to:"#2-函数式编程工具"},{default:n(()=>[l("2. 函数式编程工具")]),_:1}),t("ul",null,[t("li",null,[a(e,{to:"#21-属性获取器"},{default:n(()=>[l("2.1 属性获取器")]),_:1})]),t("li",null,[a(e,{to:"#22-成员获取器"},{default:n(()=>[l("2.2 成员获取器")]),_:1})]),t("li",null,[a(e,{to:"#23-方法调用器"},{default:n(()=>[l("2.3 方法调用器")]),_:1})])])])])]),u])}const k=s(i,[["render",g],["__file","operator.html.vue"]]),m=JSON.parse('{"path":"/posts/python/basic/stdlib/operator.html","title":"operator - 标准运算符代替","lang":"zh-CN","frontmatter":{"description":"operator - 标准运算符代替 1. 标准运算符代替 标准库 operator 中包含一系列函数，用于在一些场景下代替标准运算符操作。 魔术方法 许多方法都有对应的魔术方法。因此，许多函数也提供了后向兼容的双下划线版本，在下表中带有星号的方法都有其双下划线版本。如果函数名已经有下划线结尾，那么结尾还是双下划线，此下划线只是为了和关键字区分。 不建...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/posts/python/basic/stdlib/operator.html"}],["meta",{"property":"og:site_name","content":"鸭梨"}],["meta",{"property":"og:title","content":"operator - 标准运算符代替"}],["meta",{"property":"og:description","content":"operator - 标准运算符代替 1. 标准运算符代替 标准库 operator 中包含一系列函数，用于在一些场景下代替标准运算符操作。 魔术方法 许多方法都有对应的魔术方法。因此，许多函数也提供了后向兼容的双下划线版本，在下表中带有星号的方法都有其双下划线版本。如果函数名已经有下划线结尾，那么结尾还是双下划线，此下划线只是为了和关键字区分。 不建..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T04:16:18.000Z"}],["meta",{"property":"article:author","content":"Alex Sun"}],["meta",{"property":"article:modified_time","content":"2024-05-27T04:16:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"operator - 标准运算符代替\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-27T04:16:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alex Sun\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. 标准运算符代替","slug":"1-标准运算符代替","link":"#1-标准运算符代替","children":[{"level":3,"title":"1.1 比较运算符","slug":"11-比较运算符","link":"#11-比较运算符","children":[]},{"level":3,"title":"1.2 逻辑运算符","slug":"12-逻辑运算符","link":"#12-逻辑运算符","children":[]},{"level":3,"title":"1.3 算术运算符","slug":"13-算术运算符","link":"#13-算术运算符","children":[]},{"level":3,"title":"1.4 序列操作","slug":"14-序列操作","link":"#14-序列操作","children":[]},{"level":3,"title":"1.5 原地运算符","slug":"15-原地运算符","link":"#15-原地运算符","children":[]},{"level":3,"title":"1.6 可调用对象","slug":"16-可调用对象","link":"#16-可调用对象","children":[]}]},{"level":2,"title":"2. 函数式编程工具","slug":"2-函数式编程工具","link":"#2-函数式编程工具","children":[{"level":3,"title":"2.1 属性获取器","slug":"21-属性获取器","link":"#21-属性获取器","children":[]},{"level":3,"title":"2.2 成员获取器","slug":"22-成员获取器","link":"#22-成员获取器","children":[]},{"level":3,"title":"2.3 方法调用器","slug":"23-方法调用器","link":"#23-方法调用器","children":[]}]}],"git":{"createdTime":1716783378000,"updatedTime":1716783378000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":4.2,"words":1259},"filePathRelative":"posts/python/basic/stdlib/operator.md","localizedDate":"2024年5月27日","excerpt":"\\n\\n<h2>1. 标准运算符代替</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>项目</th>\\n<th>信息</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>源代码</td>\\n<td><a href=\\"https://github.com/python/cpython/tree/3.11/Lib/operator.py\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Lib/operator.py</a></td>\\n</tr>\\n<tr>\\n<td>Python 版本</td>\\n<td>全版本</td>\\n</tr>\\n<tr>\\n<td>标签</td>\\n<td>函数式编程</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{k as comp,m as data};

import{f,h as o,o as y,c as m,p as d,v as k,b as t,F as _,u as D,x as v,a as b,e as x}from"./app-mQJDQ8JG.js";import{_ as A}from"./plugin-vue_export-helper-DlAUqK2U.js";const w=f({__name:"IEEE754",setup(l,{expose:i}){i();const r=o(""),e=o(""),p=o(""),h=o(0);function n(u){const s=new ArrayBuffer(4),a=new DataView(s);return a.setFloat32(0,u,!0),a.getUint32(0,!0)}function c(u){const s=new ArrayBuffer(4),a=new DataView(s);return a.setUint32(0,u,!0),a.getFloat32(0,!0)}function B(u,s=32){const a=u.toString(16);return"0".repeat(s/4-a.length)+a}function F(u,s=32){const a=u.toString(2);return"0".repeat(s-a.length)+a}function C(){const u=Number.parseFloat(r.value);if(Number.isNaN(u)){e.value="",p.value="",h.value=0;return}const s=n(u);e.value=F(s),p.value=B(s),h.value=c(s)}const g={text:r,bin:e,hex:p,real:h,float32_to_uint32:n,uint32_to_float32:c,uint_to_hex:B,uint_to_bin:F,text_changed:C};return Object.defineProperty(g,"__isScriptSetup",{enumerable:!1,value:!0}),g}}),E=l=>(D("data-v-f48edfc9"),l=l(),v(),l),I=E(()=>t("label",{for:"input-text"},"输入值",-1)),S=E(()=>t("label",{for:"input-bin"},"二进制表示",-1)),V=E(()=>t("label",{for:"input-hex"},"十六进制表示",-1)),N=E(()=>t("label",{for:"input-real"},"原始值",-1));function T(l,i,r,e,p,h){return y(),m(_,null,[I,d(t("input",{id:"input-text","onUpdate:modelValue":i[0]||(i[0]=n=>e.text=n),autocomplete:"off",placeholder:"输入浮点数",style:{"font-family":"var(--font-family-code)"},type:"text",onInput:e.text_changed},null,544),[[k,e.text]]),S,d(t("input",{id:"input-bin","onUpdate:modelValue":i[1]||(i[1]=n=>e.bin=n),autocomplete:"off",placeholder:"二进制",readonly:"",style:{"font-family":"var(--font-family-code)"},type:"text"},null,512),[[k,e.bin]]),V,d(t("input",{id:"input-hex","onUpdate:modelValue":i[2]||(i[2]=n=>e.hex=n),autocomplete:"off",placeholder:"十六进制",readonly:"",style:{"font-family":"var(--font-family-code)"},type:"text"},null,512),[[k,e.hex]]),N,d(t("input",{id:"input-real","onUpdate:modelValue":i[3]||(i[3]=n=>e.real=n),autocomplete:"off",placeholder:"原始值",readonly:"",style:{"font-family":"var(--font-family-code)"},type:"text"},null,512),[[k,e.real]])],64)}const Z=A(w,[["render",T],["__scopeId","data-v-f48edfc9"],["__file","IEEE754.vue"]]),U=f({__name:"ieee754.html",setup(l,{expose:i}){i();const r={IEEE754:Z};return Object.defineProperty(r,"__isScriptSetup",{enumerable:!1,value:!0}),r}}),P=t("p",null,"IEEE 754 浮点数的交互式演示。",-1),X=t("h2",{id:"1-演示",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#1-演示"},[t("span",null,"1. 演示")])],-1),j=x(`<h2 id="2-原理" tabindex="-1"><a class="header-anchor" href="#2-原理"><span>2. 原理</span></a></h2><div class="hint-container tip"><p class="hint-container-title">解释</p><p>具体显示的结果取决于你的计算机储存方式和浮点数实现，考虑到现代计算机几乎 100% 地采用了 IEEE 754，并使用小端存储数据，所以这可以保证 100% 是正确的。除非你的机器 / JavaScript 实现使用大端存储，这样你看到的结果也是大端的。</p></div><p>使用 ES6 新特性 <code>ArrayBuffer</code> 和 <code>DataView</code> 来读取和设置二进制数组：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 将浮点数转换为 uint32 类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> float32_to_uint32</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">f</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> ArrayBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> view</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> DataView</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  view</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setFloat32</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> view</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getUint32</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可参考 <a href="https://github.com/Sun-ZhenXing/Sun-ZhenXing.github.io/tree/main/src/.vuepress/components/IEEE754.vue" target="_blank" rel="noopener noreferrer">本页组件实现代码</a> 来了解更多。</p><h2 id="3-推荐项目" tabindex="-1"><a class="header-anchor" href="#3-推荐项目"><span>3. 推荐项目</span></a></h2><ol><li><a href="https://github.com/Sun-ZhenXing/IEEE754" target="_blank" rel="noopener noreferrer">我使用 PySide6 构建的 IEEE 754 演示</a>，效果好于当前页面</li><li><a href="https://www.h-schmidt.net/FloatConverter/IEEE754.html" target="_blank" rel="noopener noreferrer">IEEE 754 Converter (JavaScript)</a></li></ol>`,7);function z(l,i,r,e,p,h){return y(),m("div",null,[P,X,b(e.IEEE754),j])}const O=A(U,[["render",z],["__file","ieee754.html.vue"]]),$=JSON.parse('{"path":"/posts/frontend/awesome/ieee754.html","title":"IEEE 754 浮点数交互式演示","lang":"zh-CN","frontmatter":{"title":"IEEE 754 浮点数交互式演示","date":"2022-12-10T00:00:00.000Z","category":["前端","Awesome"],"tag":["前端","IEEE754"],"description":"IEEE 754 浮点数的交互式演示。","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/posts/frontend/awesome/ieee754.html"}],["meta",{"property":"og:site_name","content":"鸭梨"}],["meta",{"property":"og:title","content":"IEEE 754 浮点数交互式演示"}],["meta",{"property":"og:description","content":"IEEE 754 浮点数的交互式演示。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-02T16:16:12.000Z"}],["meta",{"property":"article:author","content":"Alex Sun"}],["meta",{"property":"article:tag","content":"前端"}],["meta",{"property":"article:tag","content":"IEEE754"}],["meta",{"property":"article:published_time","content":"2022-12-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-02T16:16:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IEEE 754 浮点数交互式演示\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-12-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-02T16:16:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alex Sun\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. 演示","slug":"1-演示","link":"#1-演示","children":[]},{"level":2,"title":"2. 原理","slug":"2-原理","link":"#2-原理","children":[]},{"level":2,"title":"3. 推荐项目","slug":"3-推荐项目","link":"#3-推荐项目","children":[]}],"git":{"createdTime":1670644516000,"updatedTime":1709396172000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":6}]},"readingTime":{"minutes":0.87,"words":261},"filePathRelative":"posts/frontend/awesome/ieee754.md","localizedDate":"2022年12月10日","excerpt":"<!-- markdownlint-disable MD033 -->\\n<p>IEEE 754 浮点数的交互式演示。</p>\\n","autoDesc":true}');export{O as comp,$ as data};

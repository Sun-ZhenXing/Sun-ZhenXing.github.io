import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as l,c,b as e,a as n,w as s,e as t,d as o}from"./app-DhX54nll.js";const r={},d=t('<h1 id="aiofiles---异步文件接口" tabindex="-1"><a class="header-anchor" href="#aiofiles---异步文件接口"><span>aiofiles - 异步文件接口</span></a></h1><div class="no-link"><p><a href="https://pypi.python.org/pypi/aiofiles" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/pypi/v/aiofiles.svg" alt="pypi" loading="lazy"></a><br><a href="https://travis-ci.org/Tinche/aiofiles" target="_blank" rel="noopener noreferrer"><img src="https://travis-ci.org/Tinche/aiofiles.svg?branch=master" alt="travis-ci" loading="lazy"></a><br><a href="https://codecov.io/gh/Tinche/aiofiles" target="_blank" rel="noopener noreferrer"><img src="https://codecov.io/gh/Tinche/aiofiles/branch/master/graph/badge.svg" alt="codecov" loading="lazy"></a><br><a href="https://github.com/Tinche/aiofiles" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/pypi/pyversions/aiofiles.svg" alt="aiofiles" loading="lazy"></a></p></div>',2),h={class:"table-of-contents"},u=t(`<h2 id="1-项目简介" tabindex="-1"><a class="header-anchor" href="#1-项目简介"><span>1. 项目简介</span></a></h2><table><thead><tr><th>项目</th><th>信息</th></tr></thead><tbody><tr><td>项目地址</td><td><a href="https://pypi.python.org/pypi/aiofiles" target="_blank" rel="noopener noreferrer">PyPI</a> | <a href="https://github.com/Tinche/aiofiles" target="_blank" rel="noopener noreferrer">GitHub</a></td></tr><tr><td>开源协议</td><td>Apache 2</td></tr><tr><td>Python 版本</td><td>Python 3.6 ~ 3.10</td></tr><tr><td>标签</td><td>asyncio</td></tr></tbody></table><p><code>aiofiles</code> 是一个 Apache 2 许可的第三方库，用 Python 编写，用于在 <code>asyncio</code> 应用程序中处理本地磁盘文件。</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> aiofiles
</code></pre></div><h2 id="2-特点" tabindex="-1"><a class="header-anchor" href="#2-特点"><span>2. 特点</span></a></h2><ul><li>非常接机原生 API</li><li>支持缓冲区协议和非缓冲区协议的二进制文件</li><li>支持 <code>async</code> / <code>await</code>（<a href="http://www.python.org/dev/peps/pep-0492" target="_blank" rel="noopener noreferrer">PEP 492</a>）结构</li><li>支持临时文件</li></ul><p>普通的本地文件 IO 是阻塞的，不能轻易地、可移植地做成异步的。这意味着做文件 IO 可能会干扰 <code>asyncio</code> 应用程序，它不应该阻塞执行线程。<code>aiofiles</code> 通过引入文件的异步版本，支持将操作委托给一个单独的线程池来帮助解决这个问题。</p><h2 id="3-示例" tabindex="-1"><a class="header-anchor" href="#3-示例"><span>3. 示例</span></a></h2><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">with</span> aiofiles<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;filename&#39;</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    contents <span class="token operator">=</span> <span class="token keyword">await</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span>
<span class="token comment"># &#39;My file contents&#39;</span>
</code></pre></div><p>异步迭代也受到支持：</p><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">with</span> aiofiles<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;filename&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">async</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre></div><p>异步接口也支持临时文件：</p><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">with</span> aiofiles<span class="token punctuation">.</span>tempfile<span class="token punctuation">.</span>TemporaryFile<span class="token punctuation">(</span><span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">await</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b&#39;Hello, World!&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>文件是使用 <code>aiofiles.open()</code> 的 coroutine 打开的，它除了兼容内置的 <code>open()</code> 之外，还接受可选的 <code>loop</code> 和 <code>executor</code> 参数。如果没有 <code>loop</code>，将使用默认的 <code>loop</code>，按照设定的 <code>asyncio</code> 策略。如果没有指定 <code>executor</code>，将使用默认的事件循环执行器。</p><p>在成功的情况下，一个异步文件对象被返回，其 API 与普通文件相同，除了以下方法是 Coroutines 并委托给一个执行器。</p><ul><li><code>close()</code></li><li><code>flush()</code></li><li><code>isatty()</code></li><li><code>read()</code></li><li><code>readall()</code></li><li><code>read1()</code></li><li><code>readinto()</code></li><li><code>readline()</code></li><li><code>readlines()</code></li><li><code>seek()</code></li><li><code>seekable()</code></li><li><code>tell()</code></li><li><code>truncate()</code></li><li><code>writable()</code></li><li><code>write()</code></li><li><code>writelines()</code></li></ul><p><code>aiofiles.os</code> 模块包含几个处理文件的有用的 <code>os</code> 函数的执行器启用的 Coroutine 版本。</p><ul><li><code>stat()</code></li><li><code>sendfile()</code></li><li><code>rename()</code></li><li><code>renames()</code></li><li><code>replace()</code></li><li><code>remove()</code></li><li><code>unlink()</code></li><li><code>mkdir()</code></li><li><code>makedirs()</code></li><li><code>rmdir()</code></li><li><code>removedirs()</code></li><li><code>link()</code></li><li><code>symlink()</code></li><li><code>readlink()</code></li><li><code>path.exists()</code></li><li><code>path.isfile()</code></li><li><code>path.isdir()</code></li><li><code>path.islink()</code></li><li><code>path.getsize()</code></li><li><code>path.getatime()</code></li><li><code>path.getctime()</code></li><li><code>path.samefile()</code></li><li><code>path.sameopenfile()</code></li></ul><h2 id="4-临时文件支持" tabindex="-1"><a class="header-anchor" href="#4-临时文件支持"><span>4. 临时文件支持</span></a></h2><p><code>aiofiles.tempfile</code> 实现了下列接口：</p><ul><li><code>TemporaryFile</code></li><li><code>NamedTemporaryFile</code></li><li><code>SpooledTemporaryFile</code></li><li><code>TemporaryDirectory</code></li></ul><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">with</span> aiofiles<span class="token punctuation">.</span>tempfile<span class="token punctuation">.</span>NamedTemporaryFile<span class="token punctuation">(</span><span class="token string">&#39;wb+&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">await</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b&#39;Line1\\n Line2&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">async</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">with</span> aiofiles<span class="token punctuation">.</span>tempfile<span class="token punctuation">.</span>TemporaryDirectory<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> d<span class="token punctuation">:</span>
    filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token string">&quot;file.ext&quot;</span><span class="token punctuation">)</span>
</code></pre></div>`,22);function k(y,g){const a=p("router-link");return l(),c("div",null,[d,e("nav",h,[e("ul",null,[e("li",null,[n(a,{to:"#1-项目简介"},{default:s(()=>[o("1. 项目简介")]),_:1})]),e("li",null,[n(a,{to:"#2-特点"},{default:s(()=>[o("2. 特点")]),_:1})]),e("li",null,[n(a,{to:"#3-示例"},{default:s(()=>[o("3. 示例")]),_:1})]),e("li",null,[n(a,{to:"#4-临时文件支持"},{default:s(()=>[o("4. 临时文件支持")]),_:1})])])]),u])}const v=i(r,[["render",k],["__file","aiofiles.html.vue"]]),b=JSON.parse('{"path":"/posts/python/packages/async/aiofiles.html","title":"aiofiles - 异步文件接口","lang":"zh-CN","frontmatter":{"description":"aiofiles - 异步文件接口 pypi travis-ci codecov aiofiles 1. 项目简介 aiofiles 是一个 Apache 2 许可的第三方库，用 Python 编写，用于在 asyncio 应用程序中处理本地磁盘文件。 2. 特点 非常接机原生 API 支持缓冲区协议和非缓冲区协议的二进制文件 支持 async / a...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/posts/python/packages/async/aiofiles.html"}],["meta",{"property":"og:site_name","content":"鸭梨"}],["meta",{"property":"og:title","content":"aiofiles - 异步文件接口"}],["meta",{"property":"og:description","content":"aiofiles - 异步文件接口 pypi travis-ci codecov aiofiles 1. 项目简介 aiofiles 是一个 Apache 2 许可的第三方库，用 Python 编写，用于在 asyncio 应用程序中处理本地磁盘文件。 2. 特点 非常接机原生 API 支持缓冲区协议和非缓冲区协议的二进制文件 支持 async / a..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img.shields.io/pypi/v/aiofiles.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T04:16:18.000Z"}],["meta",{"property":"article:author","content":"Alex Sun"}],["meta",{"property":"article:modified_time","content":"2024-05-27T04:16:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"aiofiles - 异步文件接口\\",\\"image\\":[\\"https://img.shields.io/pypi/v/aiofiles.svg\\",\\"https://travis-ci.org/Tinche/aiofiles.svg?branch=master\\",\\"https://codecov.io/gh/Tinche/aiofiles/branch/master/graph/badge.svg\\",\\"https://img.shields.io/pypi/pyversions/aiofiles.svg\\"],\\"dateModified\\":\\"2024-05-27T04:16:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alex Sun\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. 项目简介","slug":"1-项目简介","link":"#1-项目简介","children":[]},{"level":2,"title":"2. 特点","slug":"2-特点","link":"#2-特点","children":[]},{"level":2,"title":"3. 示例","slug":"3-示例","link":"#3-示例","children":[]},{"level":2,"title":"4. 临时文件支持","slug":"4-临时文件支持","link":"#4-临时文件支持","children":[]}],"git":{"createdTime":1716783378000,"updatedTime":1716783378000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":1.84,"words":552},"filePathRelative":"posts/python/packages/async/aiofiles.md","localizedDate":"2024年5月27日","excerpt":"\\n<!-- markdownlint-disable MD033 -->\\n<div class=\\"no-link\\">\\n<p><a href=\\"https://pypi.python.org/pypi/aiofiles\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><img src=\\"https://img.shields.io/pypi/v/aiofiles.svg\\" alt=\\"pypi\\" loading=\\"lazy\\"></a><br>\\n<a href=\\"https://travis-ci.org/Tinche/aiofiles\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><img src=\\"https://travis-ci.org/Tinche/aiofiles.svg?branch=master\\" alt=\\"travis-ci\\" loading=\\"lazy\\"></a><br>\\n<a href=\\"https://codecov.io/gh/Tinche/aiofiles\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><img src=\\"https://codecov.io/gh/Tinche/aiofiles/branch/master/graph/badge.svg\\" alt=\\"codecov\\" loading=\\"lazy\\"></a><br>\\n<a href=\\"https://github.com/Tinche/aiofiles\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><img src=\\"https://img.shields.io/pypi/pyversions/aiofiles.svg\\" alt=\\"aiofiles\\" loading=\\"lazy\\"></a></p>\\n</div>","autoDesc":true}');export{v as comp,b as data};

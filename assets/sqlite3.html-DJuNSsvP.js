import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as l,c as u,b as n,a as s,w as t,d as a,e as d}from"./app-DhX54nll.js";const i={},k=n("h1",{id:"sqlite3---sqlite-数据库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sqlite3---sqlite-数据库"},[n("span",null,"sqlite3 - SQLite 数据库")])],-1),r={class:"hint-container warning"},g=n("p",{class:"hint-container-title"},"注意",-1),m=n("p",null,"需要补充的内容：",-1),E=n("ul",null,[n("li",null,"如何编写自动类型适配"),n("li",null,"更多示例代码，特别是 How-to")],-1),q={class:"table-of-contents"},y=d(`<h2 id="1-sqlite-介绍" tabindex="-1"><a class="header-anchor" href="#1-sqlite-介绍"><span>1. SQLite 介绍</span></a></h2><table><thead><tr><th>项目</th><th>信息</th></tr></thead><tbody><tr><td>源代码</td><td><a href="https://github.com/python/cpython/tree/3.11/Lib/sqlite3/" target="_blank" rel="noopener noreferrer">Lib/sqlite3/</a></td></tr><tr><td>Python 版本</td><td>全版本</td></tr><tr><td>标签</td><td>文件和目录</td></tr></tbody></table><p>SQLite 是一个 C 语言库，它可以提供一种轻量级的基于磁盘的数据库，这种数据库不需要独立的服务器进程，也允许需要使用一种非标准的 SQL 查询语言来访问它。一些应用程序可以使用 SQLite 作为内部数据存储。可以用它来创建一个应用程序原型，然后再迁移到更大的数据库，比如 PostgreSQL 或 Oracle。</p><p>使用 <code>sqlite3.connect()</code> 函数连接数据库，返回一个 <code>Connection</code> 对象，我们就是通过这个对象与数据库进行交互。</p><p>数据库文件的格式是 <code>filename.db</code>，如果该数据库文件不存在，那么它会被自动创建。该数据库文件是放在电脑硬盘里的，你可以自定义路径，后续操作产生的所有数据都会保存在该文件中。SQLite 还支持内存数据库，不创建任何文件进行处理数据，速度更快。</p><h2 id="2-创建和使用数据库" tabindex="-1"><a class="header-anchor" href="#2-创建和使用数据库"><span>2. 创建和使用数据库</span></a></h2><p>导入并创建连接：</p><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> sqlite3

conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">&#39;test.db&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>如果不需要保存在本地，在内存中创建数据，使用 <code>:memory:</code> 即可：</p><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code>conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">&#39;:memory:&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>建立与数据库的连接后，需要创建一个游标对象，该对象的 <code>execute()</code> 方法可以执行 SQL 命令，让我们能够进行数据操作。</p><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 创建一个游标 cursor</span>
cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 创建表</span>
cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">&#39;&#39;&#39;CREATE TABLE stocks
               (date text, trans text, symbol text, qty real, price real)&#39;&#39;&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 插入一行数据</span>
cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;INSERT INTO stocks VALUES (&#39;2006-01-05&#39;,&#39;BUY&#39;,&#39;RHAT&#39;,100,35.14)&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 提交数据</span>
con<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 关闭连接</span>
con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>使用迭代器获取数据：</p><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">for</span> row <span class="token keyword">in</span> cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&#39;SELECT * FROM stocks ORDER BY price&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>
</code></pre></div><h2 id="3-sqlite3-语法" tabindex="-1"><a class="header-anchor" href="#3-sqlite3-语法"><span>3. SQLite3 语法</span></a></h2><p>所有的 SQLite 语句可以以任何关键字开始，如 <code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>ALTER、DROP</code> 等，所有的语句以分号 <code>;</code> 结束。</p><p>SQLite <code>ANALYZE</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ANALYZE</span><span class="token punctuation">;</span>
<span class="token comment">-- 或者</span>
<span class="token keyword">ANALYZE</span> database_name<span class="token punctuation">;</span>
<span class="token comment">-- 或者</span>
<span class="token keyword">ANALYZE</span> database_name<span class="token punctuation">.</span>table_name<span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>AND / OR</code> 子句：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>columnN
<span class="token keyword">FROM</span>   table_name
<span class="token keyword">WHERE</span>  CONDITION<span class="token operator">-</span><span class="token number">1</span> {<span class="token operator">AND</span><span class="token operator">|</span><span class="token operator">OR</span>} CONDITION<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>ALTER TABLE</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> column_def<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>ALTER TABLE</code> 语句（Rename）：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> new_table_name<span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>ATTACH DATABASE</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code>ATTACH <span class="token keyword">DATABASE</span> <span class="token string">&#39;DatabaseName&#39;</span> <span class="token keyword">As</span> <span class="token string">&#39;Alias-Name&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>BEGIN TRANSACTION</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>
<span class="token comment">-- 或者</span>
<span class="token keyword">BEGIN</span> EXCLUSIVE <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>BETWEEN</code> 子句：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>columnN
<span class="token keyword">FROM</span>   table_name
<span class="token keyword">WHERE</span>  column_name <span class="token operator">BETWEEN</span> val<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">AND</span> val<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>COMMIT</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>CREATE INDEX</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> index_name
<span class="token keyword">ON</span> table_name <span class="token punctuation">(</span> column_name <span class="token keyword">COLLATE</span> NOCASE <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>CREATE UNIQUE INDEX</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> index_name
<span class="token keyword">ON</span> table_name <span class="token punctuation">(</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>columnN<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>CREATE TABLE</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_name<span class="token punctuation">(</span>
   column1 datatype<span class="token punctuation">,</span>
   column2 datatype<span class="token punctuation">,</span>
   column3 datatype<span class="token punctuation">,</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   columnN datatype<span class="token punctuation">,</span>
   <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span> one <span class="token operator">or</span> more <span class="token keyword">columns</span> <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>CREATE TRIGGER</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> database_name<span class="token punctuation">.</span>trigger_name
BEFORE <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> table_name <span class="token keyword">FOR EACH ROW</span>
<span class="token keyword">BEGIN</span>
   stmt1<span class="token punctuation">;</span>
   stmt2<span class="token punctuation">;</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">END</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>CREATE VIEW</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> database_name<span class="token punctuation">.</span>view_name  <span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> statement<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>CREATE VIRTUAL TABLE</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> VIRTUAL <span class="token keyword">TABLE</span> database_name<span class="token punctuation">.</span>table_name <span class="token keyword">USING</span> weblog<span class="token punctuation">(</span> access<span class="token punctuation">.</span>log <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 或者</span>
<span class="token keyword">CREATE</span> VIRTUAL <span class="token keyword">TABLE</span> database_name<span class="token punctuation">.</span>table_name <span class="token keyword">USING</span> fts3<span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>COMMIT TRANSACTION</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>COUNT</code> 子句：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>
<span class="token keyword">FROM</span>   table_name
<span class="token keyword">WHERE</span>  CONDITION<span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>DELETE</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span>  {CONDITION}<span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>DETACH DATABASE</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code>DETACH <span class="token keyword">DATABASE</span> <span class="token string">&#39;Alias-Name&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>DISTINCT</code> 子句：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>columnN
<span class="token keyword">FROM</span>   table_name<span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>DROP INDEX</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> database_name<span class="token punctuation">.</span>index_name<span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>DROP TABLE</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> database_name<span class="token punctuation">.</span>table_name<span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>DROP VIEW</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> view_name<span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>DROP TRIGGER</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TRIGGER</span> trigger_name
</code></pre></div><p>SQLite <code>EXISTS</code> 子句：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>columnN
<span class="token keyword">FROM</span>   table_name
<span class="token keyword">WHERE</span>  column_name <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span>   table_name <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>EXPLAIN</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">INSERT</span> statement<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token comment">-- 或者</span>
<span class="token keyword">EXPLAIN</span> QUERY <span class="token keyword">PLAN</span> <span class="token keyword">SELECT</span> statement<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>GLOB</code> 子句：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>columnN
<span class="token keyword">FROM</span>   table_name
<span class="token keyword">WHERE</span>  column_name GLOB { PATTERN }<span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>GROUP BY</code> 子句：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>
<span class="token keyword">FROM</span>   table_name
<span class="token keyword">WHERE</span>  CONDITION
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> column_name<span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>HAVING</code> 子句：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>
<span class="token keyword">FROM</span>   table_name
<span class="token keyword">WHERE</span>  CONDITION
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> column_name
<span class="token keyword">HAVING</span> <span class="token punctuation">(</span>arithematic <span class="token keyword">function</span> condition<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>INSERT INTO</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name<span class="token punctuation">(</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>columnN<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span> value1<span class="token punctuation">,</span> value2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>valueN<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>IN</code> 子句：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>columnN
<span class="token keyword">FROM</span>   table_name
<span class="token keyword">WHERE</span>  column_name <span class="token operator">IN</span> <span class="token punctuation">(</span>val<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> val<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>val<span class="token operator">-</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>Like</code> 子句：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>columnN
<span class="token keyword">FROM</span>   table_name
<span class="token keyword">WHERE</span>  column_name <span class="token operator">LIKE</span> { PATTERN }<span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>NOT IN</code> 子句：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>columnN
<span class="token keyword">FROM</span>   table_name
<span class="token keyword">WHERE</span>  column_name <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span>val<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> val<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>val<span class="token operator">-</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>ORDER BY</code> 子句：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>columnN
<span class="token keyword">FROM</span>   table_name
<span class="token keyword">WHERE</span>  CONDITION
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column_name {<span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span>}<span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>PRAGMA</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code>PRAGMA pragma_name<span class="token punctuation">;</span>

<span class="token comment">-- For example:</span>

PRAGMA page_size<span class="token punctuation">;</span>
PRAGMA cache_size <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>
PRAGMA table_info<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>RELEASE SAVEPOINT</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">RELEASE</span> savepoint_name<span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>REINDEX</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code>REINDEX collation_name<span class="token punctuation">;</span>
REINDEX database_name<span class="token punctuation">.</span>index_name<span class="token punctuation">;</span>
REINDEX database_name<span class="token punctuation">.</span>table_name<span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>ROLLBACK</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span>
<span class="token comment">-- 或者</span>
<span class="token keyword">ROLLBACK</span> <span class="token keyword">TO</span> <span class="token keyword">SAVEPOINT</span> savepoint_name<span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>SAVEPOINT</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SAVEPOINT</span> savepoint_name<span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>SELECT</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>columnN
<span class="token keyword">FROM</span>   table_name<span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>UPDATE</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> table_name
<span class="token keyword">SET</span> column1 <span class="token operator">=</span> value1<span class="token punctuation">,</span> column2 <span class="token operator">=</span> value2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>columnN<span class="token operator">=</span>valueN
<span class="token punctuation">[</span> <span class="token keyword">WHERE</span>  CONDITION <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>VACUUM</code> 语法：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code>VACUUM<span class="token punctuation">;</span>
</code></pre></div><p>SQLite <code>WHERE</code> 子句：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>columnN
<span class="token keyword">FROM</span>   table_name
<span class="token keyword">WHERE</span>  CONDITION<span class="token punctuation">;</span>
</code></pre></div>`,100);function w(L,T){const o=p("Badge"),e=p("router-link");return l(),u("div",null,[k,n("div",r,[g,n("p",null,[s(o,{type:"danger",vertical:"inherit"},{default:t(()=>[a("TODO")]),_:1}),a(" 本文未列出参考源，也未给出示例。教程部分没有写完整。")]),m,E]),n("nav",q,[n("ul",null,[n("li",null,[s(e,{to:"#1-sqlite-介绍"},{default:t(()=>[a("1. SQLite 介绍")]),_:1})]),n("li",null,[s(e,{to:"#2-创建和使用数据库"},{default:t(()=>[a("2. 创建和使用数据库")]),_:1})]),n("li",null,[s(e,{to:"#3-sqlite3-语法"},{default:t(()=>[a("3. SQLite3 语法")]),_:1})])])]),y])}const A=c(i,[["render",w],["__file","sqlite3.html.vue"]]),N=JSON.parse('{"path":"/posts/python/basic/stdlib/sqlite3.html","title":"sqlite3 - SQLite 数据库","lang":"zh-CN","frontmatter":{"description":"sqlite3 - SQLite 数据库 注意 本文未列出参考源，也未给出示例。教程部分没有写完整。 需要补充的内容： 如何编写自动类型适配 更多示例代码，特别是 How-to 1. SQLite 介绍 SQLite 是一个 C 语言库，它可以提供一种轻量级的基于磁盘的数据库，这种数据库不需要独立的服务器进程，也允许需要使用一种非标准的 SQL 查询语...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/posts/python/basic/stdlib/sqlite3.html"}],["meta",{"property":"og:site_name","content":"鸭梨"}],["meta",{"property":"og:title","content":"sqlite3 - SQLite 数据库"}],["meta",{"property":"og:description","content":"sqlite3 - SQLite 数据库 注意 本文未列出参考源，也未给出示例。教程部分没有写完整。 需要补充的内容： 如何编写自动类型适配 更多示例代码，特别是 How-to 1. SQLite 介绍 SQLite 是一个 C 语言库，它可以提供一种轻量级的基于磁盘的数据库，这种数据库不需要独立的服务器进程，也允许需要使用一种非标准的 SQL 查询语..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T04:16:18.000Z"}],["meta",{"property":"article:author","content":"Alex Sun"}],["meta",{"property":"article:modified_time","content":"2024-05-27T04:16:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"sqlite3 - SQLite 数据库\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-27T04:16:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alex Sun\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. SQLite 介绍","slug":"1-sqlite-介绍","link":"#1-sqlite-介绍","children":[]},{"level":2,"title":"2. 创建和使用数据库","slug":"2-创建和使用数据库","link":"#2-创建和使用数据库","children":[]},{"level":2,"title":"3. SQLite3 语法","slug":"3-sqlite3-语法","link":"#3-sqlite3-语法","children":[]}],"git":{"createdTime":1716783378000,"updatedTime":1716783378000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":3.7,"words":1110},"filePathRelative":"posts/python/basic/stdlib/sqlite3.md","localizedDate":"2024年5月27日","excerpt":"\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p> 本文未列出参考源，也未给出示例。教程部分没有写完整。</p>\\n<p>需要补充的内容：</p>\\n<ul>\\n<li>如何编写自动类型适配</li>\\n<li>更多示例代码，特别是 How-to</li>\\n</ul>\\n</div>\\n\\n<h2>1. SQLite 介绍</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>项目</th>\\n<th>信息</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>源代码</td>\\n<td><a href=\\"https://github.com/python/cpython/tree/3.11/Lib/sqlite3/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Lib/sqlite3/</a></td>\\n</tr>\\n<tr>\\n<td>Python 版本</td>\\n<td>全版本</td>\\n</tr>\\n<tr>\\n<td>标签</td>\\n<td>文件和目录</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{A as comp,N as data};

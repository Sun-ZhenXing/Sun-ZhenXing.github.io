import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as d,c as r,b as s,a,w as n,d as i,e as h}from"./app-mQJDQ8JG.js";const c={},B=s("h1",{id:"在微服务中使用-cython-安全地构建镜像",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#在微服务中使用-cython-安全地构建镜像"},[s("span",null,"在微服务中使用 Cython 安全地构建镜像")])],-1),y={class:"table-of-contents"},g=h(`<h2 id="1-python-部署服务的问题" tabindex="-1"><a class="header-anchor" href="#1-python-部署服务的问题"><span>1. Python 部署服务的问题</span></a></h2><p>微服务变得越来越流行。我们常常使用如下的 <code>Dockerfile</code> 来构建 Python 服务的镜像：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> python:3.10-slim-bookworm</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> . ./</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> PYPI_MIRROR_URL=https://pypi.org/simple</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> pip -V \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &amp;&amp; python -m pip install -i \${PYPI_MIRROR_URL} --upgrade pip \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &amp;&amp; pip config set global.index-url \${PYPI_MIRROR_URL} \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &amp;&amp; pip install -r requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> 8081</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;python&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;server.py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次我们都从项目中复制源代码，然后安装依赖。对于任何应用，直接使用源代码发布到生产环境不安全，容易在部署中泄漏重要信息。</p><p>而且原始的 Python 代码执行比较低效，需要从头开始解释执行。Python 会在第一次执行项目时，将包内的代码编译为字节码（<code>.pyc</code> 文件），这样可以提高 Python 运行的效率。同样我们也可以直接发布字节码文件，但是我们使用字节码发布同样不安全（字节码可以轻易逆向为源代码）。</p><p>下面我们将介绍 Cython，它可以帮助我们解决这些问题。</p><h2 id="2-使用-cython-构建镜像" tabindex="-1"><a class="header-anchor" href="#2-使用-cython-构建镜像"><span>2. 使用 Cython 构建镜像</span></a></h2><h3 id="21-cython-简介" tabindex="-1"><a class="header-anchor" href="#21-cython-简介"><span>2.1 Cython 简介</span></a></h3><p>Cython 通过将 Python 代码翻译为 C/C++ 代码，然后编译为原生的机器码，从而提高了 Python 代码的执行效率，并同时保护了源代码。</p><p>Cython 构建产物为动态链接库（共享库）文件，在 Linux/Unix 系统中为 <code>.so</code> 文件，在 Windows 系统中为 <code>.pyd</code> 文件，其命名为 <code>package_name.python_version-platform_info.so</code>。</p><p>Python 解释器能够识别出这些文件，并可以像标准的 <code>.py</code> 文件或者 <code>.pyc</code> 文件一样加载它们，如 <code>import package_name</code> 是有效的。当这些共享库和包名同名的 Python 文件同时存在时，Python 解释器会优先加载共享库文件。</p><blockquote><p><code>.py</code> 文件和环境相关性最小。而 <code>.pyc</code> 没有平台依赖，但是有 Python 版本依赖，通过 <code>.pyc</code> 能够反射出源代码。共享库文件是原生的机器代码，有平台依赖，同时也有 Python 版本依赖，但是它们不能反射出源代码。</p></blockquote><p>使用 Cython 之前，你需要检查你的项目是否满足要求：</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 项目正确配置了 <code>setup.py</code> 文件</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 每个包所在的文件夹存在 <code>__init__.py</code> 文件，否则无法被识别为包，生成的目标文件夹内不生成对应文件</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 计算机中安装了正确的编译器，如 GCC、Clang 或 MSVC 等</label></li></ul><p>首先，我们安装 Cython：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -U</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> cython</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="22-编译示例" tabindex="-1"><a class="header-anchor" href="#22-编译示例"><span>2.2 编译示例</span></a></h3><p>假设我们有一个后端服务项目结构如下：</p><ul><li><code>resources/</code>：项目用到的资源文件</li><li><code>demo_server/</code><ul><li><code>models/</code><ul><li><code>__init__.py</code></li><li><code>xxx.py</code></li></ul></li><li><code>services/</code><ul><li><code>__init__.py</code></li><li><code>xxx.py</code></li></ul></li><li><code>utils/</code><ul><li><code>__init__.py</code></li><li><code>xxx.py</code></li></ul></li><li><code>__init__.py</code></li><li><code>core.py</code></li></ul></li><li><code>server.py</code>：主入口文件</li><li><code>setup.py</code>：包配置文件</li><li><code>requirements.txt</code>：依赖文件</li></ul><p>首先，我们需要一个 <code>setup.py</code> 文件，用于配置编译选项：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> distutils.core </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> setup</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> Cython.Build </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> cythonize</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">setup</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;demo_server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    ext_modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">cythonize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">            &quot;server.py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">            &quot;demo_server/**/*.py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        ],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        compiler_directives</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;language_level&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处我们指定了 Python 版本为 3，然后指定了 Cython 需要编译的目录和文件。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> setup.py</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> build_ext</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> lib</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>-b</code> 选项将指定生成目标文件的路径，此处指定为 <code>lib/</code> 文件夹。</p><p>构建完成后，<code>lib/</code>，文件夹将生成与项目一致的目录结构，但是其中的 <code>.py</code> 文件都被编译为了 <code>.so</code> 或 <code>.pyd</code> 文件。这一过程将生成大量 <code>.c</code> 文件，如果不需要可以删除。</p><h3 id="23-dockerfile-示例" tabindex="-1"><a class="header-anchor" href="#23-dockerfile-示例"><span>2.3 Dockerfile 示例</span></a></h3><p>现在我们提供一个新的 <code>Dockerfile</code>，用于完成以上构建步骤。注意 Cython 构建时不需要安装其他 <code>requirements.txt</code> 中的依赖。</p><p>我们可以使用 Dockerfile 的多阶段构建来完成这一过程，使用包含标准编译器的镜像构建，然后使用更轻的镜像来发布。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> python:3.10.13-bookworm </span><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> builder</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">ARG</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> PYPI_MIRROR_URL=https://pypi.org/simple</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> . ./</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> pip -V \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &amp;&amp; python -m pip install -i \${PYPI_MIRROR_URL} --upgrade pip \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &amp;&amp; pip config set global.index-url \${PYPI_MIRROR_URL} \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &amp;&amp; pip install Cython \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &amp;&amp; python setup.py build_ext -b lib \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &amp;&amp; cp -rf requirements.txt lib/ \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &amp;&amp; cp -rf resources/ lib/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> python:3.10.13-slim-bookworm</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> --from=builder /app/lib /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> pip -V \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &amp;&amp; python -m pip install -i \${PYPI_MIRROR_URL} --upgrade pip \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &amp;&amp; pip config set global.index-url \${PYPI_MIRROR_URL} \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &amp;&amp; pip install -r requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> 8081</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;python&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;server.py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果直接复制上述 <code>Dockerfile</code>，别忘了加上 <code>.dockerignore</code> 文件，忽略掉各种我们不需要的文件：</p><details class="hint-container details"><summary>dockerignore</summary><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># git</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">.git</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">.gitignore</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Environments</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">.env</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">.venv</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">env/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">venv/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">ENV/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">env.bak/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">venv.bak/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Byte-compiled / optimized / DLL files</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">__pycache__/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">*.py[cod]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">*$py.class</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># C extensions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">*.so</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Distribution / packaging</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">.Python</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">build/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">develop-eggs/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">dist/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">downloads/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">eggs/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">.eggs/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">lib/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">lib64/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">parts/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">sdist/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">var/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">wheels/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">share/python-wheels/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">*.egg-info/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">.installed.cfg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">*.egg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">MANIFEST</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># PyInstaller</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#  Usually these files are written by a python script from a template</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#  before PyInstaller builds the exe, so as to inject date/other infos into it.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">*.manifest</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">*.spec</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Installer logs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">pip-log.txt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">pip-delete-this-directory.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="3-动态导入和路由发现" tabindex="-1"><a class="header-anchor" href="#3-动态导入和路由发现"><span>3. 动态导入和路由发现</span></a></h2>`,32),o=s("code",null,"importlib",-1),u=h(`<p>我们在构建网络服务时常常使用一些元编程技巧，这常常需要借助运行时反射来实现。如 SpringBoot 中的 <code>@ComponentScan</code> 能够自动扫描并加载所有的 <code>@Component</code> 注解的类，然后将它们注册到 IoC 容器中。</p><p>通常静态构建后会损失一些元信息，如果有特定模块或库依赖这些元信息运行则会导致一些问题。</p><p>在 Python 中，我们常常使用自定义装饰器来完成相应的功能。例如，在 <a href="https://sanic.dev/" target="_blank" rel="noopener noreferrer">Sanic</a> 中我们可以使用 <a href="https://sanic.dev/en/guide/how-to/autodiscovery.html" target="_blank" rel="noopener noreferrer">自动路由发现</a> 来自动注册路由，从而无需编写引入代码。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> os</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> glob </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> glob</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> importlib </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> util</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> inspect </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> getmembers</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> types </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ModuleType</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> sanic </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> Sanic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> sanic.blueprints </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> Blueprint</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> sanic.log </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> logger</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> autodiscover</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: Sanic, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) -&gt; set[Blueprint]:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;&quot;&quot;自动路由发现，在 App 上自动注册 \`Blueprint\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    Referece: &lt;https://sanic.dev/en/guide/how-to/autodiscovery.html&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    blueprint_set: set[Blueprint] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    imported_set: set[</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> _find_bps</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: ModuleType):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        nonlocal</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> blueprint_set</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _, member </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;"> getmembers</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(module):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> isinstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(member, Blueprint):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                blueprint_set.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(member)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    path </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">removesuffix</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">removesuffix</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;"> glob</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">path</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">/**/*.py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">recursive</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;__pycache__&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            continue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">not</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> imported_set:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            path </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> os.path.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">normpath</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(path).</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;__init__&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)[</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)[</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> name.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            spec </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> util.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">spec_from_file_location</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name, path)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> spec </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">is</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> None</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> or</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> spec.loader </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">is</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                continue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            specmod </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> util.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">module_from_spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(spec)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            imported_set.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(path)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            spec.loader.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">exec_module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(specmod)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">            _find_bps</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(specmod)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> bp </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> blueprint_set:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        app.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">blueprint</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(bp)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        logger.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Auto discover Blueprint: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">!r</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(bp))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> blueprint_set</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码在源代码模式下运行良好，但是编译为链接库后无法运行，因为 <code>importlib.util.spec_from_file_location()</code> 无法识别链接库中的文件。</p><p><code>spec_from_file_location()</code> 有一个参数 <code>loader</code>，如果没有传入，默认情况下将使用 <code>importlib.machinery.SourceFileLoader</code>，它只能加载源代码文件。我们可以自定义一个 <code>loader</code>，用于加载链接库中的文件。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> os</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> glob </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> iglob</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> importlib </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> machinery, util</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> inspect </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> getmembers</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> itertools </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> chain</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> types </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ModuleType</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> sanic </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> Sanic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> sanic.blueprints </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> Blueprint</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> sanic.log </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> logger</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> autodiscover</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: Sanic, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) -&gt; set[Blueprint]:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;&quot;&quot;自动路由发现，在 App 上自动注册 \`Blueprint\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    Referece: &lt;https://sanic.dev/en/guide/how-to/autodiscovery.html&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    blueprint_set: set[Blueprint] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    imported_set: set[</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> _find_bps</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: ModuleType):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        nonlocal</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> blueprint_set</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> _, member </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;"> getmembers</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(module):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> isinstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(member, Blueprint):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                blueprint_set.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(member)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    path </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">removesuffix</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">removesuffix</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;"> chain</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">        *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">            iglob</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">path</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">/**/*.</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">ext</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">recursive</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ext </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;pyc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;pyo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;pyd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;so&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;dylib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    ):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;__pycache__&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            continue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">not</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> imported_set:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            path </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> os.path.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">normpath</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(path).</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;__init__&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)[</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)[</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> name.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            loader </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> None</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">endswith</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;.so&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">or</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">endswith</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;.dylib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">or</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">endswith</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;.pyd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                loader </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> machinery.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">ExtensionFileLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name, path)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            elif</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">endswith</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;.pyc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">or</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">endswith</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;.pyo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                loader </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> machinery.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">SourcelessFileLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name, path)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            elif</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> path.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">endswith</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;.py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                loader </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> machinery.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">SourceFileLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name, path)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> loader </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">is</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                continue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            spec </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> util.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">spec_from_file_location</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name, path, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">loader</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">loader)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> spec </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">is</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> None</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> or</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> spec.loader </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">is</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                continue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            specmod </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> util.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">module_from_spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(spec)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            imported_set.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(path)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            spec.loader.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">exec_module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(specmod)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">            _find_bps</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(specmod)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> bp </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> blueprint_set:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        app.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">blueprint</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(bp)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        logger.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Auto discover Blueprint: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">!r</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(bp))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> blueprint_set</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function A(v,m){const l=e("router-link"),t=e("RouteLink"),p=e("Badge");return d(),r("div",null,[B,s("nav",y,[s("ul",null,[s("li",null,[a(l,{to:"#1-python-部署服务的问题"},{default:n(()=>[i("1. Python 部署服务的问题")]),_:1})]),s("li",null,[a(l,{to:"#2-使用-cython-构建镜像"},{default:n(()=>[i("2. 使用 Cython 构建镜像")]),_:1}),s("ul",null,[s("li",null,[a(l,{to:"#21-cython-简介"},{default:n(()=>[i("2.1 Cython 简介")]),_:1})]),s("li",null,[a(l,{to:"#22-编译示例"},{default:n(()=>[i("2.2 编译示例")]),_:1})]),s("li",null,[a(l,{to:"#23-dockerfile-示例"},{default:n(()=>[i("2.3 Dockerfile 示例")]),_:1})])])]),s("li",null,[a(l,{to:"#3-动态导入和路由发现"},{default:n(()=>[i("3. 动态导入和路由发现")]),_:1})])])]),g,s("p",null,[i("以下内容需要对 Python 的 "),o,i(" 模块有一定的了解，如果你不了解如何动态导入模块，可以参考 "),a(t,{to:"/posts/python/basic/collections/import-python-file-from-path.html"},{default:n(()=>[i("此文章")]),_:1}),i("。")]),u,s("p",null,[i("现在它可以在各种环境下正确地注册路由了，如果你对此感兴趣，可以查看 "),a(p,{type:"danger",vertical:"inherit"},{default:n(()=>[i("TODO")]),_:1}),i(" 示例项目 了解更多。")])])}const b=k(c,[["render",A],["__file","cython-build-image.html.vue"]]),D=JSON.parse('{"path":"/posts/python/awesome/cython-build-image.html","title":"在微服务中使用 Cython 安全地构建镜像","lang":"zh-CN","frontmatter":{"description":"在微服务中使用 Cython 安全地构建镜像 1. Python 部署服务的问题 微服务变得越来越流行。我们常常使用如下的 Dockerfile 来构建 Python 服务的镜像： 每次我们都从项目中复制源代码，然后安装依赖。对于任何应用，直接使用源代码发布到生产环境不安全，容易在部署中泄漏重要信息。 而且原始的 Python 代码执行比较低效，需要从...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/posts/python/awesome/cython-build-image.html"}],["meta",{"property":"og:site_name","content":"鸭梨"}],["meta",{"property":"og:title","content":"在微服务中使用 Cython 安全地构建镜像"}],["meta",{"property":"og:description","content":"在微服务中使用 Cython 安全地构建镜像 1. Python 部署服务的问题 微服务变得越来越流行。我们常常使用如下的 Dockerfile 来构建 Python 服务的镜像： 每次我们都从项目中复制源代码，然后安装依赖。对于任何应用，直接使用源代码发布到生产环境不安全，容易在部署中泄漏重要信息。 而且原始的 Python 代码执行比较低效，需要从..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T04:16:18.000Z"}],["meta",{"property":"article:author","content":"Alex Sun"}],["meta",{"property":"article:modified_time","content":"2024-05-27T04:16:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在微服务中使用 Cython 安全地构建镜像\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-27T04:16:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alex Sun\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. Python 部署服务的问题","slug":"1-python-部署服务的问题","link":"#1-python-部署服务的问题","children":[]},{"level":2,"title":"2. 使用 Cython 构建镜像","slug":"2-使用-cython-构建镜像","link":"#2-使用-cython-构建镜像","children":[{"level":3,"title":"2.1 Cython 简介","slug":"21-cython-简介","link":"#21-cython-简介","children":[]},{"level":3,"title":"2.2 编译示例","slug":"22-编译示例","link":"#22-编译示例","children":[]},{"level":3,"title":"2.3 Dockerfile 示例","slug":"23-dockerfile-示例","link":"#23-dockerfile-示例","children":[]}]},{"level":2,"title":"3. 动态导入和路由发现","slug":"3-动态导入和路由发现","link":"#3-动态导入和路由发现","children":[]}],"git":{"createdTime":1716783378000,"updatedTime":1716783378000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":6.33,"words":1899},"filePathRelative":"posts/python/awesome/cython-build-image.md","localizedDate":"2024年5月27日","excerpt":"\\n\\n<h2>1. Python 部署服务的问题</h2>\\n<p>微服务变得越来越流行。我们常常使用如下的 <code>Dockerfile</code> 来构建 Python 服务的镜像：</p>\\n<div class=\\"language-dockerfile line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"dockerfile\\" data-title=\\"dockerfile\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#61AFEF\\">FROM</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> python:3.10-slim-bookworm</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#61AFEF\\">WORKDIR</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> /app</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#61AFEF\\">COPY</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> . ./</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#61AFEF\\">ENV</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> PYPI_MIRROR_URL=https://pypi.org/simple</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#61AFEF\\">RUN</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> pip -V \\\\</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">    &amp;&amp; python -m pip install -i ${PYPI_MIRROR_URL} --upgrade pip \\\\</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">    &amp;&amp; pip config set global.index-url ${PYPI_MIRROR_URL} \\\\</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">    &amp;&amp; pip install -r requirements.txt</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#61AFEF\\">EXPOSE</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> 8081</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#61AFEF\\">CMD</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> [ </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"python\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"server.py\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> ]</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{b as comp,D as data};

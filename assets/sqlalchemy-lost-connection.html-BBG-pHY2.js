import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as l,b as n,a,w as e,e as i,d as t}from"./app-DhX54nll.js";const u={},r=n("h1",{id:"sqlalchemy-连接池中的连接失效",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sqlalchemy-连接池中的连接失效"},[n("span",null,"SQLAlchemy 连接池中的连接失效")])],-1),d={class:"table-of-contents"},k=i(`<h2 id="1-问题复现" tabindex="-1"><a class="header-anchor" href="#1-问题复现"><span>1. 问题复现</span></a></h2><p>在使用 SQLAlchemy 连接 MySQL 时，如果 MySQL 服务端主动断开连接，那么 SQLAlchemy 会报错。</p><p>查看 MySQL 连接超时时间 <code>wait_timeout</code>，如未进行配置，默认值为 28800，即 8 小时。</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">&#39;%timeout%&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>设置 MySQL 超时时间为 2 秒：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token keyword">global</span> wait_timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
</code></pre></div><p>下面是在使用 <code>asyncio-mqtt</code> 时出现的问题，如果取消注释 <code>await asyncio.sleep(3)</code>，连接将被闲置 3 秒，此时 MySQL 已经断开连接，再次发送请求时，就会报错。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> sys

<span class="token keyword">import</span> asyncio_mqtt <span class="token keyword">as</span> aiomqtt
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>asyncio <span class="token keyword">import</span> async_sessionmaker<span class="token punctuation">,</span> create_async_engine

<span class="token keyword">import</span> config
<span class="token keyword">from</span> src<span class="token punctuation">.</span>services<span class="token punctuation">.</span>save_data <span class="token keyword">import</span> select_strategy

<span class="token keyword">if</span> sys<span class="token punctuation">.</span>platform <span class="token operator">==</span> <span class="token string">&#39;win32&#39;</span><span class="token punctuation">:</span>
    asyncio<span class="token punctuation">.</span>set_event_loop_policy<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>WindowsSelectorEventLoopPolicy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">import</span> uvloop
    asyncio<span class="token punctuation">.</span>set_event_loop_policy<span class="token punctuation">(</span>uvloop<span class="token punctuation">.</span>EventLoopPolicy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

engine <span class="token operator">=</span> create_async_engine<span class="token punctuation">(</span>config<span class="token punctuation">.</span>DB_URL<span class="token punctuation">,</span> echo<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
session <span class="token operator">=</span> async_sessionmaker<span class="token punctuation">(</span>
    engine<span class="token punctuation">,</span>
    expire_on_commit<span class="token operator">=</span><span class="token boolean">False</span>
<span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    reconnect_interval <span class="token operator">=</span> <span class="token number">1.0</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token keyword">async</span> <span class="token keyword">with</span> aiomqtt<span class="token punctuation">.</span>Client<span class="token punctuation">(</span>config<span class="token punctuation">.</span>MQTT_URL<span class="token punctuation">)</span> <span class="token keyword">as</span> client<span class="token punctuation">:</span>
                <span class="token keyword">await</span> client<span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span><span class="token string">&#39;Home/#&#39;</span><span class="token punctuation">)</span>
                <span class="token keyword">async</span> <span class="token keyword">with</span> client<span class="token punctuation">.</span>messages<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> messages<span class="token punctuation">:</span>
                    <span class="token keyword">async</span> <span class="token keyword">for</span> message <span class="token keyword">in</span> messages<span class="token punctuation">:</span>
                        <span class="token keyword">try</span><span class="token punctuation">:</span>
                            msg <span class="token operator">=</span> message<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
                            <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>topic<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token string">&#39;\\t&#39;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span>
                            <span class="token comment"># 这是业务函数入口</span>
                            <span class="token keyword">await</span> select_strategy<span class="token punctuation">(</span>session<span class="token punctuation">,</span> message<span class="token punctuation">.</span>topic<span class="token punctuation">.</span>value<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>
                        <span class="token keyword">except</span> UnicodeDecodeError<span class="token punctuation">:</span>
                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;[ERROR] decode error&#39;</span><span class="token punctuation">,</span>
                                  message<span class="token punctuation">.</span>topic<span class="token punctuation">.</span>value<span class="token punctuation">,</span> message<span class="token punctuation">.</span>payload<span class="token punctuation">)</span>
                    <span class="token comment"># await asyncio.sleep(3)</span>
        <span class="token keyword">except</span> aiomqtt<span class="token punctuation">.</span>MqttError <span class="token keyword">as</span> error<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>
                <span class="token string-interpolation"><span class="token string">f&#39;Error \`</span><span class="token interpolation"><span class="token punctuation">{</span>error<span class="token punctuation">}</span></span><span class="token string">\`. Reconnecting in </span><span class="token interpolation"><span class="token punctuation">{</span>reconnect_interval<span class="token punctuation">}</span></span><span class="token string"> seconds.&#39;</span></span><span class="token punctuation">)</span>
            <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>reconnect_interval<span class="token punctuation">)</span>
        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;[ERROR] &#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>topic<span class="token punctuation">.</span>value<span class="token punctuation">,</span> message<span class="token punctuation">.</span>payload<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SQLAlchemy 会报错：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span>  <span class="token punctuation">(</span>pymysql.err.OperationalError<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">2013</span>, <span class="token string">&#39;Lost connection to MySQL server during query&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span>Background on this error at: https://sqlalche.me/e/20/e3q8<span class="token punctuation">)</span>
</code></pre></div><h2 id="2-解决方案" tabindex="-1"><a class="header-anchor" href="#2-解决方案"><span>2. 解决方案</span></a></h2><p>我们先学习一下 SQLAlchemy 的连接池参数。</p><ul><li><code>pool_size</code>：设置连接池中，保持的连接数。初始化时并不产生连接。</li><li><code>max_overflow</code>：当连接池里的连接数已达到 <code>pool_size</code> 时，且都被使用时。又要求从连接池里获取连接时，<code>max_overflow</code> 就是允许再新建的连接数。</li><li><code>pool_timeout</code>：从连接池里获取连接，如果此时无空闲的连接。且连接数已经到达了 <code>pool_size+max_overflow</code>。此时获取连接的进程会等待 <code>pool_timeout</code> 秒。如果超过这个时间，还没有获得将会抛出异常，默认为 30 秒。</li><li><code>pool_recycle</code>：数据库连接的生存时间。一个连接当连接空闲 <code>pool_recycle</code> 秒后，会被重置。默认为 -1，即永久可用。</li></ul><p>当 <code>pool_recycle</code> 设置为 -1 时，也就是连接池不会主动丢弃这个连接。但是有可能数据库设置了连接超时时间。例如 MySQL，设置的有 <code>wait_timeout</code> 默认为 28800。当连接空闲 8 小时时会自动断开。</p><h3 id="21-不使用连接池" tabindex="-1"><a class="header-anchor" href="#21-不使用连接池"><span>2.1 不使用连接池</span></a></h3><p>在创建引擎时，设置 <code>poolclass=NullPool</code>，不使用连接池。</p><p>缺点是降低连接效率。</p><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code>engine <span class="token operator">=</span> create_async_engine<span class="token punctuation">(</span>config<span class="token punctuation">.</span>DB_URL<span class="token punctuation">,</span> echo<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> poolclass<span class="token operator">=</span>NullPool<span class="token punctuation">)</span>
</code></pre></div><h3 id="22-设置连接超时时间" tabindex="-1"><a class="header-anchor" href="#22-设置连接超时时间"><span>2.2 设置连接超时时间</span></a></h3><p>在创建引擎时，设置 <code>pool_recycle=3600</code>，每 3600 秒（1 小时）回收连接，建议和 <code>pool_pre_ping=True</code> 一起使用。</p><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code>engine <span class="token operator">=</span> create_async_engine<span class="token punctuation">(</span>config<span class="token punctuation">.</span>DB_URL<span class="token punctuation">,</span> echo<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> pool_recycle<span class="token operator">=</span><span class="token number">3600</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="23-自动重连" tabindex="-1"><a class="header-anchor" href="#23-自动重连"><span>2.3 自动重连</span></a></h3><p>设置 <code>pool_pre_ping=True</code>，每次从连接池中取出连接时，都会先尝试 ping（相当于 <code>SELECT 1</code>），如果连接已经断开，那么 SQLAlchemy 会自动重连，并放弃所有旧的连接。</p><p>如果出现错误将最多重试 3 次，否则此错误正常抛出。</p><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code>engine <span class="token operator">=</span> create_async_engine<span class="token punctuation">(</span>config<span class="token punctuation">.</span>DB_URL<span class="token punctuation">,</span> echo<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> pool_pre_ping<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre></div>`,25);function m(y,v){const s=p("router-link");return c(),l("div",null,[r,n("nav",d,[n("ul",null,[n("li",null,[a(s,{to:"#1-问题复现"},{default:e(()=>[t("1. 问题复现")]),_:1})]),n("li",null,[a(s,{to:"#2-解决方案"},{default:e(()=>[t("2. 解决方案")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#21-不使用连接池"},{default:e(()=>[t("2.1 不使用连接池")]),_:1})]),n("li",null,[a(s,{to:"#22-设置连接超时时间"},{default:e(()=>[t("2.2 设置连接超时时间")]),_:1})]),n("li",null,[a(s,{to:"#23-自动重连"},{default:e(()=>[t("2.3 自动重连")]),_:1})])])])])]),k])}const _=o(u,[["render",m],["__file","sqlalchemy-lost-connection.html.vue"]]),b=JSON.parse(`{"path":"/posts/python/basic/errors/sqlalchemy-lost-connection.html","title":"SQLAlchemy 连接池中的连接失效","lang":"zh-CN","frontmatter":{"description":"SQLAlchemy 连接池中的连接失效 1. 问题复现 在使用 SQLAlchemy 连接 MySQL 时，如果 MySQL 服务端主动断开连接，那么 SQLAlchemy 会报错。 查看 MySQL 连接超时时间 wait_timeout，如未进行配置，默认值为 28800，即 8 小时。 设置 MySQL 超时时间为 2 秒： 下面是在使用 as...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/posts/python/basic/errors/sqlalchemy-lost-connection.html"}],["meta",{"property":"og:site_name","content":"鸭梨"}],["meta",{"property":"og:title","content":"SQLAlchemy 连接池中的连接失效"}],["meta",{"property":"og:description","content":"SQLAlchemy 连接池中的连接失效 1. 问题复现 在使用 SQLAlchemy 连接 MySQL 时，如果 MySQL 服务端主动断开连接，那么 SQLAlchemy 会报错。 查看 MySQL 连接超时时间 wait_timeout，如未进行配置，默认值为 28800，即 8 小时。 设置 MySQL 超时时间为 2 秒： 下面是在使用 as..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T04:16:18.000Z"}],["meta",{"property":"article:author","content":"Alex Sun"}],["meta",{"property":"article:modified_time","content":"2024-05-27T04:16:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SQLAlchemy 连接池中的连接失效\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-27T04:16:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alex Sun\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. 问题复现","slug":"1-问题复现","link":"#1-问题复现","children":[]},{"level":2,"title":"2. 解决方案","slug":"2-解决方案","link":"#2-解决方案","children":[{"level":3,"title":"2.1 不使用连接池","slug":"21-不使用连接池","link":"#21-不使用连接池","children":[]},{"level":3,"title":"2.2 设置连接超时时间","slug":"22-设置连接超时时间","link":"#22-设置连接超时时间","children":[]},{"level":3,"title":"2.3 自动重连","slug":"23-自动重连","link":"#23-自动重连","children":[]}]}],"git":{"createdTime":1716783378000,"updatedTime":1716783378000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":2.41,"words":722},"filePathRelative":"posts/python/basic/errors/sqlalchemy-lost-connection.md","localizedDate":"2024年5月27日","excerpt":"\\n\\n<h2>1. 问题复现</h2>\\n<p>在使用 SQLAlchemy 连接 MySQL 时，如果 MySQL 服务端主动断开连接，那么 SQLAlchemy 会报错。</p>\\n<p>查看 MySQL 连接超时时间 <code>wait_timeout</code>，如未进行配置，默认值为 28800，即 8 小时。</p>\\n<div class=\\"language-sql\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token keyword\\">show</span> <span class=\\"token keyword\\">global</span> variables <span class=\\"token operator\\">like</span> <span class=\\"token string\\">'%timeout%'</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}`);export{_ as comp,b as data};

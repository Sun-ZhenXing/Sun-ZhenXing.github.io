import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as r,c as i,b as e,a as n,w as o,e as p,d as a}from"./app-DhX54nll.js";const c={},s=e("h1",{id:"python-cc-混合编程概述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#python-cc-混合编程概述"},[e("span",null,"Python C/C++ 混合编程概述")])],-1),d={class:"table-of-contents"},y=p('<h2 id="1-python-与-cc-混合编程" tabindex="-1"><a class="header-anchor" href="#1-python-与-cc-混合编程"><span>1. Python 与 C/C++ 混合编程</span></a></h2><p>Python 与 C/C++ 代码进行互操作，在 C/C++ 程序可以通过引入 <code>&lt;Python.h&gt;</code> 来引用 Python 的一些功能，从而可以提供 Python 接口。Python 也可以直接或间接调用 C/C++ 库中的一些功能，但实现比较复杂。因此有一些第三方库用于实现这种互操作性。</p><h2 id="2-原生接口" tabindex="-1"><a class="header-anchor" href="#2-原生接口"><span>2. 原生接口</span></a></h2><p>Python 的标准库 <code>ctypes</code> 实现了与 C 的互操作性，但缺点是需要写很多接口描述代码。</p><h2 id="3-常见第三方生态" tabindex="-1"><a class="header-anchor" href="#3-常见第三方生态"><span>3. 常见第三方生态</span></a></h2><h3 id="31-boostpython" tabindex="-1"><a class="header-anchor" href="#31-boostpython"><span>3.1 Boost.Python</span></a></h3><p>Boost 模块支持导出为 Python 接口。</p><h3 id="32-pybind11" tabindex="-1"><a class="header-anchor" href="#32-pybind11"><span>3.2 PyBind11</span></a></h3><p>C++11 与 Python 绑定，减去了旧 C++ 支持，更轻量化，C++ 工程也只需要引入头文件即可，不需要修改内容。</p><h3 id="33-cffi" tabindex="-1"><a class="header-anchor" href="#33-cffi"><span>3.3 CFFI</span></a></h3><p><a href="https://cffi-zh-cn.readthedocs.io/zh/latest/overview.html" target="_blank" rel="noopener noreferrer">CFFI</a> 是 Python 调用 C 语言代码框架。目标是在不学习第三种编程语言的情况下从 Python 调用 C 语言代码。</p><h3 id="34-swig" tabindex="-1"><a class="header-anchor" href="#34-swig"><span>3.4 SWIG</span></a></h3><p><a href="http://swig.org/" target="_blank" rel="noopener noreferrer">SWIG</a> 是帮助将 C/C++ 编写的程序与其他高级语言嵌入联接的开发工具。例如 PHP、Python、Lua、C#、Java 等。</p><h3 id="35-weave" tabindex="-1"><a class="header-anchor" href="#35-weave"><span>3.5 Weave</span></a></h3><p><a href="http://www.scipy.org/Weave" target="_blank" rel="noopener noreferrer">Weave</a> 是完整的 SciPy 包的一部分，它允许 Python 嵌入 C/C++ 代码，Weave 这也有独立的包支持。</p><h3 id="36-pyrex" tabindex="-1"><a class="header-anchor" href="#36-pyrex"><span>3.6 Pyrex</span></a></h3><p>Pyrex 允许编写以任何想要的方式混合 Python 和 C 数据类型的代码，并将其编译为 Python 的 C 扩展。</p>',17);function C(P,u){const t=l("router-link");return r(),i("div",null,[s,e("nav",d,[e("ul",null,[e("li",null,[n(t,{to:"#1-python-与-cc-混合编程"},{default:o(()=>[a("1. Python 与 C/C++ 混合编程")]),_:1})]),e("li",null,[n(t,{to:"#2-原生接口"},{default:o(()=>[a("2. 原生接口")]),_:1})]),e("li",null,[n(t,{to:"#3-常见第三方生态"},{default:o(()=>[a("3. 常见第三方生态")]),_:1}),e("ul",null,[e("li",null,[n(t,{to:"#31-boostpython"},{default:o(()=>[a("3.1 Boost.Python")]),_:1})]),e("li",null,[n(t,{to:"#32-pybind11"},{default:o(()=>[a("3.2 PyBind11")]),_:1})]),e("li",null,[n(t,{to:"#33-cffi"},{default:o(()=>[a("3.3 CFFI")]),_:1})]),e("li",null,[n(t,{to:"#34-swig"},{default:o(()=>[a("3.4 SWIG")]),_:1})]),e("li",null,[n(t,{to:"#35-weave"},{default:o(()=>[a("3.5 Weave")]),_:1})]),e("li",null,[n(t,{to:"#36-pyrex"},{default:o(()=>[a("3.6 Pyrex")]),_:1})])])])])]),y])}const g=h(c,[["render",C],["__file","intro.html.vue"]]),x=JSON.parse('{"path":"/posts/python/advanced/mixed-programming/c-cpp-mixed/intro.html","title":"Python C/C++ 混合编程概述","lang":"zh-CN","frontmatter":{"description":"Python C/C++ 混合编程概述 1. Python 与 C/C++ 混合编程 Python 与 C/C++ 代码进行互操作，在 C/C++ 程序可以通过引入 <Python.h> 来引用 Python 的一些功能，从而可以提供 Python 接口。Python 也可以直接或间接调用 C/C++ 库中的一些功能，但实现比较复杂。因此有一些第三方库...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/posts/python/advanced/mixed-programming/c-cpp-mixed/intro.html"}],["meta",{"property":"og:site_name","content":"鸭梨"}],["meta",{"property":"og:title","content":"Python C/C++ 混合编程概述"}],["meta",{"property":"og:description","content":"Python C/C++ 混合编程概述 1. Python 与 C/C++ 混合编程 Python 与 C/C++ 代码进行互操作，在 C/C++ 程序可以通过引入 <Python.h> 来引用 Python 的一些功能，从而可以提供 Python 接口。Python 也可以直接或间接调用 C/C++ 库中的一些功能，但实现比较复杂。因此有一些第三方库..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T04:16:18.000Z"}],["meta",{"property":"article:author","content":"Alex Sun"}],["meta",{"property":"article:modified_time","content":"2024-05-27T04:16:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python C/C++ 混合编程概述\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-27T04:16:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alex Sun\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. Python 与 C/C++ 混合编程","slug":"1-python-与-cc-混合编程","link":"#1-python-与-cc-混合编程","children":[]},{"level":2,"title":"2. 原生接口","slug":"2-原生接口","link":"#2-原生接口","children":[]},{"level":2,"title":"3. 常见第三方生态","slug":"3-常见第三方生态","link":"#3-常见第三方生态","children":[{"level":3,"title":"3.1 Boost.Python","slug":"31-boostpython","link":"#31-boostpython","children":[]},{"level":3,"title":"3.2 PyBind11","slug":"32-pybind11","link":"#32-pybind11","children":[]},{"level":3,"title":"3.3 CFFI","slug":"33-cffi","link":"#33-cffi","children":[]},{"level":3,"title":"3.4 SWIG","slug":"34-swig","link":"#34-swig","children":[]},{"level":3,"title":"3.5 Weave","slug":"35-weave","link":"#35-weave","children":[]},{"level":3,"title":"3.6 Pyrex","slug":"36-pyrex","link":"#36-pyrex","children":[]}]}],"git":{"createdTime":1716783378000,"updatedTime":1716783378000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":1.18,"words":354},"filePathRelative":"posts/python/advanced/mixed-programming/c-cpp-mixed/intro.md","localizedDate":"2024年5月27日","excerpt":"\\n\\n<h2>1. Python 与 C/C++ 混合编程</h2>\\n<p>Python 与 C/C++ 代码进行互操作，在 C/C++ 程序可以通过引入 <code>&lt;Python.h&gt;</code> 来引用 Python 的一些功能，从而可以提供 Python 接口。Python 也可以直接或间接调用 C/C++ 库中的一些功能，但实现比较复杂。因此有一些第三方库用于实现这种互操作性。</p>\\n<h2>2. 原生接口</h2>\\n<p>Python 的标准库 <code>ctypes</code> 实现了与 C 的互操作性，但缺点是需要写很多接口描述代码。</p>\\n<h2>3. 常见第三方生态</h2>","autoDesc":true}');export{g as comp,x as data};

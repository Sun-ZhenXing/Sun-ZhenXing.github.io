import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as d,c as h,b as s,a as i,w as n,e as l,d as e}from"./app-mQJDQ8JG.js";const o="data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20200%20200'%3e%3cdefs%3e%3clinearGradient%20id='grad'%20x1='0%25'%20y1='0%25'%20x2='100%25'%20y2='0%25'%3e%3cstop%20offset='0%25'%20style='stop-color:%23ff6a6a;stop-opacity:1'%20/%3e%3cstop%20offset='100%25'%20style='stop-color:%23ff0000;stop-opacity:1'%20/%3e%3c/linearGradient%3e%3c/defs%3e%3cpath%20fill='url(%23grad)'%20d='M100,0C44.771,0,0,44.771,0,100c0,55.229,44.771,100,100,100s100-44.771,100-100C200,44.771,155.229,0,100,0z%20M100,180.392c-39.216,0-71.078-31.862-71.078-71.078c0-39.216,31.862-71.078,71.078-71.078s71.078,31.862,71.078,71.078C171.078,148.53,139.216,180.392,100,180.392z%20M100,50c-22.091,0-40,17.909-40,40s17.909,40,40,40s40-17.909,40-40S122.091,50,100,50z'%20/%3e%3ccircle%20fill='%23ffffff'%20cx='130'%20cy='70'%20r='20'%20/%3e%3c/svg%3e",c={},k=s("p",null,"使用 GhatGPT 辅助绘图。",-1),g={class:"table-of-contents"},m=l(`<h2 id="1-生成-mermaid-图形代码" tabindex="-1"><a class="header-anchor" href="#1-生成-mermaid-图形代码"><span>1. 生成 Mermaid 图形代码</span></a></h2><div class="language-card line-numbers-mode" data-highlighter="shiki" data-ext="card" data-title="card" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>title: AI 提示</span></span>
<span class="line"><span>desc: 使用 Mermaid 语法绘制流程图，模仿下面的 Mermaid 代码风格。要求表示下面的 Python 代码，有开始和结束，正确表示输入输出。</span></span>
<span class="line"><span>link: https://chat.openai.com/</span></span>
<span class="line"><span>logo: /assets/chatgpt.svg</span></span>
<span class="line"><span>color: rgba(226, 212, 255, 0.2)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成示范：</p><div class="language-markdown line-numbers-mode" data-highlighter="shiki" data-ext="markdown" data-title="markdown" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">使用 Mermaid 语法绘制流程图，模仿下面的 Mermaid 代码风格。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">要求表示下面的 Python 代码，有开始和结束，正确表示输入输出。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">\`\`\`mermaid</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    start((&quot;开始&quot;)) --&gt; input1[/&quot;输入 x&quot;/]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    input1 --&gt; decision1{x &lt; 0 ?}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    decision1 -- Yes --&gt; y1[y = 0]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    decision1 -- No --&gt; y2[y = x * x]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    y1 --&gt; output1[/&quot;输出 y&quot;/]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    y2 --&gt; output1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    output1 --&gt; End((&quot;结束&quot;))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">\`\`\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">\`\`\`python</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    y </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">elif</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    y </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> x</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    y </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">\`\`\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们就得到了下面的代码：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>graph TD</span></span>
<span class="line"><span>    start((&quot;开始&quot;)) --&gt; input1[/&quot;输入 x&quot;/]</span></span>
<span class="line"><span>    input1 --&gt; decision1{x * x - 3 == 5 ?}</span></span>
<span class="line"><span>    decision1 -- Yes --&gt; y1[y = x / 3]</span></span>
<span class="line"><span>    decision1 -- No --&gt; decision2{x &gt; 5 ?}</span></span>
<span class="line"><span>    decision2 -- Yes --&gt; y2[y = 5 * x]</span></span>
<span class="line"><span>    decision2 -- No --&gt; y3[y = 0]</span></span>
<span class="line"><span>    y1 --&gt; output1[/&quot;输出 y&quot;/]</span></span>
<span class="line"><span>    y2 --&gt; output1</span></span>
<span class="line"><span>    y3 --&gt; output1</span></span>
<span class="line"><span>    output1 --&gt; End((&quot;结束&quot;))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果如下：</p>`,7),u=l(`<p>同样适用于生成 E-R 图或者其他各种类型的图。</p><h2 id="2-配合-drawio-使用" tabindex="-1"><a class="header-anchor" href="#2-配合-drawio-使用"><span>2. 配合 <a href="http://draw.io" target="_blank" rel="noopener noreferrer">draw.io</a> 使用</span></a></h2><p><a href="https://app.diagrams.net/" target="_blank" rel="noopener noreferrer">draw.io</a> 是一个在线绘图工具，可以绘制各种图形，包括流程图、E-R 图、UML 图等等。</p><p>使用 ChatGPT 生成对应图形代码，然后插入到 <a href="http://draw.io" target="_blank" rel="noopener noreferrer">draw.io</a> 中，即可快速绘制我们需要的图形。</p><p>如果需要将 Mermaid 图形转换为 <a href="http://draw.io" target="_blank" rel="noopener noreferrer">draw.io</a> 图形，可以点击菜单栏的 <strong>调整图形 (Arrange)</strong> -&gt; <strong>插入 (Insert)</strong> -&gt; <strong>高级 (Advanced)</strong> -&gt; <strong>Mermaid...</strong>，然后将 Mermaid 图形代码粘贴到弹出的对话框中，点击 <strong>插入 (Insert)</strong> 即可。当然，<a href="https://mermaid.live/" target="_blank" rel="noopener noreferrer">Mermaid 在线网站</a> 也可以完成这个功能，导出为 SVG 即可。</p><p>同样也可以生成 PlantUML 图等图标，也可以从 SVG、CSV 等代码中导入。</p><h2 id="3-绘制复杂图形" tabindex="-1"><a class="header-anchor" href="#3-绘制复杂图形"><span>3. 绘制复杂图形</span></a></h2><p>有几种思路：</p><ol><li>使用 ChatGPT 输出 SVG 代码，类似于上述方法</li><li>使用 ChatGPT 输出生成模型的提示词（Prompt），然后使用对应模型进行生成</li></ol><p>对于第一种方法，已经有人尝试，不过在 GPT-3.5 上效果还不够理想，在 GPT-4 上可能会有更好的效果。</p><div class="language-card line-numbers-mode" data-highlighter="shiki" data-ext="card" data-title="card" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>title: AI 提示</span></span>
<span class="line"><span>desc: 给出一个标准的 SVG 图标的代码，要求内容为草莓，Material 3D 风格，主题色为红色，要美观大方。</span></span>
<span class="line"><span>link: https://chat.openai.com/</span></span>
<span class="line"><span>logo: /assets/chatgpt.svg</span></span>
<span class="line"><span>color: rgba(226, 212, 255, 0.2)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前 GPT-3.5 的输出：</p><figure><img src="`+o+'" alt="strawberry" tabindex="0" loading="lazy"><figcaption>strawberry</figcaption></figure><p>显然这和草莓并没有什么关系，但这已经是准确的 SVG 代码了，相信不久 GPT 就有能力绘制更复杂的图形了。</p>',14);function v(y,b){const a=t("router-link"),p=t("Mermaid");return d(),h("div",null,[k,s("nav",g,[s("ul",null,[s("li",null,[i(a,{to:"#1-生成-mermaid-图形代码"},{default:n(()=>[e("1. 生成 Mermaid 图形代码")]),_:1})]),s("li",null,[i(a,{to:"#2-配合-drawio-使用"},{default:n(()=>[e("2. 配合 draw.io 使用")]),_:1})]),s("li",null,[i(a,{to:"#3-绘制复杂图形"},{default:n(()=>[e("3. 绘制复杂图形")]),_:1})])])]),m,i(p,{id:"mermaid-22",code:"eJxLL0osyFAIceFSAILiksSiEg0Npad7Gp4u71bS1FTQ1bVTyMwrKC0xjNZXerFv8tPWpQoVSvqxYOUQCbCalNTkzOLM/DzD6goFLYUKBV0FYwVbWwVTBftasFK4PFC1QmRqMVhTpWF0pYItULW+gjHERBRlfvkoRhsBjbbDNNEIxUQjsImmIDegmghWBjWx0hisygCiohLig/zSEiRvtu9SqIR5sxKkF64AImSMIQRlg8Vd81KAofh89+Rnc+cDQ5ELAA5gaI8="}),u])}const A=r(c,[["render",v],["__file","draw-figure.html.vue"]]),C=JSON.parse('{"path":"/posts/ai/chatgpt/draw-figure.html","title":"ChatGPT 绘制图像","lang":"zh-CN","frontmatter":{"title":"ChatGPT 绘制图像","date":"2023-04-24T00:00:00.000Z","category":["AI","ChatGPT"],"tag":["AI","ChatGPT"],"description":"使用 GhatGPT 辅助绘图。","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/posts/ai/chatgpt/draw-figure.html"}],["meta",{"property":"og:site_name","content":"鸭梨"}],["meta",{"property":"og:title","content":"ChatGPT 绘制图像"}],["meta",{"property":"og:description","content":"使用 GhatGPT 辅助绘图。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-02T16:16:12.000Z"}],["meta",{"property":"article:author","content":"Alex Sun"}],["meta",{"property":"article:tag","content":"AI"}],["meta",{"property":"article:tag","content":"ChatGPT"}],["meta",{"property":"article:published_time","content":"2023-04-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-02T16:16:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ChatGPT 绘制图像\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-02T16:16:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alex Sun\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. 生成 Mermaid 图形代码","slug":"1-生成-mermaid-图形代码","link":"#1-生成-mermaid-图形代码","children":[]},{"level":2,"title":"2. 配合 draw.io 使用","slug":"2-配合-drawio-使用","link":"#2-配合-drawio-使用","children":[]},{"level":2,"title":"3. 绘制复杂图形","slug":"3-绘制复杂图形","link":"#3-绘制复杂图形","children":[]}],"git":{"createdTime":1682299078000,"updatedTime":1709396172000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":4}]},"readingTime":{"minutes":2.42,"words":726},"filePathRelative":"posts/ai/chatgpt/draw-figure.md","localizedDate":"2023年4月24日","excerpt":"<p>使用 GhatGPT 辅助绘图。</p>\\n","autoDesc":true}');export{A as comp,C as data};

import{_ as n,X as a,Y as s,Z as t,a0 as p,a3 as o}from"./framework-4507c9ea.js";const e={},c=p("p",null,"如果发明一种新语言，它应该有哪些特征？",-1),l=o(`<div class="hint-container warning"><p class="hint-container-title">注意</p><p>本文为鸭梨瞎想，短期内（也可能永远不会）并不会实现此语言，暂时也未命名，仅仅是设想未来语言的一些特征。</p></div><h2 id="_1-目的" tabindex="-1"><a class="header-anchor" href="#_1-目的" aria-hidden="true">#</a> 1. 目的</h2><p>设计一种安全、简洁、含糖量高的静态语言，保持极端的优雅和原生性能。</p><p>这种语言，简单底层又包含高级别的抽象，极端现代化，适用于下面这些人：</p><ul><li>希望编程更加优雅愉快的人</li><li>脱离 JVM/PVM/... 虚拟机，寻找系统编程语言的人</li><li>编写高性能程序，而又担心程序难以维护的人</li></ul><p>考虑到社区发展，应该选择兼容某种语言的生态（从部署的适配上或语法的可转换上）。</p><h2 id="_2-语言基本特性" tabindex="-1"><a class="header-anchor" href="#_2-语言基本特性" aria-hidden="true">#</a> 2. 语言基本特性</h2><ul><li>静态语言，可使用 LLVM 作为编译器后端</li><li>支持类型推导、可空类型、宏指令</li><li>支持规则声明，由此允许混合使用不同版本的代码（<code>@@rules</code> 指令）</li><li>不使用指针，使用更安全的抽象（引用和委托）</li><li>支持类似于 OpenMP 的 <code>#parallel</code> 指令用于编译阶段转译为并行语句（需要 <code>import parallel</code>）</li><li>支持原生的异步语法 <code>async/await</code>，并且提供 <code>aio</code> 作为工具库</li></ul><p>原生类型：</p><table><thead><tr><th>类型</th><th>大小 (bit)</th></tr></thead><tbody><tr><td><code>char</code></td><td>8</td></tr><tr><td><code>uchar</code></td><td>8</td></tr><tr><td><code>wchar</code></td><td>16</td></tr><tr><td><code>int</code></td><td>32</td></tr><tr><td><code>uint</code></td><td>32</td></tr><tr><td><code>long</code></td><td>64</td></tr><tr><td><code>ulong</code></td><td>64</td></tr><tr><td><code>float</code></td><td>32</td></tr><tr><td><code>double</code></td><td>64</td></tr></tbody></table><p>同时也提供带有数字后缀的版本：</p><table><thead><tr><th>类型</th><th>大小 (bit)</th></tr></thead><tbody><tr><td><code>int8</code></td><td>8</td></tr><tr><td><code>int16</code></td><td>16</td></tr><tr><td><code>int32</code></td><td>32</td></tr><tr><td><code>int64</code></td><td>64</td></tr><tr><td><code>uint8</code></td><td>8</td></tr><tr><td><code>uint16</code></td><td>16</td></tr><tr><td><code>uint32</code></td><td>32</td></tr><tr><td><code>uint64</code></td><td>64</td></tr><tr><td><code>float32</code></td><td>32</td></tr><tr><td><code>float64</code></td><td>64</td></tr></tbody></table><p>不区分原生类型和包装类型，原生类型可调用包装类型的方法是编译时行为。</p><p>其他常见类型：</p><ul><li><code>str</code></li><li><code>array&lt;&gt;</code></li><li><code>list&lt;&gt;</code></li><li><code>hash_map&lt;&gt;</code>（也可能不加下划线）</li><li><code>hash_set&lt;&gt;</code></li><li><code>ordered_map&lt;&gt;</code></li><li><code>ordered_set&lt;&gt;</code></li></ul><p>命名原则：</p><ul><li>内置类全部小写</li><li>和变量建议使用小写加下划线（更加简洁）</li><li>用户类、接口等使用大驼峰命名</li><li>常量使用大写下划线命名</li></ul><p>我们把给变量指定类型称为类型注解，如 <code>a: int = b + 5</code>，我们把 <code>@</code> 一个函数或者变量称为装饰器。这一点类似于 Python 但不同于 Java，<code>@</code> 注解将在编译时和运行时都发挥作用，减少或不使用反射。</p><div class="hint-container info"><p class="hint-container-title">设想</p><p>我们希望像脚本语言一样（特别是 TypeScript），哈希表用于传递参数时可用使用类型注解来进行组合约束参数。</p></div><h2 id="_3-基本语法" tabindex="-1"><a class="header-anchor" href="#_3-基本语法" aria-hidden="true">#</a> 3. 基本语法</h2><ul><li>类 C 语言风格（更加接近大多数人的编程方式）</li><li>每个语句单独一行，不使用分号，分号可让一行写多个语句</li><li>单行注释是 <code>// ...</code>，多行注释是 <code>/* ... */</code></li><li>语句都是表达式，支持 <code>if</code>、<code>switch</code> 等语句有返回值，没有三元表达式（类似于 Kotlin）<div class="language-kotlin" data-ext="kt"><pre class="language-kotlin"><code>a <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> a <span class="token operator">+</span> b <span class="token keyword">else</span> a <span class="token operator">+</span> <span class="token number">2</span>
</code></pre></div></li><li>使用 <code>var</code> 声明变量，默认行为是 <code>const</code> 声明，如果赋值语句是对已经声明的变量赋值，则需要使用 <code>mut</code> 来声明（也就是变量默认是常变量，类似于 Rust，大大减少错误，并且更加接近函数式编程）<div class="language-rust" data-ext="rs"><pre class="language-rust"><code>var a <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">mut</span> a <span class="token operator">=</span> <span class="token number">5</span>
b <span class="token operator">=</span> <span class="token number">6</span>   <span class="token comment">// 这是常变量，修改会报错</span>
</code></pre></div></li><li>支持类型推导，多数情况下不需要指定类型<div class="language-python" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">3</span>
b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">2</span>
c <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span>
</code></pre></div></li><li>不使用指针，全面使用引用的方式（或在不安全的上下文的情况下提供指针支持，但是为了避免歧义，<code>*</code> 必须紧跟类型）<div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">begin</span> <span class="token expression">unsafe</span></span>
var c<span class="token operator">:</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token operator">=</span> null
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">end</span></span>
</code></pre></div></li><li>支持宏，用于进行元编程和库的开发（增强语言的表达能力，可支持 <code>#for</code>、<code>#include</code>）<div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">Win32 <span class="token operator">||</span> Unix</span></span>
    <span class="token comment">// ...</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre></div></li><li>支持可空类型，空类型不能赋值到非空类型上<div class="language-csharp" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> a<span class="token punctuation">:</span> str<span class="token punctuation">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token class-name">mut</span> a <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span>
</code></pre></div></li><li>支持匿名函数，使用 <code>-&gt;</code> 定义即可，可以赋值给一个变量（就像表达式一样），匿名函数和函数没有任何区别<div class="language-kotlin" data-ext="kt"><pre class="language-kotlin"><code>f <span class="token operator">=</span> x<span class="token operator">:</span> int <span class="token operator">-&gt;</span> x <span class="token operator">*</span><span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">5</span>
</code></pre></div></li><li>大量的函数式编程支持，并且支持广泛的迭代器和生成器，支持 <code>range</code>、<code>map</code>、<code>filter</code>、<code>reduce</code> 等函数<div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token comment">// Lambda 写法，类型推导将在 Lambda 上使用，使得 x 不需要类型</span>
a <span class="token operator">=</span> <span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">*</span><span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 此时 a 是一个迭代器</span>

<span class="token comment">// 函数写法</span>
a <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">*</span><span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div></li><li>支持对象扩展和原生类型的方法扩展，不过这只是编译器行为，静态语言不会产生动态行为<div class="language-kotlin" data-ext="kt"><pre class="language-kotlin"><code>int<span class="token punctuation">.</span><span class="token function">to_mystr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;[ {:3.6d} ]&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 或者更简单</span>
int<span class="token punctuation">.</span><span class="token function">to_mystr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;[ {:3.6d} ]&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
</code></pre></div></li><li>支持装饰器，多数装饰器使用原生装饰器实现，用于编译时检查或编译时触发特定行为，少部分用于运行时行为</li><li>【试验】支持 <code>...</code> 运算符，用于原地解包<div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>           <span class="token operator">//</span> a 是 <span class="token builtin">list</span><span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token operator">&gt;</span> 类型
b <span class="token operator">=</span> arrayof<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token operator">//</span> b 是 array<span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token operator">&gt;</span> 类型
f<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
f<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span>
</code></pre></div></li><li>【试验】支持列表推导（类似于 Python）<div class="language-python" data-ext="py"><pre class="language-python"><code>b <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre></div></li></ul><h2 id="_4-语法详解和示例" tabindex="-1"><a class="header-anchor" href="#_4-语法详解和示例" aria-hidden="true">#</a> 4. 语法详解和示例</h2><p><code>if</code> 语句：</p><div class="language-go" data-ext="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>for</code> 语句的循环变量不需要使用 <code>var</code> 定义，并且不能被手动改变，仅仅在作用域内有效：</p><div class="language-kotlin" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 类似于 for (int i = 1; i &lt; 100; ++i)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token keyword">in</span> <span class="token number">1</span> <span class="token operator">..</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 类似于 for (int i = 1; i &lt; 100; i += 3)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token keyword">in</span> <span class="token number">1</span> <span class="token operator">..</span> <span class="token number">100</span> <span class="token operator">..</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>while</code> 语句和 <code>do ... while</code> 语句也受到支持，类似于 C 语言。</p><p><code>switch</code> 语句也受到支持，但是不需要写 <code>break</code> 也不需要 <code>case</code>，含糖量极高：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token comment">// x: int</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token number">1</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>使用 <code>def</code> 定义一个函数：</p><div class="language-kotlin" data-ext="kt"><pre class="language-kotlin"><code>def <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token operator">:</span> int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// print 是一个宏，默认情况能打印任何类型，因为对象默认继承了 to_str() 方法</span>
    <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>使用 <code>class</code> 定义一个类：</p><div class="language-kotlin" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> A <span class="token punctuation">{</span>
    <span class="token keyword">var</span> _a<span class="token operator">:</span> int<span class="token operator">?</span>
    <span class="token keyword">var</span> <span class="token keyword">lateinit</span> b
    <span class="token keyword">var</span> _c<span class="token operator">:</span> int <span class="token operator">=</span> <span class="token number">3</span>

    <span class="token keyword">init</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mut b <span class="token operator">=</span> x
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>init</code> 用于创建初始化构造器，下划线开头的成员变量默认为私有的，除此之外默认为受保护的。</p><p>使用 <code>interface</code> 定义一个接口，不提供抽象类，接口和抽象类功能合并。</p><p>多态行为使用虚表实现，编译时扩展虚表行为使得语言更加动态（例如用于支持对象的混入和扩展）。</p><p><code>io</code> 提供同步的 I/O 支持，异步工具 <code>aio</code> 提供异步版本的 I/O 支持（考虑到编译体积，如果不导入就不会被编译，同时提供静态库和动态库支持。如果不使用 <code>libuv</code> 来实现也是可能的，提供接口来允许第三方库使用，这种情况下就不需要 <code>import aio</code> 了）。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> aio

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> <span class="token punctuation">(</span>
        aio<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;f1.png&quot;</span><span class="token punctuation">,</span> aio<span class="token punctuation">.</span>R <span class="token operator">|</span> aio<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">,</span>
        aio<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;f2.txt&quot;</span><span class="token punctuation">,</span> aio<span class="token punctuation">.</span>R<span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">//</span> 同步读取
        r1 <span class="token operator">=</span> <span class="token keyword">await</span> f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        r2 <span class="token operator">=</span> <span class="token keyword">await</span> f2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>

        <span class="token operator">//</span> 异步读取
        r3<span class="token punctuation">,</span> r4 <span class="token operator">=</span> <span class="token keyword">await</span> aio<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f2<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

aio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>read_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38);function i(u,r){return a(),s("div",null,[c,t(" more "),l])}const k=n(e,[["render",i],["__file","new-lang.html.vue"]]);export{k as default};

import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as i,c as p,b as n,a as s,w as e,e as c,d as t}from"./app-DhX54nll.js";const d={},r=n("h1",{id:"8-pyside6-构建和发布",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#8-pyside6-构建和发布"},[n("span",null,"8. PySide6 构建和发布")])],-1),u={class:"table-of-contents"},k=c(`<h2 id="81-使用-pyinstaller-打包" tabindex="-1"><a class="header-anchor" href="#81-使用-pyinstaller-打包"><span>8.1 使用 PyInstaller 打包</span></a></h2><h3 id="811-pyinstaller-的基本使用" tabindex="-1"><a class="header-anchor" href="#811-pyinstaller-的基本使用"><span>8.1.1 PyInstaller 的基本使用</span></a></h3><p>PyInstaller 是最成熟稳定的打包工具了，且有良好的跨平台性能。PyInstaller 打包尽可能保留解释器的相关功能，因此相当于将解释器包装起来，这样的结果是 PyInstaller 不能增加程序（Python 解释器）的性能，反而会降低性能。</p><p>安装 PyInstaller：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> pyinstaller
</code></pre></div><p>PyInstaller 的使用非常简单，只需要指定被打包脚本即可，例如下面的 <code>hello.py</code>（此代码来源为<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>）：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> random
<span class="token keyword">import</span> sys

<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt<span class="token punctuation">,</span> Slot
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QLabel<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QVBoxLayout<span class="token punctuation">,</span> QWidget


<span class="token keyword">class</span> <span class="token class-name">MyWidget</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        QWidget<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>hello <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Hallo Welt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;你好，世界&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hei maailma&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hola Mundo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Привет мир&quot;</span><span class="token punctuation">]</span>

        self<span class="token punctuation">.</span>button <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">&quot;Click me!&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>text <span class="token operator">=</span> QLabel<span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>setAlignment<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>layout <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>setLayout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>layout<span class="token punctuation">)</span>

        <span class="token comment"># Connecting the signal</span>
        self<span class="token punctuation">.</span>button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>magic<span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@Slot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">magic</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hello<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    widget <span class="token operator">=</span> MyWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>
    widget<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>
    widget<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>准备一个图标 <code>hello.ico</code> 文件：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pyinstaller <span class="token parameter variable">-i</span> hello.ico <span class="token parameter variable">-w</span> hello.py
</code></pre></div><p>常见参数：</p><ul><li><code>-i ...</code>：指定一个图标</li><li><code>-w</code>：不包含控制台</li><li><code>-F</code>：打包为单个可执行文件</li><li><code>--clean</code>：每次打包时清除上一次缓存</li></ul><h3 id="812-使用-upx-压缩程序" tabindex="-1"><a class="header-anchor" href="#812-使用-upx-压缩程序"><span>8.1.2 使用 UPX 压缩程序</span></a></h3><p>UPX 可以压缩可执行文件的大小。UPX 在主流系统都可以使用，请 <a href="https://github.com/upx/upx/releases/latest" target="_blank" rel="noopener noreferrer">下载 UPX</a>，然后解压到路径上。</p><p>可以通过指定 <code>--upx-dir ...</code> 来指定 UPX 路径，默认在路径上查找。</p><h3 id="813-使用-auto-py-to-exe" tabindex="-1"><a class="header-anchor" href="#813-使用-auto-py-to-exe"><span>8.1.3 使用 Auto PY to EXE</span></a></h3><p>如果我们想可视化地进行打包任务呢？Auto PY to EXE 是一个 GUI 程序，帮助我们可视化地选择 PyInstaller 参数，非常适合新手使用。安装：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> auto-py-to-exe
</code></pre></div><p>使用：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>auto-py-to-exe
</code></pre></div><p>此外 Auto PY to EXE 还支持在浏览器中操作，可以远程使用，阅读 <a href="https://github.com/brentvollebregt/auto-py-to-exe/blob/master/README-Chinese.md" target="_blank" rel="noopener noreferrer">中文文档</a> 以获取更多信息。</p><h2 id="82-使用-nuitka-打包" tabindex="-1"><a class="header-anchor" href="#82-使用-nuitka-打包"><span>8.2 使用 Nuitka 打包</span></a></h2><h3 id="821-nuitka-简介" tabindex="-1"><a class="header-anchor" href="#821-nuitka-简介"><span>8.2.1 Nuitka 简介</span></a></h3><p>Nuitka 是一个 Python 编写的 Python 解释器，支持 CPython 代码，可编译 Python 代码到 C++ 程序，并使用 <code>libpython</code> 来执行这些代码，就像 CPython 一样。<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p><p>Nuitka 尽可能对代码翻译为 C 代码进行优化，同时不损失代码的兼容性。因此 Nuitka 打包更小、更快，同时保密性更好，难以被破解。虽然 PyInstaller 支持使用 <code>--key</code> 选项进行加密，但是我们很容易逆向得到密码从而解密出数据。</p><p>Nuitka 是双协议发布的，开源部分受到社区和官方支持。而更好的服务则是 Nuitka 开发商的付费项目，包括敏感字符串加密、更多编译器支持等。对于本文而言，开源部分已经足够。</p><p>Nuitka 对于 32 位程序和更老的系统（例如 Windows 7 以下）支持不好，Nuitka 使用最新的套件，例如 Nuitka 的开源版本对于 MSVC 的支持仅限于最新版本，如果您的项目需要打包 32 位程序或有更严格的兼容性需求，请使用 PyInstaller，或者考虑使用 Nuitka 的付费服务获得支持。</p><h3 id="822-安装并配置-nuitka" tabindex="-1"><a class="header-anchor" href="#822-安装并配置-nuitka"><span>8.2.2 安装并配置 Nuitka</span></a></h3><p>安装 Nuitka：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip3 <span class="token function">install</span> nuitka
</code></pre></div><p>Nuitka 还有一些依赖包，在新版本的 PySide6 中将自动安装。如果您使用的是旧版本的 PySide6，可以手动安装依赖包：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip3 <span class="token function">install</span> ordered-set zstandard
</code></pre></div><p>这里我们引用官方示例，演示如何使用 Nuitka 进行打包：<sup class="footnote-ref"><a href="#footnote1">[1:1]</a><a class="footnote-anchor" id="footnote-ref1:1"></a></sup></p><p>我们先运行测试命令：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nuitka hello.py
</code></pre></div><h3 id="823-使用-mingw-作为编译器打包" tabindex="-1"><a class="header-anchor" href="#823-使用-mingw-作为编译器打包"><span>8.2.3 使用 MinGW 作为编译器打包</span></a></h3><p>Nuitka 要求安装 C/C++ 编译器，这一节我们使用 MinGW 作为编译器，不需要安装 MinGW，Nuitka 会自动管理。</p><p>首先，我们先看看 <code>nuitka</code> 命令都包含一些什么功能：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nuitka <span class="token parameter variable">--help</span>
</code></pre></div><p>打印了非常多的内容，但我们能得到很多有用信息，这是第一手的资料，当需要查询命令的时候我们应该在这里查看，这有时候比搜索引擎更有用。</p><p>为了使用 MinGW 作为编译器，我们通常指定 <code>--mingw64</code> 来确保使用的是 MinGW 而不是其他。</p><p>这里还有一些关键参数，Nuitka 适配了许多第三方库，这也包括 PySide6，这被包含在插件中，使用 <code>--plugin-enable=pyside6</code> 来启用它。</p><details class="hint-container details"><summary>第三方适配库</summary><p>如果需要查询有哪些已经适配的第三方库，可以通过下面的命令查询：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nuitka --plugin-list
</code></pre></div><p>当前版本（1.4.3）的结果为：</p><table><thead><tr><th>插件</th><th>说明</th></tr></thead><tbody><tr><td><code>anti-bloat</code></td><td>Patch stupid imports out of widely used library modules source codes.</td></tr><tr><td><code>data-files</code></td><td></td></tr><tr><td><code>delvewheel</code></td><td>Required for support of delvewheel using packages in standalone mode</td></tr><tr><td><code>dill-compat</code></td><td></td></tr><tr><td><code>dll-files</code></td><td></td></tr><tr><td><code>enum-compat</code></td><td></td></tr><tr><td><code>eventlet</code></td><td>Support for including &#39;eventlet&#39; dependencies and its need for &#39;dns&#39; package monkey patching</td></tr><tr><td><code>gevent</code></td><td>Required by the gevent package</td></tr><tr><td><code>gi</code></td><td>Support for GI typelib dependency</td></tr><tr><td><code>glfw</code></td><td>Required for OpenGL and glfw in standalone mode</td></tr><tr><td><code>implicit-imports</code></td><td></td></tr><tr><td><code>kivy</code></td><td>Required by kivy package</td></tr><tr><td><code>matplotlib</code></td><td>Required for matplotlib module</td></tr><tr><td><code>multiprocessing</code></td><td>Required by Python&#39;s multiprocessing module</td></tr><tr><td><code>no-qt</code></td><td>Disable all Qt bindings for standalone mode.</td></tr><tr><td><code>numpy</code></td><td>Deprecated, was once required by the numpy package</td></tr><tr><td><code>options-nanny</code></td><td></td></tr><tr><td><code>pbr-compat</code></td><td></td></tr><tr><td><code>pkg-resources</code></td><td>Workarounds for &#39;pkg_resources&#39;.</td></tr><tr><td><code>pmw-freezer</code></td><td>Required by the Pmw package</td></tr><tr><td><code>pylint-warnings</code></td><td>Support PyLint / PyDev linting source markers</td></tr><tr><td><code>pyqt5</code></td><td>Required by the PyQt5 package.</td></tr><tr><td><code>pyqt6</code></td><td>Required by the PyQt6 package for standalone mode.</td></tr><tr><td><code>pyside2</code></td><td>Required by the PySide2 package.</td></tr><tr><td><code>pyside6</code></td><td>Required by the PySide6 package for standalone mode.</td></tr><tr><td><code>pywebview</code></td><td>Required by the webview package (pywebview on PyPI)</td></tr><tr><td><code>tensorflow</code></td><td>Deprecated, was once required by the tensorflow package</td></tr><tr><td><code>tk-inter</code></td><td>Required by Python&#39;s Tk modules</td></tr><tr><td><code>torch</code></td><td>Deprecated, was once required by the torch package</td></tr><tr><td><code>trio</code></td><td>Required for Trio package</td></tr><tr><td><code>upx</code></td><td>Compress created binaries with UPX automatically</td></tr></tbody></table><p>如果你有打包这些库的需求，那么使用 Nuitka 最合适不过了。关于支持插件的详细信息，请访问 <a href="https://github.com/Nuitka/Nuitka/blob/develop/Standard-Plugins-Documentation.rst" target="_blank" rel="noopener noreferrer">官方插件文档</a>。</p></details><p>还有一些常用的参数：</p><ul><li><code>--standalone</code>：表示打包一个不依赖于系统 Python 环境的应用</li><li><code>--onefile</code>：表示打包为一个文件，这与 <code>--standalone</code> 同时使用</li><li><code>--disable-console</code>：不生成控制台</li><li><code>--output-dir=...</code>：生成可执行文件到指定文件夹</li><li><code>--follow-imports</code>：递归地编译整个程序</li><li><code>--include-plugin-directory</code>：包含一个完整的目录以适应动态导入</li><li><code>--module</code>：将目标编译为模块（链接库）</li><li><code>--show-progress</code>：显示编译的进度</li><li><code>--show-memory</code>：显示内存的占用</li></ul><p>下面我们就开始测试：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nuitka <span class="token parameter variable">--onefile</span> <span class="token parameter variable">--standalone</span> --disable-console <span class="token parameter variable">--mingw64</span> --plugin-enable<span class="token operator">=</span>pyside6 hello.py
</code></pre></div><p>第一次使用时，会询问你是否下载 MinGW 依赖，输入 <code>Yes</code> 确认。下载过程可能会出错，只需要手动下载然后将压缩包放置到 Nuitka 指定的文件夹即可。</p><div class="hint-container info"><p class="hint-container-title">下载失败</p><p>如果下载失败，请将链接复制到浏览器中（最好使用代理），然后下载。常规情况下是放到 <code>C:\\Users\\&lt;用户名&gt;\\AppData\\Local\\Nuitka\\Nuitka\\Cache\\downloads\\gcc\\x86_64\\</code> 下的文件夹内，请参考错误提示。</p></div><p>接下来等待打包完成进行测试。</p><div class="hint-container tip"><p class="hint-container-title">指定图标</p><p>不同的操作系统打包图标的方式不同：</p><ul><li><code>--windows-icon-from-ico=...</code>：指定一个 Windows 应用图标</li><li><code>--macos-app-icon=...</code>：指定一个 Mac OS 应用图标</li><li><code>--linux-icon=...</code>：指定一个 Linux 应用图标</li></ul></div><h3 id="824-使用-msvc-作为编译器打包" tabindex="-1"><a class="header-anchor" href="#824-使用-msvc-作为编译器打包"><span>8.2.4 使用 MSVC 作为编译器打包</span></a></h3><div class="hint-container info"><p class="hint-container-title">选择 MSVC 还是 MinGW</p><p>从官方的单元测试结果来看，对于 64 位的 Python，MinGW 编译出的程序速度要比 MSVC 快大约 20%。而且 Nuitka 能自动管理独立的 MinGW 环境，建议使用 MinGW。</p></div><p>请安装最新版本的 Visual Studio，并选择 C/C++ 支持进行安装，还需要至少安装一个和编译器适配的 Windows SDK。</p><p>使用 MSVC 的步骤和 MinGW 一致，只不过需要将 <code>--mingw64</code> 参数替换为 <code>--msvc=...</code>，根据你所安装的 MSVC 版本作为参数，当前最新为 14.3 版本，示例命令如下：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nuitka <span class="token parameter variable">--standalone</span> --disable-console <span class="token parameter variable">--msvc</span><span class="token operator">=</span><span class="token number">14.3</span> --plugin-enable<span class="token operator">=</span>pyside6 hello.py
</code></pre></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>pyside-venv<span class="token punctuation">)</span> D:<span class="token punctuation">\\</span>workspace<span class="token punctuation">\\</span>repo<span class="token punctuation">\\</span>pyside-book<span class="token operator">&gt;</span>nuitka <span class="token parameter variable">--standalone</span> --disable-console <span class="token parameter variable">--msvc</span><span class="token operator">=</span><span class="token number">14.3</span> --plugin-enable<span class="token operator">=</span>pyside6 hello.py
Nuitka-Options:INFO: Used <span class="token builtin class-name">command</span> line options: <span class="token parameter variable">--standalone</span> --disable-console <span class="token parameter variable">--msvc</span><span class="token operator">=</span><span class="token number">14.3</span> --plugin-enable<span class="token operator">=</span>pyside6 hello.py
Nuitka:INFO: Starting Python compilation with Nuitka <span class="token string">&#39;1.4.3&#39;</span> on Python <span class="token string">&#39;3.10&#39;</span> commercial grade <span class="token string">&#39;not installed&#39;</span><span class="token builtin class-name">.</span>
Nuitka-Plugins:INFO: pyside6: Injecting pre-module load code <span class="token keyword">for</span> module <span class="token string">&#39;PySide6&#39;</span><span class="token builtin class-name">:</span>
Nuitka-Plugins:INFO: pyside6:     Adding binary folder to runtime <span class="token string">&#39;PATH&#39;</span> environment variable <span class="token keyword">for</span> proper Qt loading.
Nuitka-Plugins:INFO: pyside6: Injecting post-module load code <span class="token keyword">for</span> module <span class="token string">&#39;PySide6.QtCore&#39;</span><span class="token builtin class-name">:</span>
Nuitka-Plugins:INFO: pyside6:     Setting Qt library path to distribution folder. We need to avoid loading target
Nuitka-Plugins:INFO: pyside6:     system Qt plugins, <span class="token function">which</span> may be from another Qt version.
Nuitka:INFO: Completed Python level compilation and optimization.
Nuitka:INFO: Generating <span class="token builtin class-name">source</span> code <span class="token keyword">for</span> C backend compiler.
Nuitka:INFO: Running data <span class="token function">composer</span> tool <span class="token keyword">for</span> optimal constant value handling.
Nuitka:INFO: Running C compilation via Scons.
Nuitka-Scons:INFO: Backend C compiler: cl <span class="token punctuation">(</span>cl <span class="token number">14.3</span><span class="token punctuation">)</span>.
Nuitka-Scons:INFO: Backend linking program with <span class="token number">10</span> files <span class="token punctuation">(</span>no progress information available<span class="token punctuation">)</span>.
Nuitka-Scons:INFO: Compiled <span class="token number">10</span> C files using clcache with <span class="token number">0</span> cache hits and <span class="token number">10</span> cache misses.
Nuitka-Plugins:INFO: pyside6: Including Qt plugins <span class="token string">&#39;iconengines,imageformats,platforms,styles,tls&#39;</span> below <span class="token string">&#39;PySide6\\qt-plugins&#39;</span><span class="token builtin class-name">.</span>
Detecting used DLLs: <span class="token number">0.0</span>%<span class="token operator">|</span>                         <span class="token operator">|</span> <span class="token number">0</span>/37, hello.exeNuitka will <span class="token function">make</span> use of Dependency Walker <span class="token punctuation">(</span>https://dependencywalker.com<span class="token punctuation">)</span> tool
to analyze the dependencies of Python extension modules.

Is it OK to download and put it <span class="token keyword">in</span> <span class="token string">&#39;C:\\Users\\yalis\\AppData\\Local\\Nuitka\\Nuitka\\Cache\\downloads\\depends\\x86_64&#39;</span><span class="token builtin class-name">.</span>

No installer needed, cached, one <span class="token function">time</span> question.

Proceed and download? <span class="token punctuation">[</span>Yes<span class="token punctuation">]</span>/No
Yes
Nuitka:INFO: Downloading <span class="token string">&#39;https://dependencywalker.com/depends22_x64.zip&#39;</span><span class="token builtin class-name">.</span>
Nuitka:INFO: Extracting to <span class="token string">&#39;C:\\Users\\yalis\\AppData\\Local\\Nuitka\\Nuitka\\Cache\\downloads\\depends\\x86_64\\depends.exe&#39;</span>
Nuitka:INFO: Keeping build directory <span class="token string">&#39;hello.build&#39;</span><span class="token builtin class-name">.</span>
Nuitka:INFO: Successfully created <span class="token string">&#39;hello.dist\\hello.exe&#39;</span><span class="token builtin class-name">.</span>

<span class="token punctuation">(</span>pyside-venv<span class="token punctuation">)</span> D:<span class="token punctuation">\\</span>workspace<span class="token punctuation">\\</span>repo<span class="token punctuation">\\</span>pyside-book<span class="token operator">&gt;</span>.<span class="token punctuation">\\</span>hello.dist<span class="token punctuation">\\</span>hello.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="825-使用-upx-压缩" tabindex="-1"><a class="header-anchor" href="#825-使用-upx-压缩"><span>8.2.5 使用 UPX 压缩</span></a></h3><p>使用选项 <code>plugin-enable=pyside6,upx</code> 开启 UPX，记得还需要参数 <code>--upx-binary={upx_path}</code> 来访问 UPX 的目录。</p><h2 id="83-嵌入式包打包" tabindex="-1"><a class="header-anchor" href="#83-嵌入式包打包"><span>8.3 嵌入式包打包</span></a></h2><h3 id="831-python-嵌入包" tabindex="-1"><a class="header-anchor" href="#831-python-嵌入包"><span>8.3.1 Python 嵌入包</span></a></h3><p>有时候，我们只需要源码发布，而不需要将它们压缩为一个目录或文件。这种方式适合将 Python 程序和其解释器嵌入到其他程序，有许多程序都嵌入了 Python 作为脚本解释器。</p><p>我们在 Python 官网下载软件包时，有一个选项 <strong>Windows embeddable package</strong> 很容易被我们忽略，这便是 Python 的一个最小发行版，其大小只有几 MB，很容易被嵌入到其他软件中。</p><p>一般我们通过编写脚本，可以自动将我们的环境组装起来，无需进行环境调试，将目录复制过去即可运行，这就像虚拟环境一样。如果您需要，可以包装为安装程序。</p><h3 id="832-嵌入包的用法" tabindex="-1"><a class="header-anchor" href="#832-嵌入包的用法"><span>8.3.2 嵌入包的用法</span></a></h3><p>解压嵌入包至任意文件夹，例如 <a href="https://www.python.org/ftp/python/3.10.9/python-3.10.9-embed-amd64.zip" target="_blank" rel="noopener noreferrer">Python 3.10.9</a> 的嵌入包。</p><p>如 <code>python310.zip</code> 包含了 Python 各种标准库，而除了可执行程序、安全目录和法律文件外，其他文件都是内置可直接导入的标准库。</p><p>在此执行 <code>python</code> 和普通的 <code>python</code> 不同，很多内置函数无法使用，内置函数被放在了 <code>site</code> 库中，普通版本会自动导入此模块，如果需要自动导入，取消 <code>python310._pth</code> 文件内最后一行的注释。</p><p>现在，这和常规的 Python 一样了！如果有一些依赖是明确不需要的可以删除，你甚至可以在此用 <a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="noopener noreferrer">get-pip</a> 安装 Pip 来安装别的库。</p><p><code>python310._pth</code> 文件指定了 Python 可读取包的路径，如果需要打包，你可以将第三方模块直接复制过来。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>Qt for Python &amp; Nuitka，Qt，<a href="https://doc.qt.io/qtforpython/deployment-nuitka.html" target="_blank" rel="noopener noreferrer">https://doc.qt.io/qtforpython/deployment-nuitka.html</a> <a href="#footnote-ref1" class="footnote-backref">↩︎</a> <a href="#footnote-ref1:1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p>Nuitka，GitHub，<a href="https://github.com/Nuitka/Nuitka" target="_blank" rel="noopener noreferrer">https://github.com/Nuitka/Nuitka</a> <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li></ol></section>`,72);function h(m,y){const a=l("router-link");return i(),p("div",null,[r,n("nav",u,[n("ul",null,[n("li",null,[s(a,{to:"#81-使用-pyinstaller-打包"},{default:e(()=>[t("8.1 使用 PyInstaller 打包")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#811-pyinstaller-的基本使用"},{default:e(()=>[t("8.1.1 PyInstaller 的基本使用")]),_:1})]),n("li",null,[s(a,{to:"#812-使用-upx-压缩程序"},{default:e(()=>[t("8.1.2 使用 UPX 压缩程序")]),_:1})]),n("li",null,[s(a,{to:"#813-使用-auto-py-to-exe"},{default:e(()=>[t("8.1.3 使用 Auto PY to EXE")]),_:1})])])]),n("li",null,[s(a,{to:"#82-使用-nuitka-打包"},{default:e(()=>[t("8.2 使用 Nuitka 打包")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#821-nuitka-简介"},{default:e(()=>[t("8.2.1 Nuitka 简介")]),_:1})]),n("li",null,[s(a,{to:"#822-安装并配置-nuitka"},{default:e(()=>[t("8.2.2 安装并配置 Nuitka")]),_:1})]),n("li",null,[s(a,{to:"#823-使用-mingw-作为编译器打包"},{default:e(()=>[t("8.2.3 使用 MinGW 作为编译器打包")]),_:1})]),n("li",null,[s(a,{to:"#824-使用-msvc-作为编译器打包"},{default:e(()=>[t("8.2.4 使用 MSVC 作为编译器打包")]),_:1})]),n("li",null,[s(a,{to:"#825-使用-upx-压缩"},{default:e(()=>[t("8.2.5 使用 UPX 压缩")]),_:1})])])]),n("li",null,[s(a,{to:"#83-嵌入式包打包"},{default:e(()=>[t("8.3 嵌入式包打包")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#831-python-嵌入包"},{default:e(()=>[t("8.3.1 Python 嵌入包")]),_:1})]),n("li",null,[s(a,{to:"#832-嵌入包的用法"},{default:e(()=>[t("8.3.2 嵌入包的用法")]),_:1})])])])])]),k])}const g=o(d,[["render",h],["__file","index.html.vue"]]),f=JSON.parse('{"path":"/posts/python/packages/pyside6/chapter08/","title":"8. PySide6 构建和发布","lang":"zh-CN","frontmatter":{"description":"8. PySide6 构建和发布 8.1 使用 PyInstaller 打包 8.1.1 PyInstaller 的基本使用 PyInstaller 是最成熟稳定的打包工具了，且有良好的跨平台性能。PyInstaller 打包尽可能保留解释器的相关功能，因此相当于将解释器包装起来，这样的结果是 PyInstaller 不能增加程序（Python 解释器...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/posts/python/packages/pyside6/chapter08/"}],["meta",{"property":"og:site_name","content":"鸭梨"}],["meta",{"property":"og:title","content":"8. PySide6 构建和发布"}],["meta",{"property":"og:description","content":"8. PySide6 构建和发布 8.1 使用 PyInstaller 打包 8.1.1 PyInstaller 的基本使用 PyInstaller 是最成熟稳定的打包工具了，且有良好的跨平台性能。PyInstaller 打包尽可能保留解释器的相关功能，因此相当于将解释器包装起来，这样的结果是 PyInstaller 不能增加程序（Python 解释器..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T04:16:18.000Z"}],["meta",{"property":"article:author","content":"Alex Sun"}],["meta",{"property":"article:modified_time","content":"2024-05-27T04:16:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8. PySide6 构建和发布\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-27T04:16:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alex Sun\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"8.1 使用 PyInstaller 打包","slug":"81-使用-pyinstaller-打包","link":"#81-使用-pyinstaller-打包","children":[{"level":3,"title":"8.1.1 PyInstaller 的基本使用","slug":"811-pyinstaller-的基本使用","link":"#811-pyinstaller-的基本使用","children":[]},{"level":3,"title":"8.1.2 使用 UPX 压缩程序","slug":"812-使用-upx-压缩程序","link":"#812-使用-upx-压缩程序","children":[]},{"level":3,"title":"8.1.3 使用 Auto PY to EXE","slug":"813-使用-auto-py-to-exe","link":"#813-使用-auto-py-to-exe","children":[]}]},{"level":2,"title":"8.2 使用 Nuitka 打包","slug":"82-使用-nuitka-打包","link":"#82-使用-nuitka-打包","children":[{"level":3,"title":"8.2.1 Nuitka 简介","slug":"821-nuitka-简介","link":"#821-nuitka-简介","children":[]},{"level":3,"title":"8.2.2 安装并配置 Nuitka","slug":"822-安装并配置-nuitka","link":"#822-安装并配置-nuitka","children":[]},{"level":3,"title":"8.2.3 使用 MinGW 作为编译器打包","slug":"823-使用-mingw-作为编译器打包","link":"#823-使用-mingw-作为编译器打包","children":[]},{"level":3,"title":"8.2.4 使用 MSVC 作为编译器打包","slug":"824-使用-msvc-作为编译器打包","link":"#824-使用-msvc-作为编译器打包","children":[]},{"level":3,"title":"8.2.5 使用 UPX 压缩","slug":"825-使用-upx-压缩","link":"#825-使用-upx-压缩","children":[]}]},{"level":2,"title":"8.3 嵌入式包打包","slug":"83-嵌入式包打包","link":"#83-嵌入式包打包","children":[{"level":3,"title":"8.3.1 Python 嵌入包","slug":"831-python-嵌入包","link":"#831-python-嵌入包","children":[]},{"level":3,"title":"8.3.2 嵌入包的用法","slug":"832-嵌入包的用法","link":"#832-嵌入包的用法","children":[]}]}],"git":{"createdTime":1716783378000,"updatedTime":1716783378000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":8.69,"words":2606},"filePathRelative":"posts/python/packages/pyside6/chapter08/index.md","localizedDate":"2024年5月27日","excerpt":"\\n\\n<h2>8.1 使用 PyInstaller 打包</h2>\\n<h3>8.1.1 PyInstaller 的基本使用</h3>\\n<p>PyInstaller 是最成熟稳定的打包工具了，且有良好的跨平台性能。PyInstaller 打包尽可能保留解释器的相关功能，因此相当于将解释器包装起来，这样的结果是 PyInstaller 不能增加程序（Python 解释器）的性能，反而会降低性能。</p>\\n<p>安装 PyInstaller：</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>pip <span class=\\"token function\\">install</span> pyinstaller\\n</code></pre></div>","autoDesc":true}');export{g as comp,f as data};

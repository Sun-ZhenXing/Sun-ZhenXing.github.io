import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as c,c as l,b as n,a,w as t,e as u,d as p}from"./app-DhX54nll.js";const i={},r=n("h1",{id:"池化异步执行任务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#池化异步执行任务"},[n("span",null,"池化异步执行任务")])],-1),k={class:"table-of-contents"},d=u(`<h2 id="1-异步线程池" tabindex="-1"><a class="header-anchor" href="#1-异步线程池"><span>1. 异步线程池</span></a></h2><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> time
<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    start <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span>
    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">as</span> executor<span class="token punctuation">:</span>
        tasks_list <span class="token operator">=</span> <span class="token punctuation">[</span>loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span>executor<span class="token punctuation">,</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks_list<span class="token punctuation">)</span>
        end <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Time elapsed: </span><span class="token interpolation"><span class="token punctuation">{</span>end <span class="token operator">-</span> start<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="2-异步进程池" tabindex="-1"><a class="header-anchor" href="#2-异步进程池"><span>2. 异步进程池</span></a></h2><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool
<span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">say_hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    time_start <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> Pool<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>
        hi1_async <span class="token operator">=</span> pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>say_hello<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&quot;satori&quot;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        hi2_async <span class="token operator">=</span> pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>say_hello<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&quot;koishi&quot;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>hi1_async<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>hi2_async<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    time_end <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Time elapsed: </span><span class="token interpolation"><span class="token punctuation">{</span>time_end <span class="token operator">-</span> time_start<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">s&quot;</span></span><span class="token punctuation">)</span>
</code></pre></div>`,4);function m(y,_){const s=e("router-link");return c(),l("div",null,[r,n("nav",k,[n("ul",null,[n("li",null,[a(s,{to:"#1-异步线程池"},{default:t(()=>[p("1. 异步线程池")]),_:1})]),n("li",null,[a(s,{to:"#2-异步进程池"},{default:t(()=>[p("2. 异步进程池")]),_:1})])])]),d])}const w=o(i,[["render",m],["__file","pool.html.vue"]]),f=JSON.parse('{"path":"/posts/python/basic/asyncio/pool.html","title":"池化异步执行任务","lang":"zh-CN","frontmatter":{"description":"池化异步执行任务 1. 异步线程池 2. 异步进程池","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/posts/python/basic/asyncio/pool.html"}],["meta",{"property":"og:site_name","content":"鸭梨"}],["meta",{"property":"og:title","content":"池化异步执行任务"}],["meta",{"property":"og:description","content":"池化异步执行任务 1. 异步线程池 2. 异步进程池"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T04:16:18.000Z"}],["meta",{"property":"article:author","content":"Alex Sun"}],["meta",{"property":"article:modified_time","content":"2024-05-27T04:16:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"池化异步执行任务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-27T04:16:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alex Sun\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. 异步线程池","slug":"1-异步线程池","link":"#1-异步线程池","children":[]},{"level":2,"title":"2. 异步进程池","slug":"2-异步进程池","link":"#2-异步进程池","children":[]}],"git":{"createdTime":1716783378000,"updatedTime":1716783378000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":0.39,"words":116},"filePathRelative":"posts/python/basic/asyncio/pool.md","localizedDate":"2024年5月27日","excerpt":"\\n\\n<h2>1. 异步线程池</h2>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> asyncio\\n<span class=\\"token keyword\\">import</span> time\\n<span class=\\"token keyword\\">from</span> concurrent<span class=\\"token punctuation\\">.</span>futures <span class=\\"token keyword\\">import</span> ThreadPoolExecutor\\n\\n<span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    start <span class=\\"token operator\\">=</span> time<span class=\\"token punctuation\\">.</span>perf_counter<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    loop <span class=\\"token operator\\">=</span> asyncio<span class=\\"token punctuation\\">.</span>get_event_loop<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">with</span> ThreadPoolExecutor<span class=\\"token punctuation\\">(</span>max_workers<span class=\\"token operator\\">=</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">as</span> executor<span class=\\"token punctuation\\">:</span>\\n        tasks_list <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>loop<span class=\\"token punctuation\\">.</span>run_in_executor<span class=\\"token punctuation\\">(</span>executor<span class=\\"token punctuation\\">,</span> time<span class=\\"token punctuation\\">.</span>sleep<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">for</span> _ <span class=\\"token keyword\\">in</span> <span class=\\"token builtin\\">range</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">16</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">]</span>\\n        <span class=\\"token keyword\\">await</span> asyncio<span class=\\"token punctuation\\">.</span>gather<span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>tasks_list<span class=\\"token punctuation\\">)</span>\\n        end <span class=\\"token operator\\">=</span> time<span class=\\"token punctuation\\">.</span>perf_counter<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-interpolation\\"><span class=\\"token string\\">f\\"Time elapsed: </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>end <span class=\\"token operator\\">-</span> start<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span>\\n\\nasyncio<span class=\\"token punctuation\\">.</span>run<span class=\\"token punctuation\\">(</span>main<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}');export{w as comp,f as data};

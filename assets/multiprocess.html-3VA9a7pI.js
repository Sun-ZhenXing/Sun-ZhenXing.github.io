import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as c,c as l,b as n,a,w as p,e as u,d as t}from"./app-DhX54nll.js";const i={},k=n("h1",{id:"python-多进程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python-多进程"},[n("span",null,"Python 多进程")])],-1),r={class:"table-of-contents"},d=u(`<h2 id="1-进程" tabindex="-1"><a class="header-anchor" href="#1-进程"><span>1. 进程</span></a></h2><p>多进程可以避免 Python 多线程的劣势，充分发挥多核优势。</p><h2 id="2-创建进程" tabindex="-1"><a class="header-anchor" href="#2-创建进程"><span>2. 创建进程</span></a></h2><p>创建过程与多线程一致：</p><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> multiprocessing <span class="token keyword">as</span> mp


<span class="token keyword">def</span> <span class="token function">job</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;a:&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">&quot;b:&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    p1 <span class="token operator">=</span> mp<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>job<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="3-使用-queue-进行进程间通信" tabindex="-1"><a class="header-anchor" href="#3-使用-queue-进行进程间通信"><span>3. 使用 <code>Queue</code> 进行进程间通信</span></a></h2><p>使用 <code>multiprocessing.Queue</code> 返回输出的值：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> multiprocessing <span class="token keyword">as</span> mp


<span class="token keyword">def</span> <span class="token function">job</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> mp<span class="token punctuation">.</span>Queue<span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        res <span class="token operator">+=</span> i <span class="token operator">+</span> i <span class="token operator">*</span> i <span class="token operator">+</span> i<span class="token operator">**</span><span class="token number">3</span>
    q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>res <span class="token operator">+</span> index<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    q <span class="token operator">=</span> mp<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p1 <span class="token operator">=</span> mp<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>job<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p2 <span class="token operator">=</span> mp<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>job<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="4-多线程与多进程对比" tabindex="-1"><a class="header-anchor" href="#4-多线程与多进程对比"><span>4. 多线程与多进程对比</span></a></h2><p>性能对比</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> multiprocessing <span class="token keyword">as</span> mp
<span class="token keyword">import</span> threading <span class="token keyword">as</span> td
<span class="token keyword">import</span> time


<span class="token keyword">def</span> <span class="token function">job</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> mp<span class="token punctuation">.</span>Queue<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        res <span class="token operator">+=</span> i <span class="token operator">+</span> i <span class="token operator">*</span> i <span class="token operator">+</span> i<span class="token operator">**</span><span class="token number">3</span>
    q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>res<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">multicore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    q <span class="token operator">=</span> mp<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p1 <span class="token operator">=</span> mp<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>job<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p2 <span class="token operator">=</span> mp<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>job<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;multicore:&quot;</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">normal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            res <span class="token operator">+=</span> i <span class="token operator">+</span> i <span class="token operator">*</span> i <span class="token operator">+</span> i<span class="token operator">**</span><span class="token number">3</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;normal:&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">multithread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    q <span class="token operator">=</span> mp<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>
    t1 <span class="token operator">=</span> td<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>job<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    t2 <span class="token operator">=</span> td<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>job<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
    t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
    res1 <span class="token operator">=</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
    res2 <span class="token operator">=</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;multithread:&quot;</span><span class="token punctuation">,</span> res1<span class="token punctuation">,</span> res2<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    st <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    normal<span class="token punctuation">(</span><span class="token punctuation">)</span>
    et <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Time:&quot;</span><span class="token punctuation">,</span> et <span class="token operator">-</span> st<span class="token punctuation">)</span>
    st <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    multicore<span class="token punctuation">(</span><span class="token punctuation">)</span>
    et <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Time:&quot;</span><span class="token punctuation">,</span> et <span class="token operator">-</span> st<span class="token punctuation">)</span>
    st <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    multithread<span class="token punctuation">(</span><span class="token punctuation">)</span>
    et <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Time:&quot;</span><span class="token punctuation">,</span> et <span class="token operator">-</span> st<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="5-pool-进程池" tabindex="-1"><a class="header-anchor" href="#5-pool-进程池"><span>5. <code>Pool</code> 进程池</span></a></h2><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> multiprocessing <span class="token keyword">as</span> mp


<span class="token keyword">def</span> <span class="token function">job</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x<span class="token operator">**</span>x


<span class="token keyword">def</span> <span class="token function">multicore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    pool <span class="token operator">=</span> mp<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    multicore<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p><code>apply_async()</code> 函数一次使用一个值</p><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code>res <span class="token operator">=</span> pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
pool <span class="token operator">=</span> mp<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="6-共享内存" tabindex="-1"><a class="header-anchor" href="#6-共享内存"><span>6. 共享内存</span></a></h2><p>定义共享内存变量：</p><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code>val <span class="token operator">=</span> mp<span class="token punctuation">.</span>Value<span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
array <span class="token operator">=</span> mp<span class="token punctuation">.</span>Array<span class="token punctuation">(</span><span class="token string">&#39;i&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>变量的类型值可以参考<a href="https://docs.python.org/zh-cn/3/library/array.html#module-array" target="_blank" rel="noopener noreferrer">标准库文档</a>。</p><h2 id="7-lock-锁" tabindex="-1"><a class="header-anchor" href="#7-lock-锁"><span>7. <code>Lock</code> 锁</span></a></h2><p>使用锁：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> multiprocessing <span class="token keyword">as</span> mp
<span class="token keyword">import</span> time
<span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>synchronize <span class="token keyword">import</span> Lock


<span class="token keyword">def</span> <span class="token function">job</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> lock<span class="token punctuation">:</span> Lock<span class="token punctuation">)</span><span class="token punctuation">:</span>
    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
        v<span class="token punctuation">.</span>value <span class="token operator">+=</span> num
        <span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">multicore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    lock <span class="token operator">=</span> mp<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>
    val <span class="token operator">=</span> mp<span class="token punctuation">.</span>Value<span class="token punctuation">(</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    p1 <span class="token operator">=</span> mp<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>job<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token punctuation">)</span>
    p2 <span class="token operator">=</span> mp<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>job<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token punctuation">)</span>
    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    multicore<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22);function m(v,b){const s=e("router-link");return c(),l("div",null,[k,n("nav",r,[n("ul",null,[n("li",null,[a(s,{to:"#1-进程"},{default:p(()=>[t("1. 进程")]),_:1})]),n("li",null,[a(s,{to:"#2-创建进程"},{default:p(()=>[t("2. 创建进程")]),_:1})]),n("li",null,[a(s,{to:"#3-使用-queue-进行进程间通信"},{default:p(()=>[t("3. 使用 Queue 进行进程间通信")]),_:1})]),n("li",null,[a(s,{to:"#4-多线程与多进程对比"},{default:p(()=>[t("4. 多线程与多进程对比")]),_:1})]),n("li",null,[a(s,{to:"#5-pool-进程池"},{default:p(()=>[t("5. Pool 进程池")]),_:1})]),n("li",null,[a(s,{to:"#6-共享内存"},{default:p(()=>[t("6. 共享内存")]),_:1})]),n("li",null,[a(s,{to:"#7-lock-锁"},{default:p(()=>[t("7. Lock 锁")]),_:1})])])]),d])}const h=o(i,[["render",m],["__file","multiprocess.html.vue"]]),_=JSON.parse('{"path":"/posts/python/basic/concurrent/multiprocess/multiprocess.html","title":"Python 多进程","lang":"zh-CN","frontmatter":{"description":"Python 多进程 1. 进程 多进程可以避免 Python 多线程的劣势，充分发挥多核优势。 2. 创建进程 创建过程与多线程一致： 3. 使用 Queue 进行进程间通信 使用 multiprocessing.Queue 返回输出的值： 4. 多线程与多进程对比 性能对比 5. Pool 进程池 apply_async() 函数一次使用一个值 6...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/posts/python/basic/concurrent/multiprocess/multiprocess.html"}],["meta",{"property":"og:site_name","content":"鸭梨"}],["meta",{"property":"og:title","content":"Python 多进程"}],["meta",{"property":"og:description","content":"Python 多进程 1. 进程 多进程可以避免 Python 多线程的劣势，充分发挥多核优势。 2. 创建进程 创建过程与多线程一致： 3. 使用 Queue 进行进程间通信 使用 multiprocessing.Queue 返回输出的值： 4. 多线程与多进程对比 性能对比 5. Pool 进程池 apply_async() 函数一次使用一个值 6..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T04:16:18.000Z"}],["meta",{"property":"article:author","content":"Alex Sun"}],["meta",{"property":"article:modified_time","content":"2024-05-27T04:16:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python 多进程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-27T04:16:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alex Sun\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. 进程","slug":"1-进程","link":"#1-进程","children":[]},{"level":2,"title":"2. 创建进程","slug":"2-创建进程","link":"#2-创建进程","children":[]},{"level":2,"title":"3. 使用 Queue 进行进程间通信","slug":"3-使用-queue-进行进程间通信","link":"#3-使用-queue-进行进程间通信","children":[]},{"level":2,"title":"4. 多线程与多进程对比","slug":"4-多线程与多进程对比","link":"#4-多线程与多进程对比","children":[]},{"level":2,"title":"5. Pool 进程池","slug":"5-pool-进程池","link":"#5-pool-进程池","children":[]},{"level":2,"title":"6. 共享内存","slug":"6-共享内存","link":"#6-共享内存","children":[]},{"level":2,"title":"7. Lock 锁","slug":"7-lock-锁","link":"#7-lock-锁","children":[]}],"git":{"createdTime":1716783378000,"updatedTime":1716783378000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":0.58,"words":175},"filePathRelative":"posts/python/basic/concurrent/multiprocess/multiprocess.md","localizedDate":"2024年5月27日","excerpt":"\\n\\n<h2>1. 进程</h2>\\n<p>多进程可以避免 Python 多线程的劣势，充分发挥多核优势。</p>\\n<h2>2. 创建进程</h2>\\n<p>创建过程与多线程一致：</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> multiprocessing <span class=\\"token keyword\\">as</span> mp\\n\\n\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">job</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">,</span> b<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"a:\\"</span><span class=\\"token punctuation\\">,</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"b:\\"</span><span class=\\"token punctuation\\">,</span> b<span class=\\"token punctuation\\">)</span>\\n\\n\\n<span class=\\"token keyword\\">if</span> __name__ <span class=\\"token operator\\">==</span> <span class=\\"token string\\">\\"__main__\\"</span><span class=\\"token punctuation\\">:</span>\\n    p1 <span class=\\"token operator\\">=</span> mp<span class=\\"token punctuation\\">.</span>Process<span class=\\"token punctuation\\">(</span>target<span class=\\"token operator\\">=</span>job<span class=\\"token punctuation\\">,</span> args<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    p1<span class=\\"token punctuation\\">.</span>start<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    p1<span class=\\"token punctuation\\">.</span>join<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}');export{h as comp,_ as data};

import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as l,c as u,b as n,a as s,w as t,d as a,e}from"./app-DhX54nll.js";const r={},d=e('<h1 id="python-异步编程" tabindex="-1"><a class="header-anchor" href="#python-异步编程"><span>Python 异步编程</span></a></h1><div class="hint-container info"><p class="hint-container-title">转载</p><p>原文链接：<a href="https://www.ruanyifeng.com/blog/2019/11/python-asyncio.html" target="_blank" rel="noopener noreferrer">阮一峰的网络日志：Python 异步编程入门</a></p></div>',2),k={class:"table-of-contents"},y=e(`<p>Python 3.4 引入了 <code>asyncio</code> 模块，增加了异步编程，跟 JavaScript 的 <code>async/await</code> 极为类似，大大方便了异步任务的处理。</p><h2 id="python-的异步编程" tabindex="-1"><a class="header-anchor" href="#python-的异步编程"><span>Python 的异步编程</span></a></h2><p>历史上，Python 并不支持专门的异步编程语法，因为不需要。</p><p>有了多线程（<code>threading</code>）和多进程（<code>multiprocessing</code>），就没必要一定支持异步了。如果一个线程（或进程）阻塞，新建其他线程（或进程）就可以了，程序不会卡死。</p><p>但是，多线程有 “线程竞争” 的问题，处理起来很复杂，还涉及加锁。对于简单的异步任务来说（比如与网页互动），写起来很麻烦。</p><h2 id="asyncio-的设计" tabindex="-1"><a class="header-anchor" href="#asyncio-的设计"><span>asyncio 的设计</span></a></h2><p><code>asyncio</code> 模块最大特点就是，只存在一个线程。</p><p>由于只有一个线程，就不可能多个任务同时运行。<code>asyncio</code> 是 <strong>多任务合作</strong> 模式（cooperative multitasking），允许异步任务交出执行权给其他任务，等到其他任务完成，再收回执行权继续往下执行，这和 JavaScript 也是一样的。</p><p>由于代码的执行权在多个任务之间交换，所以看上去好像多个任务同时运行，其实底层只有一个线程，多个任务分享运行时间。</p><p><code>asyncio</code> 模块在单线程上启动一个事件循环（event loop），时刻监听新进入循环的事件，加以处理，并不断重复这个过程，直到异步任务结束。</p><h2 id="asyncio-api" tabindex="-1"><a class="header-anchor" href="#asyncio-api"><span>asyncio API</span></a></h2><p>下面介绍 <code>asyncio</code> 模块最主要的几个 API。注意，必须使用 Python 3.7 或更高版本，早期的语法已经改变了。</p><p>第一步，<code>import</code> 导入 <code>asyncio</code> 模块。</p><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
</code></pre></div><p>第二步，函数前面加上 <code>async</code> 关键字，就变成了 <code>async</code> 函数。这种函数最大特点是执行可以暂停，交出执行权。</p><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre></div><p>第三步，在 <code>async</code> 函数内部的异步任务前面，加上 <code>await</code> 命令。</p><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre></div><p>上面代码中，<code>asyncio.sleep(1)</code> 方法可以生成一个异步任务，休眠 1 秒钟然后结束。</p><p>执行引擎遇到 <code>await</code> 命令，就会在异步任务开始执行之后，暂停当前 <code>async</code> 函数的执行，把执行权交给其他任务。等到异步任务结束，再把执行权交回 <code>async</code> 函数，继续往下执行。</p><p>第四步，<code>async.run()</code> 方法加载 <code>async</code> 函数，启动事件循环。</p><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>上面代码中，<code>asyncio.run()</code> 在事件循环上监听 <code>async</code> 函数 <code>main()</code> 的执行。等到 <code>main()</code> 执行完了，事件循环才会终止。</p><h2 id="async-函数示例" tabindex="-1"><a class="header-anchor" href="#async-函数示例"><span>async 函数示例</span></a></h2><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;One&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Two&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>执行结果：</p><div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ python async.py
One
One
One
Two
Two
Two
</code></pre></div><p>脚本总的运行时间是 1 秒，而它们同步执行的时间是 3 秒。</p>`,28),v=n("a",{href:"https://www.cnblogs.com/traditional/p/17377569.html",target:"_blank",rel:"noopener noreferrer"},"https://www.cnblogs.com/traditional/p/17377569.html",-1),h=e(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> functools

<span class="token keyword">def</span> <span class="token function">set_event</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span> asyncio<span class="token punctuation">.</span>Event<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;setting event in callback&quot;</span><span class="token punctuation">)</span>
    event<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">coro1</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span> asyncio<span class="token punctuation">.</span>Event<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;coro1 waiting for event&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> event<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;coro1 triggered&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">coro2</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span> asyncio<span class="token punctuation">.</span>Event<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;coro2 waiting for event&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> event<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;coro2 triggered&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>loop<span class="token punctuation">:</span> asyncio<span class="token punctuation">.</span>AbstractEventLoop<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Create a shared event</span>
    event <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;event start state: {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    loop<span class="token punctuation">.</span>call_later<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span>set_event<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>coro1<span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">,</span> coro2<span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;event end state: {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

event_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    event_loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>event_loop<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    event_loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function m(g,w){const o=p("router-link"),c=p("Badge");return l(),u("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[s(o,{to:"#python-的异步编程"},{default:t(()=>[a("Python 的异步编程")]),_:1})]),n("li",null,[s(o,{to:"#asyncio-的设计"},{default:t(()=>[a("asyncio 的设计")]),_:1})]),n("li",null,[s(o,{to:"#asyncio-api"},{default:t(()=>[a("asyncio API")]),_:1})]),n("li",null,[s(o,{to:"#async-函数示例"},{default:t(()=>[a("async 函数示例")]),_:1})])])]),y,n("p",null,[s(c,{type:"danger",vertical:"inherit"},{default:t(()=>[a("TODO")]),_:1}),a(" 需要整理的文章："),v]),h])}const _=i(r,[["render",m],["__file","intro.html.vue"]]),P=JSON.parse('{"path":"/posts/python/basic/asyncio/intro.html","title":"Python 异步编程","lang":"zh-CN","frontmatter":{"description":"Python 异步编程 转载 原文链接：阮一峰的网络日志：Python 异步编程入门 Python 3.4 引入了 asyncio 模块，增加了异步编程，跟 JavaScript 的 async/await 极为类似，大大方便了异步任务的处理。 Python 的异步编程 历史上，Python 并不支持专门的异步编程语法，因为不需要。 有了多线程（thr...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/posts/python/basic/asyncio/intro.html"}],["meta",{"property":"og:site_name","content":"鸭梨"}],["meta",{"property":"og:title","content":"Python 异步编程"}],["meta",{"property":"og:description","content":"Python 异步编程 转载 原文链接：阮一峰的网络日志：Python 异步编程入门 Python 3.4 引入了 asyncio 模块，增加了异步编程，跟 JavaScript 的 async/await 极为类似，大大方便了异步任务的处理。 Python 的异步编程 历史上，Python 并不支持专门的异步编程语法，因为不需要。 有了多线程（thr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T04:16:18.000Z"}],["meta",{"property":"article:author","content":"Alex Sun"}],["meta",{"property":"article:modified_time","content":"2024-05-27T04:16:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python 异步编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-27T04:16:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alex Sun\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"Python 的异步编程","slug":"python-的异步编程","link":"#python-的异步编程","children":[]},{"level":2,"title":"asyncio 的设计","slug":"asyncio-的设计","link":"#asyncio-的设计","children":[]},{"level":2,"title":"asyncio API","slug":"asyncio-api","link":"#asyncio-api","children":[]},{"level":2,"title":"async 函数示例","slug":"async-函数示例","link":"#async-函数示例","children":[]}],"git":{"createdTime":1716783378000,"updatedTime":1716783378000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":2.75,"words":826},"filePathRelative":"posts/python/basic/asyncio/intro.md","localizedDate":"2024年5月27日","excerpt":"\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">转载</p>\\n<p>原文链接：<a href=\\"https://www.ruanyifeng.com/blog/2019/11/python-asyncio.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">阮一峰的网络日志：Python 异步编程入门</a></p>\\n</div>\\n\\n<p>Python 3.4 引入了 <code>asyncio</code> 模块，增加了异步编程，跟 JavaScript 的 <code>async/await</code> 极为类似，大大方便了异步任务的处理。</p>","autoDesc":true}');export{_ as comp,P as data};

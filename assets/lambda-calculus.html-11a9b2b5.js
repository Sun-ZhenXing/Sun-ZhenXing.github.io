import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as r,c as l,a as i,e as t,d as a,w as c,f as e,b as p}from"./app-32f6cd01.js";const h={},u=t("p",null,"本文是 λ 演算的介绍。",-1),f={class:"table-of-contents"},_=t("h2",{id:"1-什么是-λ-演算",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#1-什么是-λ-演算","aria-hidden":"true"},"#"),e(" 1. 什么是 λ 演算")],-1),x={href:"https://zh.wikipedia.org/wiki/%E9%98%BF%E9%9A%86%E4%BD%90%C2%B7%E9%82%B1%E5%A5%87",target:"_blank",rel:"noopener noreferrer"},m=t("sup",{class:"footnote-ref"},[t("a",{href:"#footnote1"},"[1]"),t("a",{class:"footnote-anchor",id:"footnote-ref1"})],-1),b=p(`<p>lambda 演算包括了建构 lambda 项，和对 lambda 项执行归约的操作。在最简单的 lambda 演算中，只使用以下的规则来建构 lambda 项：</p><table><thead><tr><th>语法</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>x</code></td><td>变量</td><td>用字符或字符串来表示参数或者数学上的值或者表示逻辑上的值</td></tr><tr><td><code>(λx.M)</code></td><td>抽象化</td><td>一个完整的函数定义（<code>M</code> 是一个 lambda 项），在表达式中的 <code>x</code> 都会绑定为变量 <code>x</code></td></tr><tr><td><code>(M N)</code></td><td>应用</td><td>将函数 <code>M</code> 作用于参数 <code>N</code>，<code>M</code> 和 <code>N</code> 是 lambda 项</td></tr></tbody></table><p>产生了诸如 <code>λf.λx.(f (f x))</code> 的表达式。如果表达式是明确而没有歧义的，则括号可以省略。</p><p>为了方便理解，我们使用 JavaScript 的箭头函数来表示 lambda 演算中的抽象化和应用：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token parameter">f</span> <span class="token operator">=&gt;</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="邱奇编码church-encoding" tabindex="-1"><a class="header-anchor" href="#邱奇编码church-encoding" aria-hidden="true">#</a> 邱奇编码（Church Encoding）</h2><p>为了更方便地进行下面的讨论，我们可以给一个λ项命名，例如：</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>swap := λx.λy.y x
</code></pre></div><p>那么</p><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>swap a b ≡ (λx.λy.y x) a b → b a
</code></pre></div><hr class="footnotes-sep">`,11),k={class:"footnotes"},g={class:"footnotes-list"},E={id:"footnote1",class:"footnote-item"},v={href:"https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97",target:"_blank",rel:"noopener noreferrer"},w=t("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function B(C,N){const o=s("router-link"),n=s("ExternalLinkIcon");return r(),l("div",null,[u,i(" more "),t("nav",f,[t("ul",null,[t("li",null,[a(o,{to:"#1-什么是-λ-演算"},{default:c(()=>[e("1. 什么是 λ 演算")]),_:1})]),t("li",null,[a(o,{to:"#邱奇编码church-encoding"},{default:c(()=>[e("邱奇编码（Church Encoding）")]),_:1})])])]),_,t("p",null,[e("λ 演算（lambda calculus，λ-calculus）是一套从数学逻辑中发展，以变量绑定和替换的规则，来研究函数如何抽象化定义、函数如何被应用以及递归的形式系统。它由数学家 "),t("a",x,[e("阿隆佐·邱奇"),a(n)]),e(" 在 20 世纪 30 年代首次发表。λ 演算作为一种广泛用途的计算模型，可以清晰地定义什么是一个可计算函数，而任何可计算函数都能以这种形式表达和求值，它能模拟单一磁带图灵机的计算过程；尽管如此，λ 演算强调的是变换规则的运用，而非实现它们的具体机器。"),m]),b,t("section",k,[t("ol",g,[t("li",E,[t("p",null,[e("Λ 演算，维基百科，"),t("a",v,[e("https://zh.wikipedia.org/wiki/Λ演算"),a(n)]),e(),w])])])])])}const V=d(h,[["render",B],["__file","lambda-calculus.html.vue"]]);export{V as default};

import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,b as n,a,w as t,e as r,d as e}from"./app-DhX54nll.js";const i={},u=n("h1",{id:"进制转换",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#进制转换"},[n("span",null,"进制转换")])],-1),k={class:"table-of-contents"},d=r(`<h2 id="1-字符串转换" tabindex="-1"><a class="header-anchor" href="#1-字符串转换"><span>1. 字符串转换</span></a></h2><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code>
</code></pre></div><h2 id="2-数组表示的任意进制" tabindex="-1"><a class="header-anchor" href="#2-数组表示的任意进制"><span>2. 数组表示的任意进制</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">convert_base</span><span class="token punctuation">(</span>number<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> base<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> number <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> base <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span>
            <span class="token string">&#39;&quot;number&quot; must be positive and &quot;base&quot; must be greater than 1&#39;</span>
        <span class="token punctuation">)</span>
    <span class="token keyword">if</span> number <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> base <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>number<span class="token punctuation">]</span>
    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span> number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        number<span class="token punctuation">,</span> mod <span class="token operator">=</span> <span class="token builtin">divmod</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> base<span class="token punctuation">)</span>
        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mod<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> res

<span class="token keyword">def</span> <span class="token function">from_list</span><span class="token punctuation">(</span>l<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> base<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> base <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&#39;&quot;base&quot; must be greater than 1&#39;</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> x <span class="token keyword">in</span> l<span class="token punctuation">:</span>
        res <span class="token operator">=</span> res <span class="token operator">*</span> base <span class="token operator">+</span> x
    <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function m(b,v){const s=o("router-link");return c(),l("div",null,[u,n("nav",k,[n("ul",null,[n("li",null,[a(s,{to:"#1-字符串转换"},{default:t(()=>[e("1. 字符串转换")]),_:1})]),n("li",null,[a(s,{to:"#2-数组表示的任意进制"},{default:t(()=>[e("2. 数组表示的任意进制")]),_:1})])])]),d])}const g=p(i,[["render",m],["__file","decimal-conversion.html.vue"]]),f=JSON.parse(`{"path":"/posts/python/basic/collections/decimal-conversion.html","title":"进制转换","lang":"zh-CN","frontmatter":{"description":"进制转换 1. 字符串转换 2. 数组表示的任意进制","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/posts/python/basic/collections/decimal-conversion.html"}],["meta",{"property":"og:site_name","content":"鸭梨"}],["meta",{"property":"og:title","content":"进制转换"}],["meta",{"property":"og:description","content":"进制转换 1. 字符串转换 2. 数组表示的任意进制"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T04:16:18.000Z"}],["meta",{"property":"article:author","content":"Alex Sun"}],["meta",{"property":"article:modified_time","content":"2024-05-27T04:16:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"进制转换\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-27T04:16:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alex Sun\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. 字符串转换","slug":"1-字符串转换","link":"#1-字符串转换","children":[]},{"level":2,"title":"2. 数组表示的任意进制","slug":"2-数组表示的任意进制","link":"#2-数组表示的任意进制","children":[]}],"git":{"createdTime":1716783378000,"updatedTime":1716783378000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":0.35,"words":105},"filePathRelative":"posts/python/basic/collections/decimal-conversion.md","localizedDate":"2024年5月27日","excerpt":"\\n\\n<h2>1. 字符串转换</h2>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code>\\n</code></pre></div><h2>2. 数组表示的任意进制</h2>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">def</span> <span class=\\"token function\\">convert_base</span><span class=\\"token punctuation\\">(</span>number<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">,</span> base<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token builtin\\">list</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">if</span> number <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span> <span class=\\"token keyword\\">or</span> base <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">raise</span> ValueError<span class=\\"token punctuation\\">(</span>\\n            <span class=\\"token string\\">'\\"number\\" must be positive and \\"base\\" must be greater than 1'</span>\\n        <span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">if</span> number <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span> <span class=\\"token keyword\\">or</span> base <span class=\\"token operator\\">==</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">[</span>number<span class=\\"token punctuation\\">]</span>\\n    res <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token keyword\\">while</span> number <span class=\\"token operator\\">!=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">:</span>\\n        number<span class=\\"token punctuation\\">,</span> mod <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">divmod</span><span class=\\"token punctuation\\">(</span>number<span class=\\"token punctuation\\">,</span> base<span class=\\"token punctuation\\">)</span>\\n        res<span class=\\"token punctuation\\">.</span>append<span class=\\"token punctuation\\">(</span>mod<span class=\\"token punctuation\\">)</span>\\n    res<span class=\\"token punctuation\\">.</span>reverse<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> res\\n\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">from_list</span><span class=\\"token punctuation\\">(</span>l<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">list</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> base<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">if</span> base <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">raise</span> ValueError<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'\\"base\\" must be greater than 1'</span><span class=\\"token punctuation\\">)</span>\\n    res <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span>\\n    <span class=\\"token keyword\\">for</span> x <span class=\\"token keyword\\">in</span> l<span class=\\"token punctuation\\">:</span>\\n        res <span class=\\"token operator\\">=</span> res <span class=\\"token operator\\">*</span> base <span class=\\"token operator\\">+</span> x\\n    <span class=\\"token keyword\\">return</span> res\\n</code></pre></div>","autoDesc":true}`);export{g as comp,f as data};

import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as k,b as s,a as t,w as a,d as i,e as o}from"./app-mQJDQ8JG.js";const r={},d=s("h1",{id:"python-ebnf-语言定义",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#python-ebnf-语言定义"},[s("span",null,"Python EBNF 语言定义")])],-1),c={class:"table-of-contents"},y=s("h2",{id:"1-python-语言定义",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#1-python-语言定义"},[s("span",null,"1. Python 语言定义")])],-1),g=s("code",null,"parso",-1),F=s("sup",{class:"footnote-ref"},[s("a",{href:"#footnote1"},"[1]"),s("a",{class:"footnote-anchor",id:"footnote-ref1"})],-1),u=o(`<p>例如 <a href="https://github.com/davidhalter/parso/blob/master/parso/python/grammar310.txt" target="_blank" rel="noopener noreferrer">Python 3.10 的语言定义</a> 可以从 GitHub 仓库内找到。</p><p>例如部分语句的定义：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">compound_stmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated | async_stmt</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">async_stmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;async&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> (funcdef | with_stmt | for_stmt)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">if_stmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;if&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> namedexpr_test &#39;:&#39; suite (&#39;elif&#39; namedexpr_test &#39;:&#39; suite)* [&#39;else&#39; &#39;:&#39; suite]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">while_stmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;while&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> namedexpr_test &#39;:&#39; suite [&#39;else&#39; &#39;:&#39; suite]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">for_stmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;for&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> exprlist &#39;in&#39; testlist &#39;:&#39; suite [&#39;else&#39; &#39;:&#39; suite]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">try_stmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">(&#39;try&#39; &#39;:&#39; suite</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">           ((except_clause &#39;:&#39; suite)+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;else&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;:&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> suite</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;finally&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;:&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> suite</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">           &#39;finally&#39; &#39;:&#39; suite))</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">with_stmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;with&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> with_item (&#39;,&#39; with_item)*  &#39;:&#39; suite</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">with_item</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">test [&#39;as&#39; expr]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># NB compile.c makes sure that the default except clause is last</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">except_clause</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;except&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;as&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">suite</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">simple_stmt | NEWLINE INDENT stmt+ DEDENT</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>parso</code> 的解析器通过解析 EBNF 获得对应版本的 Python 语言语法，然后通过解析 Python 代码来生成抽象语法树（AST）。</p><h2 id="2-ebnf-语法" tabindex="-1"><a class="header-anchor" href="#2-ebnf-语法"><span>2. EBNF 语法</span></a></h2><p><strong>巴科斯-诺尔范式</strong>（Extended Backus-Naur Form，EBNF）是一种用于描述计算机语言语法的元语言。它是 Backus-Naur Form（BNF）的扩展版本，提供了更多的元素和语法结构，以便更准确地描述一些复杂的语法规则。</p><p>EBNF 的语法规则由一系列规则组成，每个规则包含一个非终止符和一个或多个终止符或非终止符。非终止符表示语法规则的一部分，而终止符是语法规则的最基本的元素。EBNF 中的规则可以使用括号、方括号、花括号等符号来描述语法的结构。</p><p>EBNF 还支持一些元素，如 <code>|</code> 表示或，可以用于在一个语法规则中定义多个可能的选择；<code>+</code> 表示至少重复一次；<code>*</code> 表示零次或多次重复。这些元素使 EBNF 更加灵活，可以描述更复杂的语法规则。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">expression</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ::=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> term</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">&quot;+&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> &quot;-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">term}.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">term</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ::=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> factor</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">&quot;*&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> &quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">factor}.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">factor</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ::=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> &quot;(&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> expression</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;)&quot;.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">number</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ::=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> digit</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> {digit}.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">digit</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ::=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;0&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> &quot;1&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> &quot;2&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> &quot;3&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> &quot;4&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> &quot;5&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> &quot;6&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> &quot;7&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> &quot;8&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> &quot;9&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>EBNF 被广泛用于编程语言的设计和描述，它可以帮助程序员更容易地理解和实现语法规则。</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td><code>:</code></td><td>表示定义</td></tr><tr><td><code>[ ]</code></td><td>中是可选项</td></tr><tr><td><code>&#39; &#39;</code></td><td>引号里的内容表示字符</td></tr><tr><td><code>|</code></td><td>两边的是可选内容，或者的关系</td></tr><tr><td><code>*</code></td><td>表示零个或者多个</td></tr><tr><td><code>+</code></td><td>表示一个或者多个</td></tr></tbody></table><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>冷门话题，聊一聊 Python 的 EBNF，酷 Python，<a href="http://www.coolpython.net/informal_essay/21-04/py-ebnf.html" target="_blank" rel="noopener noreferrer">http://www.coolpython.net/informal_essay/21-04/py-ebnf.html</a> <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>`,13);function B(m,f){const n=e("router-link"),h=e("RouteLink");return p(),k("div",null,[d,s("nav",c,[s("ul",null,[s("li",null,[t(n,{to:"#1-python-语言定义"},{default:a(()=>[i("1. Python 语言定义")]),_:1})]),s("li",null,[t(n,{to:"#2-ebnf-语法"},{default:a(()=>[i("2. EBNF 语法")]),_:1})])])]),y,s("p",null,[i("我们在第三方库中介绍过一个 Python 语言解析器"),t(h,{to:"/posts/python/packages/compiler/parso.html"},{default:a(()=>[g]),_:1}),i("，它的核心就是一个 Python 语言定义，它是一个 EBNF 语法定义，用于解析 Python 代码。"),F]),u])}const E=l(r,[["render",B],["__file","python-ebnf.html.vue"]]),C=JSON.parse('{"path":"/posts/python/basic/collections/python-ebnf.html","title":"Python EBNF 语言定义","lang":"zh-CN","frontmatter":{"description":"Python EBNF 语言定义 1. Python 语言定义 我们在第三方库中介绍过一个 Python 语言解析器，它的核心就是一个 Python 语言定义，它是一个 EBNF 语法定义，用于解析 Python 代码。[1] 例如 Python 3.10 的语言定义 可以从 GitHub 仓库内找到。 例如部分语句的定义： parso 的解析器通过解...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/posts/python/basic/collections/python-ebnf.html"}],["meta",{"property":"og:site_name","content":"鸭梨"}],["meta",{"property":"og:title","content":"Python EBNF 语言定义"}],["meta",{"property":"og:description","content":"Python EBNF 语言定义 1. Python 语言定义 我们在第三方库中介绍过一个 Python 语言解析器，它的核心就是一个 Python 语言定义，它是一个 EBNF 语法定义，用于解析 Python 代码。[1] 例如 Python 3.10 的语言定义 可以从 GitHub 仓库内找到。 例如部分语句的定义： parso 的解析器通过解..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T04:16:18.000Z"}],["meta",{"property":"article:author","content":"Alex Sun"}],["meta",{"property":"article:modified_time","content":"2024-05-27T04:16:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python EBNF 语言定义\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-27T04:16:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alex Sun\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. Python 语言定义","slug":"1-python-语言定义","link":"#1-python-语言定义","children":[]},{"level":2,"title":"2. EBNF 语法","slug":"2-ebnf-语法","link":"#2-ebnf-语法","children":[]}],"git":{"createdTime":1716783378000,"updatedTime":1716783378000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":2.11,"words":634},"filePathRelative":"posts/python/basic/collections/python-ebnf.md","localizedDate":"2024年5月27日","excerpt":"\\n\\n<h2>1. Python 语言定义</h2>\\n<p>我们在第三方库中介绍过一个 Python 语言解析器<a href=\\"/posts/python/packages/compiler/parso.html\\" target=\\"_blank\\"><code>parso</code></a>，它的核心就是一个 Python 语言定义，它是一个 EBNF 语法定义，用于解析 Python 代码。<sup class=\\"footnote-ref\\"><a href=\\"#footnote1\\">[1]</a><a class=\\"footnote-anchor\\" id=\\"footnote-ref1\\"></a></sup></p>","autoDesc":true}');export{E as comp,C as data};

import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as o,e as r}from"./app-DhX54nll.js";const n={},a=r('<h1 id="python-协程" tabindex="-1"><a class="header-anchor" href="#python-协程"><span>Python 协程</span></a></h1><div class="hint-container info"><p class="hint-container-title">参考</p><p><a href="https://docs.python.org/zh-cn/3/glossary.html#term-coroutine" target="_blank" rel="noopener noreferrer">官方文档术语对照表</a></p></div><h2 id="1-协程" tabindex="-1"><a class="header-anchor" href="#1-协程"><span>1. 协程</span></a></h2><p>协程是子例程的更一般形式。</p><p>子例程可以在某一点进入并在另一点退出。协程则可以在许多不同的点上进入、退出和恢复。它们可通过 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-def" target="_blank" rel="noopener noreferrer">async def</a> 语句来实现。参见 <a href="https://www.python.org/dev/peps/pep-0492" target="_blank" rel="noopener noreferrer">PEP 492</a> 。</p><ul><li><em>@3.5+</em> <strong>协程</strong>（coroutine）可以在多个位置上挂起和恢复执行</li><li><code>await</code> 表达式，<code>async for</code> 以及 <code>async with</code> 只能在协程函数体中使用</li><li>使用 <code>async def</code> 语法定义的函数总是为协程函数，即使它们不包含 <code>await</code> 或 <code>async</code> 关键字</li><li>在协程函数体中使用 <code>yield from</code> 表达式将引发 <code>SyntaxError</code></li></ul><p>详细解释见 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#coroutines" target="_blank" rel="noopener noreferrer">官方文档语言参考手册</a>。</p><h2 id="2-协程函数" tabindex="-1"><a class="header-anchor" href="#2-协程函数"><span>2. 协程函数</span></a></h2><p>返回一个 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-coroutine" target="_blank" rel="noopener noreferrer"><code>Coroutine</code></a> 对象的函数。</p><p>协程函数可通过 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-def" target="_blank" rel="noopener noreferrer"><code>async def</code></a> 语句来定义，并可能包含 <a href="https://docs.python.org/zh-cn/3/reference/expressions.html#await" target="_blank" rel="noopener noreferrer"><code>await</code></a>、<a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-for" target="_blank" rel="noopener noreferrer"><code>async for</code></a> 和 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-with" target="_blank" rel="noopener noreferrer"><code>async with</code></a> 关键字。这些特性是由 <a href="https://www.python.org/dev/peps/pep-0492" target="_blank" rel="noopener noreferrer">PEP 492</a> 引入的。</p><h2 id="3-pep-492" tabindex="-1"><a class="header-anchor" href="#3-pep-492"><span>3. PEP 492</span></a></h2><p>PEP 是 Python 语言发展的提案。</p><p><a href="https://www.python.org/dev/peps/pep-0492" target="_blank" rel="noopener noreferrer">PEP 492</a> 提出使用 <code>async</code> 和 <code>await</code> 语法实现协程，将协程作为 Python 中的一个正式的单独概念，并增加相应的支持语法。</p><p>该提案在 Python 3.5 版本实现。</p>',14),c=[a];function p(s,h){return t(),o("div",null,c)}const d=e(n,[["render",p],["__file","coroutine.html.vue"]]),y=JSON.parse('{"path":"/posts/python/basic/asyncio/coroutine.html","title":"Python 协程","lang":"zh-CN","frontmatter":{"description":"Python 协程 参考 官方文档术语对照表 1. 协程 协程是子例程的更一般形式。 子例程可以在某一点进入并在另一点退出。协程则可以在许多不同的点上进入、退出和恢复。它们可通过 async def 语句来实现。参见 PEP 492 。 @3.5+ 协程（coroutine）可以在多个位置上挂起和恢复执行 await 表达式，async for 以及 ...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/posts/python/basic/asyncio/coroutine.html"}],["meta",{"property":"og:site_name","content":"鸭梨"}],["meta",{"property":"og:title","content":"Python 协程"}],["meta",{"property":"og:description","content":"Python 协程 参考 官方文档术语对照表 1. 协程 协程是子例程的更一般形式。 子例程可以在某一点进入并在另一点退出。协程则可以在许多不同的点上进入、退出和恢复。它们可通过 async def 语句来实现。参见 PEP 492 。 @3.5+ 协程（coroutine）可以在多个位置上挂起和恢复执行 await 表达式，async for 以及 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T04:16:18.000Z"}],["meta",{"property":"article:author","content":"Alex Sun"}],["meta",{"property":"article:modified_time","content":"2024-05-27T04:16:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python 协程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-27T04:16:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alex Sun\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. 协程","slug":"1-协程","link":"#1-协程","children":[]},{"level":2,"title":"2. 协程函数","slug":"2-协程函数","link":"#2-协程函数","children":[]},{"level":2,"title":"3. PEP 492","slug":"3-pep-492","link":"#3-pep-492","children":[]}],"git":{"createdTime":1716783378000,"updatedTime":1716783378000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":1.18,"words":354},"filePathRelative":"posts/python/basic/asyncio/coroutine.md","localizedDate":"2024年5月27日","excerpt":"\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">参考</p>\\n<p><a href=\\"https://docs.python.org/zh-cn/3/glossary.html#term-coroutine\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">官方文档术语对照表</a></p>\\n</div>\\n<h2>1. 协程</h2>\\n<p>协程是子例程的更一般形式。</p>\\n<p>子例程可以在某一点进入并在另一点退出。协程则可以在许多不同的点上进入、退出和恢复。它们可通过 <a href=\\"https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-def\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">async def</a> 语句来实现。参见 <a href=\\"https://www.python.org/dev/peps/pep-0492\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">PEP 492</a> 。</p>","autoDesc":true}');export{d as comp,y as data};

import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as i,a as k,d as s,b as a,w as o,e as n,f as e}from"./app-0718dc96.js";const r="/assets/blockcode_ide-fa41ad10.png",d="/assets/right_degrees-f34bf09f.png",v="/assets/turtle_demo-4591f18b.png",m={},b=s("p",null,"第二章：Blockcode：一个可视化编程工具。",-1),f={class:"table-of-contents"},g={class:"hint-container info"},h=s("p",{class:"hint-container-title"},"原文信息",-1),w={href:"https://blog.csdn.net/code_for_fun/article/details/51898028",target:"_blank",rel:"noopener noreferrer"},y={href:"http://aosabook.org/en/500L/blockcode-a-visual-programming-toolkit.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://twitter.com/dethe",target:"_blank",rel:"noopener noreferrer"},j={href:"http://waterbearlang.com/",target:"_blank",rel:"noopener noreferrer"},T=s("p",null,"在基于块的编程语言中，你通过拖动和连接代表程序不同部分的块来进行编程。而在一般的编程语言中，你是通过键入字符来编程的。",-1),x=s("p",null,"学习编程可能很困难，因为一般编程语言对于拼写错误是零容忍的。大部分的编程语言都是大小写敏感的，并且语法比较晦涩，哪怕是少写一个分号都会拒绝运行程序。更有甚者，大部分的编程语言是基于英语的并且语法不能本地化。",-1),M=s("p",null,"相反，基于块的语言可以完全消除语法错误，你的程序仅仅可能发生逻辑错误。块语言也更加直观，你可以在块列表中看到所有的程序构件和语言库。更有甚者，块可以被本地化任意的人类语言而不用改变编程语言的含义。",-1),S=s("figure",null,[s("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),D={href:"http://www.lego.com/en-us/mindstorms/",target:"_blank",rel:"noopener noreferrer"},C={href:"http://www.alice.org/index.php",target:"_blank",rel:"noopener noreferrer"},B={href:"http://education.mit.edu/projects/starlogo-tng",target:"_blank",rel:"noopener noreferrer"},E={href:"http://scratch.mit.edu/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://developers.google.com/blockly/",target:"_blank",rel:"noopener noreferrer"},L={href:"http://appinventor.mit.edu/explore/",target:"_blank",rel:"noopener noreferrer"},H={href:"http://www.tynker.com/",target:"_blank",rel:"noopener noreferrer"},I={href:"http://waterbearlang.com/",target:"_blank",rel:"noopener noreferrer"},R=s("p",null,"该语言选择使用的龟图（turtle graphics）可以追溯到 Logo 语言，这是一个特地教导儿童编程的语言。许多基于块的语言都包括了龟图，该主题很适合用于一个类似被严格限制的项目。",-1),A={href:"https://dethe.github.io/500lines/blockcode/",target:"_blank",rel:"noopener noreferrer"},F=e('<h2 id="目标和结构" tabindex="-1"><a class="header-anchor" href="#目标和结构" aria-hidden="true">#</a> 目标和结构</h2><p>通过本章的代码我希望能实现几点。首先，我要为龟图（turtle graphics）实现一个块语言，通过简单的拖放块，你可以编写程序创建图案，我想通过简单的 HTML，CSS 和 JavaScript 来实现。其次，我要展示如何将块构想成为一个框架，服务于其他语言而不仅仅是简单的 <strong>海龟语言</strong>（turtle language）。</p><p>为了做到这点，我将海龟语言相关部分全部封装到了一个文件（<code>turtle.js</code>），这样我就可以轻易替换成其他文件。除此之外的任何代码都不是特定于海龟语言；其他的代码全部用来处理块（<code>blocks.js</code> 和 <code>menu.js</code>）或者是通用的 Web 工具（<code>util.js</code>，<code>drag.js</code>，<code>file.js</code>）。这是目标，然后为了使得工程尽量小型化，一些工具不是足够通用而与块相关。</p><p>在编写一个块语言时，让我惊奇的是，语言就是它自己的 IDE。你不能使用自己喜欢的编辑器；IDE 的设计要和块语言同步进行。这样有利有弊。好处是所有人都使用一致的环境从而避免的关于编辑器优劣的争论。坏处是会影响构建语言。</p><h3 id="脚本的本质" tabindex="-1"><a class="header-anchor" href="#脚本的本质" aria-hidden="true">#</a> 脚本的本质</h3><p>和任何其他语言的脚本一样，一个 Blockcode 脚本就是一系列的操作。对于 Blockcode 脚本来说，其中包含了一些 HTML 元素，脚本迭代执行每个 HTML 元素对应的 JavaScript 函数。一些块包含（负责执行）其他的块，还有一些块包含一些传递给函数的数值。</p><p>在大部分（基于文本）的语言中，一个脚本的执行会经历多个阶段：一个词法分析器将文本解析为 tokens，语法分析器将 tokens 组织成抽象语法树，然后根据语言的不同，可能会编译为机器码或者输入到解析器中。这是一个简化的描述；事实上可能会有更多步骤。对于 Blockcode，块的布局本身就代表了抽象语法树，因为我们可以免去词法分析和语法分析阶段。我们使用 <strong>访问者模式</strong>（Visitor Pattern）来迭代每个块并执行每个块预定义的函数来运行整个程序。</p><p>我们完全可以添加额外的步骤来将 Blockcode 变得更像一般的语音。除了简单的调用 JavaScript 函数外，我们还可以将 <code>turtle.js</code> 替换为一个能产生字节码的块语言，运行于其他的虚拟机。或者产生 C++ 代码用以编译运行。存在能够生成 Java 字节码的块语言（作为 Waterbear 项目的一部分），用于 Arduino 编程和为 Raspberry Pi 上运行的 Minecraft 编写脚本。</p><h3 id="web-应用" tabindex="-1"><a class="header-anchor" href="#web-应用" aria-hidden="true">#</a> Web 应用</h3><p>为了让更多的人使用该工具，我们使用了 Web。该工具使用 HTML，CSS 和 JavaScript 编写，因为可以运行在大部分的浏览器和平台。</p><p>现代 Web 浏览器是一个强大的平台，提供了构建伟大软件的丰富工具。如果一些实现变得太过复杂，这就释放了一种信号，那就是我没有按照 Web 的方式来做，如果可能我就会试着使用浏览器工具来做得更好。</p><p>Web 应用和传统桌面应用或者服务器应用的一个重大的区别就是它没有 <code>main</code> 函数或者其他的入口。也没有显式地循环，因为这些已经被浏览器内置了。我们所有的代码都在加载的时候被分析和执行，在这个过程中我们可以对感兴趣的事件注册监听器用来和用户互动。在初次执行后，所有后续的互动都在相应事件中注册的回调中进行，要么是类似鼠标移动的事件，或者是设置的定时器。浏览器并没有暴露主要的线程（仅仅是共享的工作线程）。</p><h2 id="代码分析" tabindex="-1"><a class="header-anchor" href="#代码分析" aria-hidden="true">#</a> 代码分析</h2><p>贯穿本项目始终，我都试着使用了最佳实践。每个 JavaScript 文件都被包含在一个函数中，从而避免变量泄露到全局环境中。如果需要暴露变量给其他文件，那么每个文件中根据文件名只定义单个 <code>global</code>，所有需要暴露的函数都在其中。这些都在接近文件尾部进行放置，接着就是该文件定义的各种事件处理器，因而只需要看一眼文件的末尾就能知道该文件定义的事件处理器和导出的函数。</p>',14),P={href:"http://webcomponents.org/",target:"_blank",rel:"noopener noreferrer"},W={href:"https://leanpub.com/javascript-allonge/read",target:"_blank",rel:"noopener noreferrer"},N=e('<p>项目中有八个源文件，<code>index.html</code> 和 <code>blocks.css</code> 是应用的基本结构和样式因而不加讨论。还有两个 JavaScript 文件也不过多讨论：<code>util.js</code> 包含了一些工具函数，<code>file.js</code> 用于加载和保存文件并且序列化脚本。</p><p>剩下这些文件：</p><ul><li><code>blocks.js</code> 是块语言的抽象表示</li><li><code>drag.js</code> 实现了语言的关键交互：允许用户从可选块（菜单）中拖拽块并组装成程序（脚本）</li><li><code>menu.js</code> 包含了一些工具代码并且负责实际地执行用户程序</li><li><code>turtle.js</code> 定义了块语言的特定细节（turtle graphics）并且初始化特定的块。如果需要定义不同的块语言，那么就替换该文件</li></ul><h3 id="blocks-js" tabindex="-1"><a class="header-anchor" href="#blocks-js" aria-hidden="true">#</a> blocks.js</h3><p>每一个块由一些 HTML 元素组成，由 CSS 设置样式，由一些 JavaScript 时间处理器处理拖拽并且修改输入参数。<code>blocks.js</code> 文件用于创建并管理这些元素，并且将它们组成单一的对象。当块被加入到菜单中时，绑定了一个 JavaScript 函数用来实现语言，因而脚本中的每个块在脚本执行的时候都要能找到其对应的函数并调用。</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>块有两种结构。一种拥有一个数值参数（具有默认值），还有一种作为其他块的容器。这些貌似很有限制，然而在一个大的系统中可以改进。在 Waterbear 中还有表达式块，可以作为参数进行传递；可以支持多个不同类型的值。在当前的状况下，我们试试只有一种类型的参数能干些什么。</p><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- The HTML structure of a block --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>block<span class="token punctuation">&quot;</span></span> <span class="token attr-name">draggable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Right<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    Right
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>number<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    degrees
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>需要注意的是，脚本中的块和菜单中的块没有区别。只有拖拽时会判断块是从哪儿拖出来的，脚本只会运行脚本区的块，然而它们本质上是一样的结构，这就意味着从菜单中向脚本区拖动块的时候可以进行克隆。</p><p><code>createBlock(name, value, contents)</code> 函数返回一个代表块的 DOM 元素，并且在 DOM 中填充了各种内部元素，可以直接插入到 <code>document</code> 中。这可以用于向菜单区添加块，也可以用于从文件或 <code>localStorage</code> 中恢复块到脚本区。这个函数是专为 Blockcode 语言编写的，如果传入的 <code>value</code> 参数有值，那么就假定这是一个数值，并且创建一个 <code>number</code> 类型的 <code>input</code> 元素。该函数被限制用于 Blockcode，如果要扩展块以支持其他类型的参数，则需要更改代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createBlock</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> contents</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> item <span class="token operator">=</span> <span class="token function">elem</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token string-property property">&#39;class&#39;</span><span class="token operator">:</span> <span class="token string">&#39;block&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">draggable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string-property property">&#39;data-name&#39;</span><span class="token operator">:</span> name <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>name<span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        item<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">elem</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        item<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>
            <span class="token function">elem</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;class&#39;</span><span class="token operator">:</span> <span class="token string">&#39;container&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> contents<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">block</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">createBlock</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> contents <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Add units (degrees, etc.) specifier</span>
        item<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span> <span class="token operator">+</span> contents<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> item<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们有一些将块作为 DOM 处理的工具函数：</p><ul><li><code>blockContents(block)</code> 返回容器块的子块。如果参数是容器块则以列表的形式返回子块，否则返回 <code>null</code></li><li><code>blockValue(block)</code> 如果块中包含一个 <code>number</code> 类型的 <code>&lt;input&gt;</code> 则返回 <code>&lt;input&gt;</code> 的值，否则返回 <code>null</code></li><li><code>blockScript(block)</code> 返回块的 JSON 形式，便于序列化。其后方便恢复</li><li><code>runBlocks(blocks)</code> 执行块数组中的所有块</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">blockContents</span><span class="token punctuation">(</span><span class="token parameter">block</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> container <span class="token operator">=</span> block<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.container&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> container <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">blockValue</span><span class="token punctuation">(</span><span class="token parameter">block</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> input <span class="token operator">=</span> block<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> input <span class="token operator">?</span> <span class="token function">Number</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">blockUnits</span><span class="token punctuation">(</span><span class="token parameter">block</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>block<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>
        block<span class="token punctuation">.</span>lastChild<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> Node<span class="token punctuation">.</span><span class="token constant">TEXT_NODE</span> <span class="token operator">&amp;&amp;</span>
        block<span class="token punctuation">.</span>lastChild<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> block<span class="token punctuation">.</span>lastChild<span class="token punctuation">.</span>textContent<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">blockScript</span><span class="token punctuation">(</span><span class="token parameter">block</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> script <span class="token operator">=</span> <span class="token punctuation">[</span>block<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token function">blockValue</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        script<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">blockValue</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> contents <span class="token operator">=</span> <span class="token function">blockContents</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> units <span class="token operator">=</span> <span class="token function">blockUnits</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>contents<span class="token punctuation">)</span> <span class="token punctuation">{</span> script<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>contents<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>blockScript<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>units<span class="token punctuation">)</span> <span class="token punctuation">{</span> script<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>units<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">return</span> script<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">notNull</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> notNull <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">runBlocks</span><span class="token punctuation">(</span><span class="token parameter">blocks</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    blocks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">block</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;run&#39;</span><span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="drag-js" tabindex="-1"><a class="header-anchor" href="#drag-js" aria-hidden="true">#</a> drag.js</h3><p><code>drag.js</code> 实现了菜单区和脚本区的交互，用于将静态的 HTML 块转变为动态的编程语言。用户从菜单区拖动块到脚本区来建构程序，系统执行脚本区的块。</p>`,16),V={href:"http://www.html5rocks.com/en/tutorials/dnd/basics/",target:"_blank",rel:"noopener noreferrer"},O=e(`<p>文件开头定义了一些变量。当我们拖动时，需要在拖动的不同阶段的回调中引用它们。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> dragTarget <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 正在拖动的块</span>
<span class="token keyword">var</span> dragType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 从菜单中还是脚本中拖动？</span>
<span class="token keyword">var</span> scriptBlocks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 脚本区中的块</span>
</code></pre></div><p>根据拖动的起始点和结束位置，拖放会有不同的效果：</p><ul><li>从脚本区拖放到菜单区则删除 <code>dragTarget</code>（从脚本区中删除块）</li><li>从脚本区拖放到脚本区则移动 <code>dragTarget</code>（在脚本区中移动现有块）</li><li>从菜单区拖放到脚本区则复制 <code>dragTarget</code>（向脚本区中插入新块）</li><li>从菜单拖放到菜单，不做任何事</li></ul><p>在 <code>dragStart(evt)</code> 处理函数中我们开始跟踪块是从菜单拖放到脚本区还是相反，或者在脚本区内移动。我们还记录下了脚本区中所有没有被拖动的块，以便后来使用。<code>evt.dataTransfer.setData</code> 是用来处理浏览器和其他应用程序之间的拖放，这儿没有用上，仅仅是为了绕开一个 bug 才使用的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">dragStart</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">matches</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token string">&#39;.block&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matches</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token string">&#39;.menu .block&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dragType <span class="token operator">=</span> <span class="token string">&#39;menu&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        dragType <span class="token operator">=</span> <span class="token string">&#39;script&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    evt<span class="token punctuation">.</span>target<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;dragging&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dragTarget <span class="token operator">=</span> evt<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
    scriptBlocks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
        document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.script .block:not(.dragging)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// For dragging to take place in Firefox, we have to set this, even if</span>
    <span class="token comment">// we don&#39;t use it</span>
    evt<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">&#39;text/html&#39;</span><span class="token punctuation">,</span> evt<span class="token punctuation">.</span>target<span class="token punctuation">.</span>outerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matches</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token string">&#39;.menu .block&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        evt<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>effectAllowed <span class="token operator">=</span> <span class="token string">&#39;copy&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        evt<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>effectAllowed <span class="token operator">=</span> <span class="token string">&#39;move&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们正在拖动时， 可以在 <code>dragenter</code>、<code>dragover</code> 和 <code>dragout</code> 事件中添加一些视觉线索，例如高亮放置区等等。其中我们只使用了 <code>dragover</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">dragOver</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">matches</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token string">&#39;.menu, .menu *, .script, .script *, .content&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Necessary. Allows us to drop.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>evt<span class="token punctuation">.</span>preventDefault<span class="token punctuation">)</span> <span class="token punctuation">{</span> evt<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dragType <span class="token operator">===</span> <span class="token string">&#39;menu&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// See the section on the DataTransfer object.</span>
        evt<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>dropEffect <span class="token operator">=</span> <span class="token string">&#39;copy&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        evt<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>dropEffect <span class="token operator">=</span> <span class="token string">&#39;move&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们松开鼠标时会有一个 <code>drop</code> 事件，这就是见证奇迹的时刻。我们需要检查拖放的起始点，然后要么复制块，要么移动块，或者删除块。我们使用 <code>trigger()</code>（定义在 <code>util.js</code> 中）启动了一些自定义事件用来刷新脚本区。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">drop</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">matches</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token string">&#39;.menu, .menu *, .script, .script *&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> dropTarget <span class="token operator">=</span> <span class="token function">closest</span><span class="token punctuation">(</span>
        evt<span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token string">&#39;.script .container, .script .block, .menu, .script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> dropType <span class="token operator">=</span> <span class="token string">&#39;script&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matches</span><span class="token punctuation">(</span>dropTarget<span class="token punctuation">,</span> <span class="token string">&#39;.menu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> dropType <span class="token operator">=</span> <span class="token string">&#39;menu&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// stops the browser from redirecting.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>evt<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span> <span class="token punctuation">{</span> evt<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dragType <span class="token operator">===</span> <span class="token string">&#39;script&#39;</span> <span class="token operator">&amp;&amp;</span> dropType <span class="token operator">===</span> <span class="token string">&#39;menu&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;blockRemoved&#39;</span><span class="token punctuation">,</span> dragTarget<span class="token punctuation">.</span>parentElement<span class="token punctuation">,</span> dragTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dragTarget<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>dragTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dragType <span class="token operator">===</span> <span class="token string">&#39;script&#39;</span> <span class="token operator">&amp;&amp;</span> dropType <span class="token operator">===</span> <span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matches</span><span class="token punctuation">(</span>dropTarget<span class="token punctuation">,</span> <span class="token string">&#39;.block&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dropTarget<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>
                dragTarget<span class="token punctuation">,</span> dropTarget<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            dropTarget<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>dragTarget<span class="token punctuation">,</span> dropTarget<span class="token punctuation">.</span>firstChildElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;blockMoved&#39;</span><span class="token punctuation">,</span> dropTarget<span class="token punctuation">,</span> dragTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dragType <span class="token operator">===</span> <span class="token string">&#39;menu&#39;</span> <span class="token operator">&amp;&amp;</span> dropType <span class="token operator">===</span> <span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> newNode <span class="token operator">=</span> dragTarget<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newNode<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;dragging&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matches</span><span class="token punctuation">(</span>dropTarget<span class="token punctuation">,</span> <span class="token string">&#39;.block&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dropTarget<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>
                newNode<span class="token punctuation">,</span> dropTarget<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            dropTarget<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span> dropTarget<span class="token punctuation">.</span>firstChildElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;blockAdded&#39;</span><span class="token punctuation">,</span> dropTarget<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>dragEnd(evt)</code> 在鼠标松开时被调用，然而是在我们处理了 <code>drop</code> 事件之后。这儿我们可以进行一些清理，删除元素中的 <code>class</code>，重置以便下次拖放。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">_findAndRemoveClass</span><span class="token punctuation">(</span><span class="token parameter">klass</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> klass<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token punctuation">{</span> elem<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>klass<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">dragEnd</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">_findAndRemoveClass</span><span class="token punctuation">(</span><span class="token string">&#39;dragging&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_findAndRemoveClass</span><span class="token punctuation">(</span><span class="token string">&#39;over&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_findAndRemoveClass</span><span class="token punctuation">(</span><span class="token string">&#39;next&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="menu-js" tabindex="-1"><a class="header-anchor" href="#menu-js" aria-hidden="true">#</a> menu.js</h3><p>在文件 <code>menu.js</code> 中，块被绑定了执行时需要调用的函数，也包含了实际运行脚本区块的代码。每次脚本被修改后，会自动重新运行。</p><p>这里的菜单不是下拉式或者弹出式的，而是一个块的列表，从中你可以选择块，然后拖到脚本区。该文件就负责对菜单区进行设置，菜单区以一个提供循环功能的块（这不是海龟的一部分）开始。</p><p>使用一个文件收集分散的函数很有用，特别是项目还在开发的时候。保持房屋整洁的秘诀就是给杂乱的东西指定特定的地方存放，构建程序也是如此。对于归属不明确的部分，应该使用一个文件或者模块收集。当这个文件变得越来越大的时候，你就要注意了，应当将相关的函数抽取出来归并到一个单独的模块中（或者整合成一个更加通用的函数）。你不应该任由这个杂货区文件变得庞大，而仅仅将它作为一个临时放置区，直到你给其中的代码找到合理的归置之所。</p><p>我们会较多的使用 <code>menu</code> 和 <code>script</code>，因而保留它们的引用；没有必要每次都查找它们的 DOM。我们也会用到 <code>scriptRegistry</code>，它保存了菜单中块的脚本。我们简单的给菜单区中的块进行了命名，并进行了映射，不支持一个名字对应多个块也不支持重命名块。这种策略如果用在复杂的脚本环境中可能不够健壮。</p><p>我们使用 <code>scriptDirty</code> 来标识脚本区是否已被修改过了，因而可以避免反复执行脚本区。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> menu <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.menu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> scriptRegistry <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> scriptDirty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre></div><p>当我们想通知系统在下一个 <code>frame</code> 处理器中运行脚本，调用 <code>runSoon()</code> 将 <code>scriptDirty</code> 设置为 <code>true</code>。系统在每一个 <code>frame</code> 中调用 <code>run()</code>，除非 <code>scriptDirty</code> 被设置，否则立即返回。当 <code>scriptDirty</code> 被设置为 <code>true</code> 时，运行脚本区中所有的块，并且触发事件使得特定的语言处理相关任务。这样做将块和海龟语言进行了解耦，使得块可以被重用（或者也可以说语言可插拔）。</p><p>在执行脚本的时候，我们遍历每个块，调用它的 <code>runEach(evt)</code>，该方法会在块上添加一个 <code>class</code>（用于 CSS），然后找到并调用与块绑定的函数。如果我们减慢执行速度，你将看到每个块在执行时会被高亮。</p><p>下面的 <code>requestAnimationFrame</code> 是浏览器提供的用作动画的函数。它接受一个函数作为参数，然后在渲染下一帧（每秒 60 帧）的时候使用。具体得到多少帧取决于我们能多块的处理任务。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">runSoon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> scriptDirty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>scriptDirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        scriptDirty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        Block<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;beforeRun&#39;</span><span class="token punctuation">,</span> script<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> blocks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
            document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.script &gt; .block&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Block<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>blocks<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Block<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;afterRun&#39;</span><span class="token punctuation">,</span> script<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        Block<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;everyFrame&#39;</span><span class="token punctuation">,</span> script<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">runEach</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> elem <span class="token operator">=</span> evt<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">matches</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> <span class="token string">&#39;.script .block&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>elem<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;Define block&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    elem<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;running&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scriptRegistry<span class="token punctuation">[</span>elem<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    elem<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;running&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 <code>menuItem(name, fn, value, contents)</code> 向菜单中添加块，该函数接受一个普通块，然后给它绑定一个函数，并加入到菜单栏。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">menuItem</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> value<span class="token punctuation">,</span> units</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> item <span class="token operator">=</span> Block<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> units<span class="token punctuation">)</span><span class="token punctuation">;</span>
    scriptRegistry<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">;</span>
    menu<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> item<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>我们在此处定义 <code>repeat(block)</code>，而不是在海龟语言中，因为我们希望这个函数可以在不同的语言中通用。如果我们有了 <code>if</code> 块和读写变量，这些也应该放到这里，或者是一个单独的 <strong>语言转换</strong>（trans-language）模块，然而此时我们只有这一个通用的块。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token parameter">block</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> count <span class="token operator">=</span> Block<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> children <span class="token operator">=</span> Block<span class="token punctuation">.</span><span class="token function">contents</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Block<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">menuItem</span><span class="token punctuation">(</span><span class="token string">&#39;Repeat&#39;</span><span class="token punctuation">,</span> repeat<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="turtle-js" tabindex="-1"><a class="header-anchor" href="#turtle-js" aria-hidden="true">#</a> turtle.js</h3><p><code>turtle.js</code> 是 turtle 块语言的实现部分。它不被其他任何代码依赖。因而这一部分可以很轻易的替换。</p><figure><img src="`+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>海龟编程是图形编程的一种，由于 Logo 语言被大众所熟悉，简单的说就是一个携带着一只笔的龟头在屏幕上移动。你可以命令海龟头收起笔（不再画线，继续移动），放下笔（移动到哪儿，笔画到哪儿），移动指定数量步，或者转向多少度。仅仅依靠这些命令和循环，就可以画出静态图案。</p><p>在这个图形化版本中，我们有一些额外的块。技术上讲，我们并不需要 <code>turn right</code> 和 <code>turn left</code> 同时存在，因为拥有其中一个，那么另外一个可以使用负数完成。类似的 <code>move back</code> 也可以使用 <code>move forward</code> 加上负数解决。</p><p>上面的图案脚本，将两个循环放入另一个循环之中，然后给每个循环添加一个 <code>move forward</code> 和 <code>turn right</code>，然后调整参数，直到得到满意的图案。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token constant">PIXEL_RATIO</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> canvasPlaceholder <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.canvas-placeholder&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.canvas&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> cos <span class="token operator">=</span> Math<span class="token punctuation">.</span>cos<span class="token punctuation">,</span> sin <span class="token operator">=</span> Math<span class="token punctuation">.</span>sin<span class="token punctuation">,</span> sqrt <span class="token operator">=</span> Math<span class="token punctuation">.</span>sqrt<span class="token punctuation">,</span> <span class="token constant">PI</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token constant">DEGREE</span> <span class="token operator">=</span> <span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token constant">WIDTH</span><span class="token punctuation">,</span> <span class="token constant">HEIGHT</span><span class="token punctuation">,</span> position<span class="token punctuation">,</span> direction<span class="token punctuation">,</span> visible<span class="token punctuation">,</span> pen<span class="token punctuation">,</span> color<span class="token punctuation">;</span>
</code></pre></div><p><code>reset()</code> 函数将所有的状态变量恢复到默认状态。如果我们需要支持多个海龟头，可以将这些变量封装到一个对象中。<code>deg2rad(deg)</code> 函数用于将度转化为弧度，因为作图使用的是弧度。<code>drawTurtle()</code> 用于画海龟头自身，默认是一个简单的三角形。当然你可以自定义成更加华丽的海龟头。</p><p>注意 <code>drawTurtle</code> 函数使用了我们在海龟绘图中定义的一些基本操作。有时你不想在不同的抽象层之间重用代码，然而如果定义明确，这对于代码大小和性能是至关重要的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">recenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    direction <span class="token operator">=</span> <span class="token function">deg2rad</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// facing &quot;up&quot;</span>
    visible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    pen <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// when pen is true we draw, otherwise we move without drawing</span>
    color <span class="token operator">=</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">deg2rad</span><span class="token punctuation">(</span><span class="token parameter">degrees</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token constant">DEGREE</span> <span class="token operator">*</span> degrees<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">drawTurtle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> userPen <span class="token operator">=</span> pen<span class="token punctuation">;</span> <span class="token comment">// save pen state</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>visible<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">penUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">_moveForward</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">penDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_turn</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">_moveForward</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_turn</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">_moveForward</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_turn</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">_moveForward</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_turn</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">penUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">_moveForward</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>userPen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">penDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// restore pen state</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们有个专门的块用于画一个特定半径的圆。即使你可以使用 <code>move 1 right 1</code> 然后循环 360 次来画圆，毕竟这太麻烦了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token parameter">radius</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Math for this is from http://www.mathopenref.com/polygonradius.html</span>
    <span class="token keyword">var</span> userPen <span class="token operator">=</span> pen<span class="token punctuation">;</span> <span class="token comment">// save pen state</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>visible<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">penUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">_moveForward</span><span class="token punctuation">(</span><span class="token operator">-</span>radius<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">penDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_turn</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> steps <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>radius <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> theta <span class="token operator">=</span> <span class="token number">360</span> <span class="token operator">/</span> steps<span class="token punctuation">;</span>
        <span class="token keyword">var</span> side <span class="token operator">=</span> radius <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> steps<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_moveForward</span><span class="token punctuation">(</span>side <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> steps<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">_turn</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">_moveForward</span><span class="token punctuation">(</span>side<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">_turn</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">_moveForward</span><span class="token punctuation">(</span>side <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">_turn</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">penUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">_moveForward</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">penDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>userPen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">penDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// restore pen state</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们主要的基本函数是 <code>moveForward()</code>，处理了一些三角函数的运算工作，并且判断笔是否收起或放下。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">_moveForward</span><span class="token punctuation">(</span><span class="token parameter">distance</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> start <span class="token operator">=</span> position<span class="token punctuation">;</span>
    position <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token function">cos</span><span class="token punctuation">(</span>direction<span class="token punctuation">)</span> <span class="token operator">*</span> distance <span class="token operator">*</span> <span class="token constant">PIXEL_RATIO</span> <span class="token operator">+</span> start<span class="token punctuation">.</span>x<span class="token punctuation">,</span>
        <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token function">sin</span><span class="token punctuation">(</span>direction<span class="token punctuation">)</span> <span class="token operator">*</span> distance <span class="token operator">*</span> <span class="token constant">PIXEL_RATIO</span> <span class="token operator">+</span> start<span class="token punctuation">.</span>y
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span>lineStyle <span class="token operator">=</span> color<span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>start<span class="token punctuation">.</span>x<span class="token punctuation">,</span> start<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>x<span class="token punctuation">,</span> position<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>剩下大部分的海龟命名都可以使用上面定义的函数来轻松的实现。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">penUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> pen <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">penDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> pen <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">hideTurtle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> visible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">showTurtle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> visible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">forward</span><span class="token punctuation">(</span><span class="token parameter">block</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">_moveForward</span><span class="token punctuation">(</span>Block<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token parameter">block</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">_moveForward</span><span class="token punctuation">(</span><span class="token operator">-</span>Block<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">circle</span><span class="token punctuation">(</span><span class="token parameter">block</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">drawCircle</span><span class="token punctuation">(</span>Block<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">_turn</span><span class="token punctuation">(</span><span class="token parameter">degrees</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> direction <span class="token operator">+=</span> <span class="token function">deg2rad</span><span class="token punctuation">(</span>degrees<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token parameter">block</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">_turn</span><span class="token punctuation">(</span>Block<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token parameter">block</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">_turn</span><span class="token punctuation">(</span><span class="token operator">-</span>Block<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">recenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> position <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token constant">WIDTH</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token constant">HEIGHT</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们需要刷新状态，<code>clear()</code> 函数可以恢复初始状态。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&#39;white&#39;</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">WIDTH</span><span class="token punctuation">,</span> <span class="token constant">HEIGHT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>x<span class="token punctuation">,</span> position<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>当脚本初次加载时，我们使用 <code>reset()</code> 和 <code>clear()</code> 来初始化并画出海龟的头。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token function">onResize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">drawTurtle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>现在可以在 <code>menu.js</code> 文件中通过 <code>Menu.item()</code> 函数使用上面定义的函数，从而构建用户可以使用的块。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Menu<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token string">&#39;Left&#39;</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;degrees&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Menu<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token string">&#39;Right&#39;</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;degrees&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Menu<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token string">&#39;Forward&#39;</span><span class="token punctuation">,</span> forward<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;steps&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Menu<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token string">&#39;Back&#39;</span><span class="token punctuation">,</span> back<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;steps&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Menu<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token string">&#39;Circle&#39;</span><span class="token punctuation">,</span> circle<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;radius&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Menu<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token string">&#39;Pen up&#39;</span><span class="token punctuation">,</span> penUp<span class="token punctuation">)</span><span class="token punctuation">;</span>
Menu<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token string">&#39;Pen down&#39;</span><span class="token punctuation">,</span> penDown<span class="token punctuation">)</span><span class="token punctuation">;</span>
Menu<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token string">&#39;Back to center&#39;</span><span class="token punctuation">,</span> recenter<span class="token punctuation">)</span><span class="token punctuation">;</span>
Menu<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token string">&#39;Hide turtle&#39;</span><span class="token punctuation">,</span> hideTurtle<span class="token punctuation">)</span><span class="token punctuation">;</span>
Menu<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token string">&#39;Show turtle&#39;</span><span class="token punctuation">,</span> showTurtle<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><h3 id="为何不使用-mvc" tabindex="-1"><a class="header-anchor" href="#为何不使用-mvc" aria-hidden="true">#</a> 为何不使用 MVC？</h3><p>Model-View-Controller（MVC）对于 80 年代的 Smalltalk 程序来说是一个好的设计选择，现在也可以用于一些 Web 应用，然而它不是对于所有问题都是好的选择。块语言中所有的状态（MVC 中的 “M”）都被块对象所持有，因而将该模式复制到 JavaScript 中实无必要，除非对于 Model 有其他的需求（例如编辑共享的，分布式的代码）。</p><p>在 Waterbear 的早期版本中，我曾通过在 JavaScript 中维持 Model 然后将之同步到 DOM 中，后来我发现有一半的代码和 90% 的 bug 都出于这里。消除了这种重复之后，代码变得更加简单和健壮，所有的状态都被 DOM 元素所持有后，使用开发者工具可以轻松查出很多 bug。因此在 HTML/CSS/JavaScript 的基础上增加 MVC 的额外分层没有什么帮助。</p><h3 id="细微更改引发大变更" tabindex="-1"><a class="header-anchor" href="#细微更改引发大变更" aria-hidden="true">#</a> 细微更改引发大变更</h3><p>构建一个我所从事的大型系统的小型而紧凑的版本是一个有趣的练习。在构建大型系统时，你对于改变总是很迟疑，因为这会影响到很多方面。然后在一个小型版本中，你可以尽情试验然后将所学到的东西应用到大型系统。对于我来说，大型系统就是 Waterbear，而这个功能对于 Waterbear 的构建很有建设意义。</p><h3 id="小实验使得失败不再可怕" tabindex="-1"><a class="header-anchor" href="#小实验使得失败不再可怕" aria-hidden="true">#</a> 小实验使得失败不再可怕</h3><p>在这个微型的块语言中，我进行了下面的试验：</p><ul><li>使用 HTML5 的拖拽</li><li>通过直接遍历 DOM 并调用绑定函数的方式来运行块</li><li>将实际运行的代码从 HTML DOM 中分离</li><li>简化了拖动时的碰撞检测</li><li>构建了我的微型向量（vector）和精灵（sprite）库（用于游戏块）</li><li>改变脚本时实时显示结果</li></ul><p>试验不一定需要成功。我们总是倾向于将失败看得很严重，而不是将它视为通向成功的路径。虽然我搞定了 HTML5 的拖拽，然后由于在手机浏览器上不支持，所以在 Waterbear 中没有采用。分离代码并且通过迭代块来执行工作良好，因此我已经着手将它引入 Waterbear 了。</p><h3 id="我们真正需要构建什么" tabindex="-1"><a class="header-anchor" href="#我们真正需要构建什么" aria-hidden="true">#</a> 我们真正需要构建什么</h3><p>构建一个大型系统的小型版本可以使得我们更加专注于最重要的部分。使得我们思考，有哪些功能是历史遗留而不再需要维护。总之，可以帮助大型系统进行重构。</p><h3 id="构建程序之路还很漫长" tabindex="-1"><a class="header-anchor" href="#构建程序之路还很漫长" aria-hidden="true">#</a> 构建程序之路还很漫长</h3><p>在该项目中，我还有一些东西没有试验。比如添加一个能添加函数的块。实现撤销和重做功能。使块能接受多个参数。通过网络分享脚本。</p>`,63);function J(U,G){const p=c("router-link"),t=c("ExternalLinkIcon");return l(),i("div",null,[b,k(" more "),s("nav",f,[s("ul",null,[s("li",null,[a(p,{to:"#目标和结构"},{default:o(()=>[n("目标和结构")]),_:1}),s("ul",null,[s("li",null,[a(p,{to:"#脚本的本质"},{default:o(()=>[n("脚本的本质")]),_:1})]),s("li",null,[a(p,{to:"#web-应用"},{default:o(()=>[n("Web 应用")]),_:1})])])]),s("li",null,[a(p,{to:"#代码分析"},{default:o(()=>[n("代码分析")]),_:1}),s("ul",null,[s("li",null,[a(p,{to:"#blocks-js"},{default:o(()=>[n("blocks.js")]),_:1})]),s("li",null,[a(p,{to:"#drag-js"},{default:o(()=>[n("drag.js")]),_:1})]),s("li",null,[a(p,{to:"#menu-js"},{default:o(()=>[n("menu.js")]),_:1})]),s("li",null,[a(p,{to:"#turtle-js"},{default:o(()=>[n("turtle.js")]),_:1})])])]),s("li",null,[a(p,{to:"#总结"},{default:o(()=>[n("总结")]),_:1}),s("ul",null,[s("li",null,[a(p,{to:"#为何不使用-mvc"},{default:o(()=>[n("为何不使用 MVC？")]),_:1})]),s("li",null,[a(p,{to:"#细微更改引发大变更"},{default:o(()=>[n("细微更改引发大变更")]),_:1})]),s("li",null,[a(p,{to:"#小实验使得失败不再可怕"},{default:o(()=>[n("小实验使得失败不再可怕")]),_:1})]),s("li",null,[a(p,{to:"#我们真正需要构建什么"},{default:o(()=>[n("我们真正需要构建什么")]),_:1})]),s("li",null,[a(p,{to:"#构建程序之路还很漫长"},{default:o(()=>[n("构建程序之路还很漫长")]),_:1})])])])])]),s("div",g,[h,s("p",null,[n("本文的翻译部分参考了 "),s("a",w,[n("此篇博客"),a(t)]),n(" 的内容。")]),s("p",null,[n("本文的原文可访问 "),s("a",y,[n("aosabook.org"),a(t)]),n(" 阅读。")])]),s("p",null,[s("a",_,[n("Dethe"),a(t)]),n(" 是一个极客老爸，具有审美趣味的程序员，导师，以及可视化编程工具 "),s("a",j,[n("Waterbear"),a(t)]),n(" 的作者。他联合创办了温哥华手工制作教育沙龙并且满心希望机器纸折兔能火遍全球。")]),T,x,M,S,s("p",null,[n("基于块的语言历史悠久，比较著名的有 "),s("a",D,[n("Lego Mindstorms"),a(t)]),n("，"),s("a",C,[n("Alice3D"),a(t)]),n("，"),s("a",B,[n("StarLogo"),a(t)]),n("，还有 "),s("a",E,[n("Scratch"),a(t)]),n(" 。还有一些在 Web 上可以访问的："),s("a",q,[n("Blockly"),a(t)]),n("，"),s("a",L,[n("AppInventor"),a(t)]),n("，"),s("a",H,[n("Tynker"),a(t)]),n(" 以及更多。")]),s("p",null,[n("本章的代码基于开源项目 "),s("a",I,[n("Waterbear"),a(t)]),n("，这不是一个语言，而是将其他现存语言包装成块语法的工具。该包装器的作用包括以上提到的几点：消除语法错误，方便本地化。除此之外，可视化的代码有时更加容易阅读和调试，还不会打字的儿童也能使用块。（可以更进一步地在块上放置图标，也可以加上文字，提供给学前儿童使用，然而这个功能我们先不考虑）。")]),R,s("p",null,[n("如果想事先体验一下基于块的语言是怎么样的，可以到 "),s("a",A,[n("作者的 Github"),a(t)]),n(" 进行实验。")]),F,s("p",null,[n("代码是过程式的，没有采用面向对象或者函数式。我们可以使用任意一种范式来做同一件事，然而那些需要一更多的设置代码和包装代码来进行本已存在于DOM的东西。最近有个项目 "),s("a",P,[n("Custom Elements"),a(t)]),n(" 使得你可以面向对象的方式操作 DOM，还有很多关于 "),s("a",W,[n("Functional JavaScript"),a(t)]),n(" 的文章，然而这些都需要额外的工作，因此保持过程式使得问题更简单。")]),N,s("p",null,[n("我们使用 HTML5 的拖拽功能；需要的 JavaScript 事件处理器在这儿定义。（关于 HTML5 的拖拽，详情参考 "),s("a",V,[n("Eric Bidleman"),a(t)]),n(" 的文章）内建支持拖拽固然很棒，然而也有一些限制，例如移动端浏览器上基本不支持。")]),O])}const K=u(m,[["render",J],["__file","blockcode-a-visual-programming-toolkit.html.vue"]]);export{K as default};

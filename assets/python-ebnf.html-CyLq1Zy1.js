import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as l,c as u,b as t,a as s,w as a,d as n,e as r}from"./app-DhX54nll.js";const i={},k=t("h1",{id:"python-ebnf-语言定义",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#python-ebnf-语言定义"},[t("span",null,"Python EBNF 语言定义")])],-1),h={class:"table-of-contents"},d=t("h2",{id:"1-python-语言定义",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#1-python-语言定义"},[t("span",null,"1. Python 语言定义")])],-1),m=t("code",null,"parso",-1),y=t("sup",{class:"footnote-ref"},[t("a",{href:"#footnote1"},"[1]"),t("a",{class:"footnote-anchor",id:"footnote-ref1"})],-1),f=r(`<p>例如 <a href="https://github.com/davidhalter/parso/blob/master/parso/python/grammar310.txt" target="_blank" rel="noopener noreferrer">Python 3.10 的语言定义</a> 可以从 GitHub 仓库内找到。</p><p>例如部分语句的定义：</p><div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">compound_stmt</span><span class="token punctuation">:</span> if_stmt <span class="token punctuation">|</span> while_stmt <span class="token punctuation">|</span> for_stmt <span class="token punctuation">|</span> try_stmt <span class="token punctuation">|</span> with_stmt <span class="token punctuation">|</span> funcdef <span class="token punctuation">|</span> classdef <span class="token punctuation">|</span> decorated <span class="token punctuation">|</span> async_stmt
<span class="token key atrule">async_stmt</span><span class="token punctuation">:</span> &#39;async&#39; (funcdef <span class="token punctuation">|</span> with_stmt <span class="token punctuation">|</span> for_stmt)
<span class="token key atrule">if_stmt</span><span class="token punctuation">:</span> &#39;if&#39; namedexpr_test &#39;<span class="token punctuation">:</span>&#39; suite (&#39;elif&#39; namedexpr_test &#39;<span class="token punctuation">:</span>&#39; suite)* <span class="token punctuation">[</span>&#39;else&#39; &#39;<span class="token punctuation">:</span>&#39; suite<span class="token punctuation">]</span>
<span class="token key atrule">while_stmt</span><span class="token punctuation">:</span> &#39;while&#39; namedexpr_test &#39;<span class="token punctuation">:</span>&#39; suite <span class="token punctuation">[</span>&#39;else&#39; &#39;<span class="token punctuation">:</span>&#39; suite<span class="token punctuation">]</span>
<span class="token key atrule">for_stmt</span><span class="token punctuation">:</span> &#39;for&#39; exprlist &#39;in&#39; testlist &#39;<span class="token punctuation">:</span>&#39; suite <span class="token punctuation">[</span>&#39;else&#39; &#39;<span class="token punctuation">:</span>&#39; suite<span class="token punctuation">]</span>
<span class="token key atrule">try_stmt</span><span class="token punctuation">:</span> (&#39;try&#39; &#39;<span class="token punctuation">:</span>&#39; suite
           ((except_clause &#39;<span class="token punctuation">:</span>&#39; suite)+
            <span class="token punctuation">[</span>&#39;else&#39; &#39;<span class="token punctuation">:</span>&#39; suite<span class="token punctuation">]</span>
            <span class="token punctuation">[</span>&#39;finally&#39; &#39;<span class="token punctuation">:</span>&#39; suite<span class="token punctuation">]</span> <span class="token punctuation">|</span>
           &#39;finally&#39; &#39;<span class="token punctuation">:</span>&#39; suite))
<span class="token key atrule">with_stmt</span><span class="token punctuation">:</span> &#39;with&#39; with_item (&#39;<span class="token punctuation">,</span>&#39; with_item)*  &#39;<span class="token punctuation">:</span>&#39; suite
<span class="token key atrule">with_item</span><span class="token punctuation">:</span> test <span class="token punctuation">[</span>&#39;as&#39; expr<span class="token punctuation">]</span>
<span class="token comment"># NB compile.c makes sure that the default except clause is last</span>
<span class="token key atrule">except_clause</span><span class="token punctuation">:</span> &#39;except&#39; <span class="token punctuation">[</span>test <span class="token punctuation">[</span>&#39;as&#39; NAME<span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token key atrule">suite</span><span class="token punctuation">:</span> simple_stmt <span class="token punctuation">|</span> NEWLINE INDENT stmt+ DEDENT
</code></pre></div><p><code>parso</code> 的解析器通过解析 EBNF 获得对应版本的 Python 语言语法，然后通过解析 Python 代码来生成抽象语法树（AST）。</p><h2 id="2-ebnf-语法" tabindex="-1"><a class="header-anchor" href="#2-ebnf-语法"><span>2. EBNF 语法</span></a></h2><p><strong>巴科斯-诺尔范式</strong>（Extended Backus-Naur Form，EBNF）是一种用于描述计算机语言语法的元语言。它是 Backus-Naur Form（BNF）的扩展版本，提供了更多的元素和语法结构，以便更准确地描述一些复杂的语法规则。</p><p>EBNF 的语法规则由一系列规则组成，每个规则包含一个非终止符和一个或多个终止符或非终止符。非终止符表示语法规则的一部分，而终止符是语法规则的最基本的元素。EBNF 中的规则可以使用括号、方括号、花括号等符号来描述语法的结构。</p><p>EBNF 还支持一些元素，如 <code>|</code> 表示或，可以用于在一个语法规则中定义多个可能的选择；<code>+</code> 表示至少重复一次；<code>*</code> 表示零次或多次重复。这些元素使 EBNF 更加灵活，可以描述更复杂的语法规则。</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>expression ::<span class="token operator">=</span> term <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token string">&quot;+&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span> term<span class="token punctuation">}</span>.
term ::<span class="token operator">=</span> factor <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span> factor<span class="token punctuation">}</span>.
factor ::<span class="token operator">=</span> number <span class="token operator">|</span> <span class="token string">&quot;(&quot;</span> expression <span class="token string">&quot;)&quot;</span><span class="token builtin class-name">.</span>
number ::<span class="token operator">=</span> digit <span class="token punctuation">{</span>digit<span class="token punctuation">}</span>.
digit ::<span class="token operator">=</span> <span class="token string">&quot;0&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;1&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;2&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;3&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;4&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;5&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;6&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;7&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;8&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;9&quot;</span><span class="token builtin class-name">.</span>
</code></pre></div><p>EBNF 被广泛用于编程语言的设计和描述，它可以帮助程序员更容易地理解和实现语法规则。</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td><code>:</code></td><td>表示定义</td></tr><tr><td><code>[ ]</code></td><td>中是可选项</td></tr><tr><td><code>&#39; &#39;</code></td><td>引号里的内容表示字符</td></tr><tr><td><code>|</code></td><td>两边的是可选内容，或者的关系</td></tr><tr><td><code>*</code></td><td>表示零个或者多个</td></tr><tr><td><code>+</code></td><td>表示一个或者多个</td></tr></tbody></table><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>冷门话题，聊一聊 Python 的 EBNF，酷 Python，<a href="http://www.coolpython.net/informal_essay/21-04/py-ebnf.html" target="_blank" rel="noopener noreferrer">http://www.coolpython.net/informal_essay/21-04/py-ebnf.html</a> <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>`,13);function _(g,b){const o=e("router-link"),p=e("RouteLink");return l(),u("div",null,[k,t("nav",h,[t("ul",null,[t("li",null,[s(o,{to:"#1-python-语言定义"},{default:a(()=>[n("1. Python 语言定义")]),_:1})]),t("li",null,[s(o,{to:"#2-ebnf-语法"},{default:a(()=>[n("2. EBNF 语法")]),_:1})])])]),d,t("p",null,[n("我们在第三方库中介绍过一个 Python 语言解析器"),s(p,{to:"/posts/python/packages/compiler/parso.html"},{default:a(()=>[m]),_:1}),n("，它的核心就是一个 Python 语言定义，它是一个 EBNF 语法定义，用于解析 Python 代码。"),y]),f])}const P=c(i,[["render",_],["__file","python-ebnf.html.vue"]]),E=JSON.parse('{"path":"/posts/python/basic/collections/python-ebnf.html","title":"Python EBNF 语言定义","lang":"zh-CN","frontmatter":{"description":"Python EBNF 语言定义 1. Python 语言定义 我们在第三方库中介绍过一个 Python 语言解析器，它的核心就是一个 Python 语言定义，它是一个 EBNF 语法定义，用于解析 Python 代码。[1] 例如 Python 3.10 的语言定义 可以从 GitHub 仓库内找到。 例如部分语句的定义： parso 的解析器通过解...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/posts/python/basic/collections/python-ebnf.html"}],["meta",{"property":"og:site_name","content":"鸭梨"}],["meta",{"property":"og:title","content":"Python EBNF 语言定义"}],["meta",{"property":"og:description","content":"Python EBNF 语言定义 1. Python 语言定义 我们在第三方库中介绍过一个 Python 语言解析器，它的核心就是一个 Python 语言定义，它是一个 EBNF 语法定义，用于解析 Python 代码。[1] 例如 Python 3.10 的语言定义 可以从 GitHub 仓库内找到。 例如部分语句的定义： parso 的解析器通过解..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T04:16:18.000Z"}],["meta",{"property":"article:author","content":"Alex Sun"}],["meta",{"property":"article:modified_time","content":"2024-05-27T04:16:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python EBNF 语言定义\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-27T04:16:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alex Sun\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. Python 语言定义","slug":"1-python-语言定义","link":"#1-python-语言定义","children":[]},{"level":2,"title":"2. EBNF 语法","slug":"2-ebnf-语法","link":"#2-ebnf-语法","children":[]}],"git":{"createdTime":1716783378000,"updatedTime":1716783378000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":2.11,"words":634},"filePathRelative":"posts/python/basic/collections/python-ebnf.md","localizedDate":"2024年5月27日","excerpt":"\\n\\n<h2>1. Python 语言定义</h2>\\n<p>我们在第三方库中介绍过一个 Python 语言解析器<a href=\\"/posts/python/packages/compiler/parso.html\\" target=\\"_blank\\"><code>parso</code></a>，它的核心就是一个 Python 语言定义，它是一个 EBNF 语法定义，用于解析 Python 代码。<sup class=\\"footnote-ref\\"><a href=\\"#footnote1\\">[1]</a><a class=\\"footnote-anchor\\" id=\\"footnote-ref1\\"></a></sup></p>","autoDesc":true}');export{P as comp,E as data};

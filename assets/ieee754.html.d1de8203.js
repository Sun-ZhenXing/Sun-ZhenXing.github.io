import{m as w,r as c,V as E,W as x,$ as g,X as n,a2 as u,a3 as i,Z as f,a1 as V,Y as s,a0 as S,z as m,_ as B}from"./framework.5ee3d720.js";const I=n("p",null,[s("IEEE 754 浮点数的交互式演示，使用 ES6 新特性 "),n("code",null,"ArrayBuffer"),s(" 和 "),n("code",null,"DataView"),s(" 来读取和设置二进制数组。")],-1),D=n("h1",{id:"ieee-754-浮点数交互式演示",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ieee-754-浮点数交互式演示","aria-hidden":"true"},"#"),s(" IEEE 754 浮点数交互式演示")],-1),N={class:"my-input"},U=n("label",{for:"input-text"},"输入值",-1),C=n("label",{for:"input-bin"},"二进制表示",-1),z=n("label",{for:"input-hex"},"十六进制表示",-1),A=n("label",{for:"input-real"},"原始值",-1),F=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"解释"),n("p",null,"具体显示的结果取决于你的计算机储存方式和浮点数实现，考虑到现代计算机几乎 100% 地采用了 IEEE 754，并使用小端存储数据，所以这也不是什么问题。除非你的机器正在使用大端存储，JavaScript 的实现也采用大端存储，那么你看到的结果也是大端的。")],-1),T=S(`<h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><p>使用 ES6 新特性 <code>ArrayBuffer</code> 和 <code>DataView</code> 来读取和设置二进制数组：</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 将浮点数转换为</span>
<span class="token keyword">const</span> float32_to_uint32 <span class="token operator">=</span> <span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  view<span class="token punctuation">.</span><span class="token function">setFloat32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> view<span class="token punctuation">.</span><span class="token function">getUint32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>点击 <em><strong>在 GitHub 上编辑此页</strong></em> 来查看源代码，本页面采用 MarkDown 嵌入 Vue 组件的方式，使用 TypeScript 和 Vue3 Setup 语法。</p><h2 id="推荐项目" tabindex="-1"><a class="header-anchor" href="#推荐项目" aria-hidden="true">#</a> 推荐项目</h2>`,5),G={href:"https://github.com/Sun-ZhenXing/IEEE754",target:"_blank",rel:"noopener noreferrer"},H={href:"https://www.h-schmidt.net/FloatConverter/IEEE754.html",target:"_blank",rel:"noopener noreferrer"},J=w({__name:"ieee754.html",setup(L){const d=c(""),p=c(""),l=c(""),r=c(0),h=a=>{const e=new ArrayBuffer(4),t=new DataView(e);return t.setFloat32(0,a,!0),t.getUint32(0,!0)},_=a=>{const e=new ArrayBuffer(4),t=new DataView(e);return t.setUint32(0,a,!0),t.getFloat32(0,!0)},v=(a,e=32)=>{const t=a.toString(16);return"0".repeat(e/4-t.length)+t},y=(a,e=32)=>{const t=a.toString(2);return"0".repeat(e-t.length)+t},b=()=>{const a=parseFloat(d.value);if(isNaN(a)){p.value="",l.value="",r.value=0;return}const e=h(a);p.value=y(e),l.value=v(e),r.value=_(e)};return(a,e)=>{const t=m("Badge"),k=m("ExternalLinkIcon");return E(),x("div",null,[I,g(" more "),D,n("div",N,[U,u(n("input",{type:"text",id:"input-text",autocomplete:"off",style:{"font-family":"var(--font-family-code)","font-size":"1rem"},onInput:b,"onUpdate:modelValue":e[0]||(e[0]=o=>d.value=o),placeholder:"输入浮点数"},null,544),[[i,d.value]]),n("p",null,[C,u(n("input",{type:"text",id:"input-bin",autocomplete:"off",readonly:"",style:{"font-family":"var(--font-family-code)","font-size":"1rem"},"onUpdate:modelValue":e[1]||(e[1]=o=>p.value=o),placeholder:"二进制"},null,512),[[i,p.value]])]),n("p",null,[z,u(n("input",{type:"text",id:"input-hex",autocomplete:"off",readonly:"",style:{"font-family":"var(--font-family-code)","font-size":"1rem"},"onUpdate:modelValue":e[2]||(e[2]=o=>l.value=o),placeholder:"十六进制"},null,512),[[i,l.value]])]),n("p",null,[A,u(n("input",{type:"text",id:"input-real",autocomplete:"off",readonly:"",style:{"font-family":"var(--font-family-code)","font-size":"1rem"},"onUpdate:modelValue":e[3]||(e[3]=o=>r.value=o),placeholder:"原始值"},null,512),[[i,r.value]])])]),F,n("p",null,[f(t,{type:"danger",vertical:"middle"},{default:V(()=>[s("TODO")]),_:1}),s(" 需要输入二进制和十六进制，并友好显示二进制表示。")]),T,n("ol",null,[n("li",null,[s("我使用 PySide6 构建的 IEEE 754 演示，效果好于当前页面，"),n("a",G,[s("GitHub"),f(k)])]),n("li",null,[n("a",H,[s("IEEE 754 Converter (JavaScript)"),f(k)])])])])}}}),O=B(J,[["__file","ieee754.html.vue"]]);export{O as default};

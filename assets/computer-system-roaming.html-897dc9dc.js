import{_ as t,Y as o,Z as c,$ as r,a1 as l,a0 as e,a4 as i,a3 as n,a2 as a,E as p}from"./framework-b57d439c.js";const d="/assets/1-计算机系统-11901642.svg",h="/assets/1-高速缓存储存器-4842a6d4.svg",u="/assets/1-虚拟内存-31a3d8e0.svg",m="/assets/1-抽象的重要性-96d0a2c4.svg",g={},_=l("p",null,"第一章：计算机系统漫游。",-1),f={class:"table-of-contents"},k=n(`<p>程序的生命周期（从代码到执行）：</p><ol><li>创建</li><li>编译</li><li>运行</li><li>结束</li></ol><p>编写一个最简单的 C 程序：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello, world\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>保存为 <code>hello.c</code> 文件，然后执行命令：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-o</span> hello hello.c
</code></pre></div><p>生成了一个可执行程序 <code>hello</code> （Linux 下）</p><p>如果要执行，只需要在 shell 中输入，然后回车即可：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>./hello
</code></pre></div><p>控制台就会输出</p><div class="language-log" data-ext="log"><pre class="language-log"><code>hello<span class="token punctuation">,</span> world
</code></pre></div><h2 id="_1-1-信息就是位-上下文" tabindex="-1"><a class="header-anchor" href="#_1-1-信息就是位-上下文" aria-hidden="true">#</a> 1.1 信息就是位 + 上下文</h2><p>系统中所有的信息——包括磁盘文件、内存中程序、内存中存放的用户数据以及网络上传输的数据，都是由一串比特表示的，区分不同数据对象的唯一方法是我们读到这些数据对象是的上下文。</p><p><code>hello</code> 程序的生命周期是从一个源文件开始的，即程序员通过编辑器创建并保存的文本文件，文件名是 <code>hello.c</code>。源程序实际上就是一个由值 <code>0</code> 和 <code>1</code> 组成的 <strong>位</strong>（又称为 <strong>比特</strong>）序列，8 个位被组织成一组，称为 <strong>字节</strong>，每个字节表示程序中的某些文本字符。</p><p>大部分的现代计算机系统都使用 ASCII 标准来表示文本字符，这种方式实际上就是用一个唯一的单字节大小的整数值来表示每个字符。像 <code>hello.c</code> 这样只由 ASCII 字符构成的文件称为文本文件。</p><p>概念：</p><ul><li>位即比特</li><li>上下文就是存储的位置</li><li>了解 ASCII 字符</li></ul><p>C 编程语言的起源：</p><ul><li>1969-1973 贝尔实验室 Dennis Ritchie 创建</li><li>1989 ANSI C 标准</li><li>ISO C 国际标准</li><li>C 语言是古怪的、有缺陷的，但同时是一个巨大的成功</li><li>C 语言的成功 <ul><li>与 Unix 系统关系密切</li><li>小而简单</li><li>为实践目的而设计的</li></ul></li><li>C 语言的缺点 <ul><li>指针十分危险</li><li>缺乏抽象的显式支持（如类、对象、异常）</li></ul></li></ul><h2 id="_1-2-程序被其他程序翻译成不同格式" tabindex="-1"><a class="header-anchor" href="#_1-2-程序被其他程序翻译成不同格式" aria-hidden="true">#</a> 1.2 程序被其他程序翻译成不同格式</h2><p>这个 <strong>其他程序</strong> 指的是 <strong>编译器</strong>，编译器能将代码编译为可执行程序。从源代码到程序的过程通常称为 <strong>编译</strong>。</p><p>要在系统上运行 <code>hello.c</code> 程序，每条 C 语句都必须被其他程序转化为一系列的低级机器语言指令。然后这些指令按照一种称为 <strong>可执行目标程序</strong> 的格式打好包，并以二进制磁盘文件的形式存放起来。</p><p>执行下面命令编译 <code>hello.c</code>：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-o</span> hello hello.c
</code></pre></div><p>然而编译过程十分复杂，包括下面的程序参与：</p><ol><li><strong>预处理器</strong>（Perprocessor, cpp）</li><li><strong>编译器</strong>（Compiler, ccl）</li><li><strong>汇编器</strong>（Assembler, as）</li><li><strong>链接器</strong>（Linker, ld）</li></ol><p>等程序的参与，所以程序的编译包括 4 个阶段：</p><ol><li>预处理 <ul><li>预处理源文件</li><li>修改原始程序，如 <code>#include &lt;stdio.h&gt;</code> 的预处理指令</li><li>生成 <code>hello.i</code></li></ul></li><li>编译 <ul><li>许多过程：词法分析、语法分析、语义分析、中间代码生成、中间代码优化……</li><li>生成 <code>hello.s</code></li></ul></li><li>汇编 <ul><li>翻译为机器指令</li><li>生成 <code>hello.o</code> （可重定位目标文件）</li></ul></li><li>链接 <ul><li>链接 <code>printf.o</code> 等对象文件</li><li>生成可执行文件 <code>hello</code></li></ul></li></ol><p>执行这四个阶段的程序（预处理器、编译器、汇编器和链接器）一起构成了编译系统。</p><p>可以参考编译原理，<code>hello.s</code> 的大体内容如下方所示（Linux，x64）：</p><div class="language-nasm" data-ext="nasm"><pre class="language-nasm"><code><span class="token comment">; AT&amp;T Assembly</span>
<span class="token label function">main:</span>
    subq <span class="token number">$8</span>, <span class="token operator">%</span><span class="token register variable">rsp</span>
    movl <span class="token operator">$</span>.LCO, <span class="token operator">%</span><span class="token register variable">edi</span>
    call puts
    movl <span class="token number">$0</span>, <span class="token operator">%</span><span class="token register variable">eax</span>
    addq <span class="token number">$8</span>, <span class="token operator">%</span><span class="token register variable">rsp</span>
    ret
</code></pre></div><h2 id="_1-3-了解编译系统如何工作是大有益处的" tabindex="-1"><a class="header-anchor" href="#_1-3-了解编译系统如何工作是大有益处的" aria-hidden="true">#</a> 1.3 了解编译系统如何工作是大有益处的</h2><ol><li><em>优化程序性能</em>。为了在 C 程序中做出好的编码选择，我们确实需要了解一些机器代码以及编译器将不同 C 语句转化为机器代码的方式。例如，一个 <code>switch</code> 语句是否总比一系列 <code>if-then-else</code> 语句高效得多？一个函数调用的开销有多大？<code>while</code> 循环比 <code>for</code> 循环更有效吗？指针引用比数组索引更有效吗？</li><li><em>理解链接时出现的错误</em>。一些令人困扰的程序错误往往都与链接器操作有关。</li><li><em>避免安全漏洞</em>。缓冲区溢出是造成大多数网络和 Internet 服务器上安全漏洞的主要原因。通过更好地理解编译系统，可以降低这些错误的出现。</li></ol><h2 id="_1-4-处理器读并解释储存在内存中的指令" tabindex="-1"><a class="header-anchor" href="#_1-4-处理器读并解释储存在内存中的指令" aria-hidden="true">#</a> 1.4 处理器读并解释储存在内存中的指令</h2><h3 id="_1-4-1-系统的硬件组成" tabindex="-1"><a class="header-anchor" href="#_1-4-1-系统的硬件组成" aria-hidden="true">#</a> 1.4.1 系统的硬件组成</h3><ol><li>总线</li><li>I/O 设备</li><li>主存</li><li>处理器</li></ol><h3 id="_1-4-2-运行-hello-c-程序" tabindex="-1"><a class="header-anchor" href="#_1-4-2-运行-hello-c-程序" aria-hidden="true">#</a> 1.4.2 运行 <code>hello.c</code> 程序</h3><ol><li>键盘输入的字符将逐一读入寄存器，再放入内存</li><li>直接储存器存取（DMA）技术，使数据文件从磁盘到达内存</li><li>处理器开始执行 <code>hello</code> 程序，复制到寄存器文件，然后是显示设备</li><li>显示在屏幕上</li></ol><figure><img src="`+d+'" alt="计算机系统" tabindex="0" loading="lazy"><figcaption>计算机系统</figcaption></figure><h2 id="_1-5-高速缓存至关重要" tabindex="-1"><a class="header-anchor" href="#_1-5-高速缓存至关重要" aria-hidden="true">#</a> 1.5 高速缓存至关重要</h2><ul><li>高速缓存（cache）存放最常使用的数据</li><li>L1，L2 缓存器是使用静态随机访问储存器（SRAM）实现的</li><li>“局部性原理”</li></ul><figure><img src="'+h+'" alt="高速缓存储存器" tabindex="0" loading="lazy"><figcaption>高速缓存储存器</figcaption></figure><h2 id="_1-6-储存设备形成的层次结构" tabindex="-1"><a class="header-anchor" href="#_1-6-储存设备形成的层次结构" aria-hidden="true">#</a> 1.6 储存设备形成的层次结构</h2><ul><li>序号越小：更小，更快，更贵的存储设备</li><li>序号越大：更大，更慢，更便宜的存储设备</li></ul><ol><li>寄存器</li><li>L1 高速缓存（SRAM）</li><li>L2 高速缓存（SRAM）</li><li>L3 高速缓存（SRAM）</li><li>主存（DRAM）</li><li>磁盘</li><li>远程服务器</li></ol><h2 id="_1-7-操作系统硬件管理" tabindex="-1"><a class="header-anchor" href="#_1-7-操作系统硬件管理" aria-hidden="true">#</a> 1.7 操作系统硬件管理</h2><p>操作系统</p><ul><li>防止硬件被失控的应用程序滥用</li><li>向应用程序提供简单一致的机制来控制复杂而又不同的硬件设备</li></ul><p>操作系统通过基本的抽象概念来实现</p><ul><li>进程</li><li>虚拟内存</li><li>文件</li></ul><blockquote><p>见 1.9 抽象的重要性图示</p></blockquote><ol><li>进程是操作系统对正在运行程序的抽象 <ul><li>操作系统的功能</li><li>内核</li><li>上下文切换</li></ul></li><li>线程 <ul><li>多线程</li></ul></li><li>虚拟内存 <ul><li>程序代码和数据</li><li>堆</li><li>共享库</li><li>栈</li><li>内核虚拟内存</li></ul></li></ol><figure><img src="'+u+'" alt="虚拟内存" tabindex="0" loading="lazy"><figcaption>虚拟内存</figcaption></figure><ol start="4"><li>文件 <ul><li>I/O 设备的抽象表示</li><li>字节序列都是文件</li></ul></li></ol><h2 id="_1-8-系统之间利用网络通信" tabindex="-1"><a class="header-anchor" href="#_1-8-系统之间利用网络通信" aria-hidden="true">#</a> 1.8 系统之间利用网络通信</h2><p>使用 telnet、ssh 通信进行远程控制</p><ol><li>输入 <code>hello</code></li><li>向服务器发送字符串</li><li>服务器向 shell 发送字符串，运行结束后将字符串发送给服务器</li><li>服务器向客户端发送字符串</li><li>客户端显示字符串</li></ol><h2 id="_1-9-重要主题" tabindex="-1"><a class="header-anchor" href="#_1-9-重要主题" aria-hidden="true">#</a> 1.9 重要主题</h2><h3 id="_1-9-1-amdahl-定律" tabindex="-1"><a class="header-anchor" href="#_1-9-1-amdahl-定律" aria-hidden="true">#</a> 1.9.1 Amdahl 定律</h3>',59),b=l("p",null,[a("加速比率 "),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",null,"S")]),l("annotation",{encoding:"application/x-tex"},"S")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.6833em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S")])])]),a("：")],-1),x=l("p",{class:"katex-block"},[l("span",{class:"katex-display"},[l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[l("semantics",null,[l("mrow",null,[l("mi",null,"S"),l("mo",null,"="),l("mfrac",null,[l("mn",null,"1"),l("mrow",null,[l("mo",{stretchy:"false"},"("),l("mn",null,"1"),l("mo",null,"−"),l("mi",null,"α"),l("mo",{stretchy:"false"},")"),l("mo",null,"+"),l("mi",null,"α"),l("mi",{mathvariant:"normal"},"/"),l("mi",null,"k")])])]),l("annotation",{encoding:"application/x-tex"}," S = \\frac{1}{(1-\\alpha) + \\alpha / k} ")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.6833em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),l("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),l("span",{class:"mrel"},"="),l("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),l("span",{class:"base"},[l("span",{class:"strut",style:{height:"2.2574em","vertical-align":"-0.936em"}}),l("span",{class:"mord"},[l("span",{class:"mopen nulldelimiter"}),l("span",{class:"mfrac"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"1.3214em"}},[l("span",{style:{top:"-2.314em"}},[l("span",{class:"pstrut",style:{height:"3em"}}),l("span",{class:"mord"},[l("span",{class:"mopen"},"("),l("span",{class:"mord"},"1"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mbin"},"−"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),l("span",{class:"mclose"},")"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mbin"},"+"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),l("span",{class:"mord"},"/"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k")])]),l("span",{style:{top:"-3.23em"}},[l("span",{class:"pstrut",style:{height:"3em"}}),l("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),l("span",{style:{top:"-3.677em"}},[l("span",{class:"pstrut",style:{height:"3em"}}),l("span",{class:"mord"},[l("span",{class:"mord"},"1")])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.936em"}},[l("span")])])])]),l("span",{class:"mclose nulldelimiter"})])])])])])],-1),v=n('<p>结论：只有大多数部分性能得到提高，才会大幅度提升整体性能。</p><h3 id="_1-9-2-并发和并行" tabindex="-1"><a class="header-anchor" href="#_1-9-2-并发和并行" aria-hidden="true">#</a> 1.9.2 并发和并行</h3><ul><li><p>如何运行更快</p><ol><li>线程级并发</li><li>指令级并行</li><li>单指令、多数据并行</li></ol></li><li><p>处理器</p><ul><li>单处理器</li><li>多处理器 <ul><li>多核</li><li>超线程的</li></ul></li></ul></li></ul><h3 id="_1-9-3-抽象的重要性" tabindex="-1"><a class="header-anchor" href="#_1-9-3-抽象的重要性" aria-hidden="true">#</a> 1.9.3 抽象的重要性</h3><figure><img src="'+m+'" alt="抽象的重要性" tabindex="0" loading="lazy"><figcaption>抽象的重要性</figcaption></figure><p>不同的抽象等级：</p><ul><li>文件是对 I/O 设备的抽象</li><li>虚拟内存是对程序储存器的抽象</li><li>进程是对一个正在运行程序的抽象</li><li>虚拟机是对整个计算机的抽象</li></ul>',7);function y(w,C){const s=p("router-link");return o(),c("div",null,[_,r(" more "),l("nav",f,[l("ul",null,[l("li",null,[e(s,{to:"#_1-1-信息就是位-上下文"},{default:i(()=>[a("1.1 信息就是位 + 上下文")]),_:1})]),l("li",null,[e(s,{to:"#_1-2-程序被其他程序翻译成不同格式"},{default:i(()=>[a("1.2 程序被其他程序翻译成不同格式")]),_:1})]),l("li",null,[e(s,{to:"#_1-3-了解编译系统如何工作是大有益处的"},{default:i(()=>[a("1.3 了解编译系统如何工作是大有益处的")]),_:1})]),l("li",null,[e(s,{to:"#_1-4-处理器读并解释储存在内存中的指令"},{default:i(()=>[a("1.4 处理器读并解释储存在内存中的指令")]),_:1}),l("ul",null,[l("li",null,[e(s,{to:"#_1-4-1-系统的硬件组成"},{default:i(()=>[a("1.4.1 系统的硬件组成")]),_:1})]),l("li",null,[e(s,{to:"#_1-4-2-运行-hello-c-程序"},{default:i(()=>[a("1.4.2 运行 hello.c 程序")]),_:1})])])]),l("li",null,[e(s,{to:"#_1-5-高速缓存至关重要"},{default:i(()=>[a("1.5 高速缓存至关重要")]),_:1})]),l("li",null,[e(s,{to:"#_1-6-储存设备形成的层次结构"},{default:i(()=>[a("1.6 储存设备形成的层次结构")]),_:1})]),l("li",null,[e(s,{to:"#_1-7-操作系统硬件管理"},{default:i(()=>[a("1.7 操作系统硬件管理")]),_:1})]),l("li",null,[e(s,{to:"#_1-8-系统之间利用网络通信"},{default:i(()=>[a("1.8 系统之间利用网络通信")]),_:1})]),l("li",null,[e(s,{to:"#_1-9-重要主题"},{default:i(()=>[a("1.9 重要主题")]),_:1}),l("ul",null,[l("li",null,[e(s,{to:"#_1-9-1-amdahl-定律"},{default:i(()=>[a("1.9.1 Amdahl 定律")]),_:1})]),l("li",null,[e(s,{to:"#_1-9-2-并发和并行"},{default:i(()=>[a("1.9.2 并发和并行")]),_:1})]),l("li",null,[e(s,{to:"#_1-9-3-抽象的重要性"},{default:i(()=>[a("1.9.3 抽象的重要性")]),_:1})])])])])]),k,b,x,v])}const A=t(g,[["render",y],["__file","computer-system-roaming.html.vue"]]);export{A as default};

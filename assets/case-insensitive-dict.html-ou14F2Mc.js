import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-DhX54nll.js";const e={},p=t(`<h1 id="大小写不敏感的字典" tabindex="-1"><a class="header-anchor" href="#大小写不敏感的字典"><span>大小写不敏感的字典</span></a></h1><p><code>requests</code> 内有一个大小写不敏感的字典类型 <code>CaseInsensitiveDict</code>，例如 <code>response.headers</code> 即是这个类型：</p><div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">&#39;http://www.bing.com&#39;</span>
res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;Connection&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>这两个结果一致。下面我们通过魔术方法实现一个大小写不敏感的字典，参考了网络上的其他方法[^1]</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CaseInsensitiveDict</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">lower_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> key<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> key

    <span class="token keyword">def</span> <span class="token function">__setitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__setitem__<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lower_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__getitem__<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lower_key<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__delitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__delitem__<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lower_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> another<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>F<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> another<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>__setitem__<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">type</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__repr__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">)&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[1]: Python 创建一个大小写不敏感的字典，CoolPython，<a href="http://www.coolpython.net/informal_essay/20-03/ignore_case_dict.html" target="_blank" rel="noopener noreferrer">http://www.coolpython.net/informal_essay/20-03/ignore_case_dict.html</a></p>`,6),o=[p];function c(i,l){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","case-insensitive-dict.html.vue"]]),d=JSON.parse(`{"path":"/posts/python/basic/collections/case-insensitive-dict.html","title":"大小写不敏感的字典","lang":"zh-CN","frontmatter":{"description":"大小写不敏感的字典 requests 内有一个大小写不敏感的字典类型 CaseInsensitiveDict，例如 response.headers 即是这个类型： 这两个结果一致。下面我们通过魔术方法实现一个大小写不敏感的字典，参考了网络上的其他方法[^1] [1]: Python 创建一个大小写不敏感的字典，CoolPython，http://ww...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/posts/python/basic/collections/case-insensitive-dict.html"}],["meta",{"property":"og:site_name","content":"鸭梨"}],["meta",{"property":"og:title","content":"大小写不敏感的字典"}],["meta",{"property":"og:description","content":"大小写不敏感的字典 requests 内有一个大小写不敏感的字典类型 CaseInsensitiveDict，例如 response.headers 即是这个类型： 这两个结果一致。下面我们通过魔术方法实现一个大小写不敏感的字典，参考了网络上的其他方法[^1] [1]: Python 创建一个大小写不敏感的字典，CoolPython，http://ww..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T04:16:18.000Z"}],["meta",{"property":"article:author","content":"Alex Sun"}],["meta",{"property":"article:modified_time","content":"2024-05-27T04:16:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"大小写不敏感的字典\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-27T04:16:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Alex Sun\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[],"git":{"createdTime":1716783378000,"updatedTime":1716783378000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":0.59,"words":178},"filePathRelative":"posts/python/basic/collections/case-insensitive-dict.md","localizedDate":"2024年5月27日","excerpt":"\\n<p><code>requests</code> 内有一个大小写不敏感的字典类型 <code>CaseInsensitiveDict</code>，例如 <code>response.headers</code> 即是这个类型：</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> requests\\n\\nurl <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'http://www.bing.com'</span>\\nres <span class=\\"token operator\\">=</span> requests<span class=\\"token punctuation\\">.</span>get<span class=\\"token punctuation\\">(</span>url<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>res<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'Connection'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>res<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'connection'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}`);export{k as comp,d as data};
